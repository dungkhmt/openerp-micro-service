[{"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/index.js":"1","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/App.js":"2","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/reportWebVitals.js":"3","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/history.js":"4","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/config/keycloak.js":"5","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/api.js":"6","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/Router.js":"7","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/components/common/progressBar/CustomizedCircularProgress.jsx":"8","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/state/MenuState.js":"9","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/state/NotificationState.js":"10","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/config/constant.js":"11","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/state/RouteState.js":"12","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/utils/notification/index.js":"13","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/utils/notification/Notification.jsx":"14","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/components/button/TertiaryButton.jsx":"15","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/routers/MainAppRouter.jsx":"16","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/routers/DeliveryManagerRouter.jsx":"17","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/routers/ApproverRouter.jsx":"18","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/routers/CustomerRouter.jsx":"19","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/routers/SaleManagerRouter.jsx":"20","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/routers/AdminRouter.jsx":"21","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/routers/TeacherRouter.jsx":"22","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/routers/PrivateRoute.jsx":"23","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/layout/sidebar/SideBar.jsx":"24","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/views/errors/NotFound.jsx":"25","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/layout/index.js":"26","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/shipment/testTable.js":"27","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/receipt/receipRequestForApproval.js":"28","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/ecommerce/cartDetail.js":"29","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/order/orderApprovalDetail.js":"30","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/order/adminOrderDetail.js":"31","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/order/orderListing.js":"32","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/components/ProtectedScreen.jsx":"33","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/layout/sidebar/MenuItem.jsx":"34","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/layout/sidebar/GroupMenuItem.jsx":"35","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/layout/Layout.jsx":"36","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/apiPaths.js":"37","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/config/menuconfig.js":"38","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/components/common/withScreenSecurity.js":"39","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/utils/utils.js":"40","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/styles.js":"41","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/components/button/PrimaryButton.jsx":"42","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/layout/sidebar/ListItemLink.jsx":"43","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/components/constants.js":"44","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/components/common/requireStar.js":"45","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/components/common/loading/loading.js":"46","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/components/map/searchBox.js":"47","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/components/map/maps.js":"48","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/layout/notification/NotificationButton.jsx":"49","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/layout/account/AccountButton.jsx":"50","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/config/menuconfig/approver.js":"51","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/config/menuconfig/general.js":"52","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/config/menuconfig/deliverymanager.js":"53","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/components/table/StandardTable.jsx":"54","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/components/table/DropDown.jsx":"55","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/config/menuconfig/customer.js":"56","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/config/menuconfig/salemanager.js":"57","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/config/menuconfig/admin.js":"58","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/config/menuconfig/user.js":"59","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/receipt/receiptRequestProcessListing.js":"60","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/config/menuconfig/teacher.js":"61","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/config/menuconfig/student.js":"62","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/receipt/receiptRequestProcess.js":"63","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/order/saleManagerOrderListing.js":"64","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/receipt/receiptRequestDetail.js":"65","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/ecommerce/productGeneralView.js":"66","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/ecommerce/productCustomerDetailView.js":"67","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/receipt/receiptRequestForApprovalListing.js":"68","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/components/common/NotAuthorized.jsx":"69","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/warehouse/listWarehouses.js":"70","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/warehouse/createWarehouse.js":"71","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/product/productListing.js":"72","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/product/productDetail.js":"73","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/product/priceConfig.js":"74","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/assets/jss/material-dashboard-react.js":"75","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/shipment/deliveryTripListing.js":"76","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/shipment/deliveryTripDetail.js":"77","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/shipment/shipmentDetail.js":"78","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/shipment/shipmentListing.js":"79","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/deliveryperson/deliveryPersonManagement.js":"80","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/utils/MenuUtils.js":"81","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/layout/account/AccountMenu.jsx":"82","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/layout/notification/NotificationMenu.jsx":"83","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/components/button/commandBarButton.js":"84","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/utils/MaterialTableUtils.jsx":"85","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/layout/account/FeedbackDialog.jsx":"86","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/layout/notification/NotificationTitle.jsx":"87","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/layout/notification/Notification.jsx":"88","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/layout/notification/ActionsWithNotificationButton.jsx":"89","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/layout/account/RejectFeedbackDialog.jsx":"90","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/layout/notification/NotificationReadIcon.jsx":"91","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/components/dialog/CustomizedDialogs.jsx":"92"},{"size":486,"mtime":1683343050081,"results":"93","hashOfConfig":"94"},{"size":5428,"mtime":1681292522899,"results":"95","hashOfConfig":"94"},{"size":362,"mtime":1681292522919,"results":"96","hashOfConfig":"94"},{"size":113,"mtime":1681292522915,"results":"97","hashOfConfig":"94"},{"size":423,"mtime":1681292522915,"results":"98","hashOfConfig":"94"},{"size":3392,"mtime":1681292522899,"results":"99","hashOfConfig":"94"},{"size":971,"mtime":1681292522899,"results":"100","hashOfConfig":"94"},{"size":1027,"mtime":1681292522915,"results":"101","hashOfConfig":"94"},{"size":1181,"mtime":1681292522919,"results":"102","hashOfConfig":"94"},{"size":268,"mtime":1681292522919,"results":"103","hashOfConfig":"94"},{"size":316,"mtime":1681292522915,"results":"104","hashOfConfig":"94"},{"size":283,"mtime":1681292522919,"results":"105","hashOfConfig":"94"},{"size":189,"mtime":1681292522923,"results":"106","hashOfConfig":"94"},{"size":4840,"mtime":1681292522919,"results":"107","hashOfConfig":"94"},{"size":285,"mtime":1681292522915,"results":"108","hashOfConfig":"94"},{"size":1895,"mtime":1683336471334,"results":"109","hashOfConfig":"94"},{"size":1398,"mtime":1683340784198,"results":"110","hashOfConfig":"94"},{"size":665,"mtime":1681393311614,"results":"111","hashOfConfig":"94"},{"size":797,"mtime":1681360691079,"results":"112","hashOfConfig":"94"},{"size":1002,"mtime":1683336471334,"results":"113","hashOfConfig":"94"},{"size":2041,"mtime":1683336471334,"results":"114","hashOfConfig":"94"},{"size":389,"mtime":1681292522919,"results":"115","hashOfConfig":"94"},{"size":873,"mtime":1681292522919,"results":"116","hashOfConfig":"94"},{"size":4220,"mtime":1683337273214,"results":"117","hashOfConfig":"94"},{"size":1346,"mtime":1681292522923,"results":"118","hashOfConfig":"94"},{"size":102,"mtime":1681292522919,"results":"119","hashOfConfig":"94"},{"size":205,"mtime":1683340861277,"results":"120","hashOfConfig":"94"},{"size":6363,"mtime":1681292522919,"results":"121","hashOfConfig":"94"},{"size":9900,"mtime":1683336462770,"results":"122","hashOfConfig":"94"},{"size":9651,"mtime":1683336471334,"results":"123","hashOfConfig":"94"},{"size":14421,"mtime":1683336471334,"results":"124","hashOfConfig":"94"},{"size":2163,"mtime":1683336471334,"results":"125","hashOfConfig":"94"},{"size":585,"mtime":1681292522915,"results":"126","hashOfConfig":"94"},{"size":3390,"mtime":1682002733902,"results":"127","hashOfConfig":"94"},{"size":6327,"mtime":1683337275038,"results":"128","hashOfConfig":"94"},{"size":4051,"mtime":1681292522919,"results":"129","hashOfConfig":"94"},{"size":1496,"mtime":1683336471334,"results":"130","hashOfConfig":"94"},{"size":3894,"mtime":1683336471334,"results":"131","hashOfConfig":"94"},{"size":2129,"mtime":1681292522915,"results":"132","hashOfConfig":"94"},{"size":1803,"mtime":1683336471334,"results":"133","hashOfConfig":"94"},{"size":4464,"mtime":1683336471334,"results":"134","hashOfConfig":"94"},{"size":510,"mtime":1681292522915,"results":"135","hashOfConfig":"94"},{"size":863,"mtime":1681292522919,"results":"136","hashOfConfig":"94"},{"size":393,"mtime":1683336471334,"results":"137","hashOfConfig":"94"},{"size":118,"mtime":1681292522915,"results":"138","hashOfConfig":"94"},{"size":226,"mtime":1683336471334,"results":"139","hashOfConfig":"94"},{"size":3091,"mtime":1681292522915,"results":"140","hashOfConfig":"94"},{"size":3631,"mtime":1683336462770,"results":"141","hashOfConfig":"94"},{"size":8269,"mtime":1681292522919,"results":"142","hashOfConfig":"94"},{"size":1781,"mtime":1681292522919,"results":"143","hashOfConfig":"94"},{"size":315,"mtime":1683336462770,"results":"144","hashOfConfig":"94"},{"size":242,"mtime":1681292522915,"results":"145","hashOfConfig":"94"},{"size":962,"mtime":1683336471334,"results":"146","hashOfConfig":"94"},{"size":5510,"mtime":1683340680710,"results":"147","hashOfConfig":"94"},{"size":1825,"mtime":1683336471334,"results":"148","hashOfConfig":"94"},{"size":445,"mtime":1683336462770,"results":"149","hashOfConfig":"94"},{"size":692,"mtime":1683336471334,"results":"150","hashOfConfig":"94"},{"size":852,"mtime":1683336462770,"results":"151","hashOfConfig":"94"},{"size":652,"mtime":1681292522915,"results":"152","hashOfConfig":"94"},{"size":3343,"mtime":1683336471334,"results":"153","hashOfConfig":"94"},{"size":404,"mtime":1681292522915,"results":"154","hashOfConfig":"94"},{"size":411,"mtime":1681292522915,"results":"155","hashOfConfig":"94"},{"size":18090,"mtime":1683336471334,"results":"156","hashOfConfig":"94"},{"size":1694,"mtime":1683336471334,"results":"157","hashOfConfig":"94"},{"size":9088,"mtime":1683337595953,"results":"158","hashOfConfig":"94"},{"size":2006,"mtime":1681292522919,"results":"159","hashOfConfig":"94"},{"size":10448,"mtime":1681292522919,"results":"160","hashOfConfig":"94"},{"size":1835,"mtime":1683336462770,"results":"161","hashOfConfig":"94"},{"size":683,"mtime":1681292522915,"results":"162","hashOfConfig":"94"},{"size":4181,"mtime":1681292522919,"results":"163","hashOfConfig":"94"},{"size":22787,"mtime":1681436071236,"results":"164","hashOfConfig":"94"},{"size":3019,"mtime":1681292522919,"results":"165","hashOfConfig":"94"},{"size":21142,"mtime":1681526290588,"results":"166","hashOfConfig":"94"},{"size":4794,"mtime":1683339275269,"results":"167","hashOfConfig":"94"},{"size":7032,"mtime":1681292522915,"results":"168","hashOfConfig":"94"},{"size":3456,"mtime":1683336471334,"results":"169","hashOfConfig":"94"},{"size":13673,"mtime":1683336471334,"results":"170","hashOfConfig":"94"},{"size":3961,"mtime":1683336471334,"results":"171","hashOfConfig":"94"},{"size":3828,"mtime":1683336471334,"results":"172","hashOfConfig":"94"},{"size":2992,"mtime":1683336471334,"results":"173","hashOfConfig":"94"},{"size":755,"mtime":1681292522919,"results":"174","hashOfConfig":"94"},{"size":6591,"mtime":1681292522919,"results":"175","hashOfConfig":"94"},{"size":6747,"mtime":1681292522919,"results":"176","hashOfConfig":"94"},{"size":272,"mtime":1681292522915,"results":"177","hashOfConfig":"94"},{"size":5429,"mtime":1683340372577,"results":"178","hashOfConfig":"94"},{"size":10185,"mtime":1681292522919,"results":"179","hashOfConfig":"94"},{"size":1078,"mtime":1681292522919,"results":"180","hashOfConfig":"94"},{"size":6306,"mtime":1681292522919,"results":"181","hashOfConfig":"94"},{"size":7735,"mtime":1681292522919,"results":"182","hashOfConfig":"94"},{"size":1170,"mtime":1681292522919,"results":"183","hashOfConfig":"94"},{"size":1398,"mtime":1681292522919,"results":"184","hashOfConfig":"94"},{"size":3346,"mtime":1681292522915,"results":"185","hashOfConfig":"94"},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"dacpyf",{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218"},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"221","messages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"223","messages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"227","messages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"229","messages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"231","messages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233"},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244"},{"filePath":"245","messages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247"},{"filePath":"248","messages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250"},{"filePath":"251","messages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253"},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"256","messages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"258","messages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"260","messages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262"},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"267","messages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269"},{"filePath":"270","messages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"272","messages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274"},{"filePath":"275","messages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281"},{"filePath":"282","messages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"284","messages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"288","messages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290"},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293"},{"filePath":"294","messages":"295","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296"},{"filePath":"297","messages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299"},{"filePath":"300","messages":"301","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"302","messages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"304","messages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"306","messages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"308","messages":"309","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"310","messages":"311","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"312","messages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"314","messages":"315","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"316","messages":"317","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"318","messages":"319","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320"},{"filePath":"321","messages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"323","messages":"324","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"325","messages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327"},{"filePath":"328","messages":"329","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"330","messages":"331","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"332"},{"filePath":"333","messages":"334","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"335"},{"filePath":"336","messages":"337","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"338"},{"filePath":"339","messages":"340","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"341","messages":"342","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"343","messages":"344","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345"},{"filePath":"346","messages":"347","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348"},{"filePath":"349","messages":"350","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351"},{"filePath":"352","messages":"353","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354"},{"filePath":"355","messages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357"},{"filePath":"358","messages":"359","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"360","messages":"361","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"362"},{"filePath":"363","messages":"364","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"365"},{"filePath":"366","messages":"367","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"368"},{"filePath":"369","messages":"370","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"371"},{"filePath":"372","messages":"373","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"374"},{"filePath":"375","messages":"376","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"377","messages":"378","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"379","messages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"381"},{"filePath":"382","messages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"384","messages":"385","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"386","messages":"387","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"388","messages":"389","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"390","messages":"391","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"392"},{"filePath":"393","messages":"394","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"395"},{"filePath":"396","messages":"397","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"398","messages":"399","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"400","messages":"401","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/index.js",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/App.js",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/reportWebVitals.js",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/history.js",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/config/keycloak.js",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/api.js",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/Router.js",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/components/common/progressBar/CustomizedCircularProgress.jsx",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/state/MenuState.js",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/state/NotificationState.js",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/config/constant.js",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/state/RouteState.js",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/utils/notification/index.js",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/utils/notification/Notification.jsx",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/components/button/TertiaryButton.jsx",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/routers/MainAppRouter.jsx",["402"],"import { LinearProgress } from \"@mui/material\";\nimport { Layout } from \"layout\";\nimport { drawerWidth } from \"layout/sidebar/SideBar\";\nimport { Suspense, useEffect } from \"react\";\nimport { Route, Switch, useLocation } from \"react-router-dom\";\nimport { useNotificationState } from \"state/NotificationState\";\nimport NotFound from \"views/errors/NotFound\";\nimport PrivateRoute from \"./PrivateRoute\";\nimport TeacherRouter from \"./TeacherRouter\";\nimport AdminRouter from \"./AdminRouter\";\nimport SaleManagerRouter from \"./SaleManagerRouter\";\nimport CustomerRouter from \"./CustomerRouter\";\nimport ApproverRouter from \"./ApproverRouter\";\nimport DeliveryManagerRouter from \"./DeliveryManagerRouter\";\n\nconst styles = {\n  loadingProgress: {\n    position: \"fixed\",\n    top: 0,\n    left: -drawerWidth,\n    width: \"calc(100% + 300px)\",\n    zIndex: 1202,\n    \"& div\": {\n      top: \"0.5px\",\n    },\n  },\n};\n\nfunction MainAppRouter(props) {\n  const location = useLocation();\n  const notificationState = useNotificationState();\n\n  useEffect(() => {\n    notificationState.open.set(false);\n  }, [location.pathname]);\n\n  return (\n    <Layout>\n      <Suspense fallback={<LinearProgress sx={styles.loadingProgress} />}>\n        <Switch>\n          <Route component={() => <></>} exact path=\"/\" />\n          <PrivateRoute component={TeacherRouter} path=\"/teacher\" />\n          <PrivateRoute component={AdminRouter} path=\"/admin\" />\n          <PrivateRoute component={SaleManagerRouter} path=\"/sale-manager\" />\n          <PrivateRoute component={CustomerRouter} path=\"/customer\" />\n          <PrivateRoute component={ApproverRouter} path=\"/approver\" />\n          <PrivateRoute component={DeliveryManagerRouter} path=\"/delivery-manager\" />\n          {/* <Route component={error} path=\"*\" /> */}\n          <Route component={NotFound} />\n        </Switch>\n      </Suspense>\n    </Layout>\n  );\n}\n\nexport default MainAppRouter;\n","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/routers/DeliveryManagerRouter.jsx",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/routers/ApproverRouter.jsx",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/routers/CustomerRouter.jsx",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/routers/SaleManagerRouter.jsx",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/routers/AdminRouter.jsx",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/routers/TeacherRouter.jsx",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/routers/PrivateRoute.jsx",["403"],"import { useKeycloak } from \"@react-keycloak/web\";\nimport { useHistory } from \"react-router\";\nimport { Route } from \"react-router-dom\";\n\n/**\n * PrivateRoute component checks if the user is authenticated using\n * Keycloak and renders the component if true, otherwise redirects to the login page.\n * @returns The `PrivateRoute` component is being returned.\n */\nfunction PrivateRoute({ component: Component, ...rest }) {\n  const history = useHistory();\n  const { keycloak } = useKeycloak();\n\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        keycloak.authenticated ? (\n          <Component {...props} />\n        ) : (\n          // (\n          //   <Redirect\n          //     to={{ pathname: \"/\", state: { from: history.location } }}\n          //   />\n          // )\n          keycloak.login()\n        )\n      }\n    />\n  );\n}\n\nexport default PrivateRoute;\n","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/layout/sidebar/SideBar.jsx",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/views/errors/NotFound.jsx",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/layout/index.js",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/shipment/testTable.js",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/receipt/receipRequestForApproval.js",["404","405","406","407","408","409"],"import { Box, Button, Grid, TextField, Typography } from \"@mui/material\";\nimport useStyles from \"screens/styles\";\nimport { useForm } from \"react-hook-form\";\nimport StandardTable from \"components/table/StandardTable\";\nimport { request } from \"api\";\nimport { API_PATH } from \"../apiPaths\";\nimport { convertTimeStampToDate } from \"../utils/utils\";\nimport { errorNoti, successNoti } from \"utils/notification\";\nimport { useHistory } from \"react-router\";\nimport { useRouteMatch } from \"react-router-dom\";\n\nimport { Fragment, useState, useEffect } from \"react\";\n\nconst ReceiptRequestForApproval = ( props ) => {\n\n  const receiptId = props.match?.params?.id;\n  const history = useHistory();\n  const { path } = useRouteMatch();\n  \n  const [receiptInfo, setReceiptInfo] = useState(null);\n  const [productTableData, setProductTableData] = useState([]);\n\n  const classes = useStyles();\n  const { register, errors, handleSubmit, watch, getValues } = useForm();\n\n  const approve = () => {\n    request(\n      \"put\",\n      API_PATH.APPROVE_RECEIPT_REQUEST + \"/\" + receiptId,\n      (res) => {\n        if (res.status == 200) {\n          successNoti(\"Phê duyệt đơn xin nhập hàng thành công\");\n          history.push(`${path.slice(0, path.lastIndexOf(\"/\"))}`);\n        } else {\n          errorNoti(\"Có lỗi xảy ra. Vui lòng thử lại sau.\");\n          history.push(`${path.slice(0, path.lastIndexOf(\"/\"))}`);\n        }\n      }\n    )\n  }\n\n  const cancel = () => {\n    request(\n      \"put\",\n      API_PATH.CANCEL_RECEIPT_REQUEST + \"/\" + receiptId,\n      (res) => {\n        if (res.status == 200) {\n          successNoti(\"Hủy đơn xin nhập hàng thành công\");\n        } else {\n          errorNoti(\"Có lỗi xảy ra. Vui lòng thử lại sau.\");\n        }\n      }\n    )\n  }\n\n  useEffect(() => {\n    async function fetchData () {\n      request(\n        \"get\",\n        API_PATH.SALE_MANAGEMENT_RECEIPT_REQUEST + \"/\" + receiptId,\n        (res) => {\n          setReceiptInfo(res.data);\n          setProductTableData(res.data?.items);\n        }\n      )\n    }\n\n    fetchData();\n  }, []);\n\n  return <Fragment>\n    <Box>\n      <Grid container justifyContent=\"space-between\" className={classes.headerBox}>\n        <Grid>\n          <Typography variant=\"h5\">Phê duyệt đơn xin nhập hàng</Typography>\n        </Grid>\n        <Grid className={classes.buttonWrap}>\n        <Button variant=\"contained\" className={classes.addButton} \n          type=\"submit\" onClick={handleSubmit(approve)} >Phê duyệt</Button>\n        </Grid>\n        <Grid classNam={classes.buttonWrap}>\n          <Button variant=\"contained\" className={classes.addButton} \n            type=\"submit\" onClick={handleSubmit(cancel)}>Hủy</Button>\n        </Grid>\n      </Grid>\n    </Box>\n\n    <Box className={classes.formWrap} component=\"form\">\n      <Box>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <Box className={classes.boxInfor}>\n              <Typography className={classes.inforTitle} variant=\"h6\">\n                Thông tin chung\n              </Typography>\n              <Grid container spacing={3} className={classes.inforWrap}>\n                <Grid item xs={12}>\n                  <Box className={classes.labelInput}>\n                    Người tạo đơn\n                  </Box>\n                  <TextField\n                    fullWidth\n                    variant=\"outlined\"\n                    size=\"small\"\n                    inputRef={register({ required: false })}\n                    name=\"createdBy\"\n                    InputProps={{\n                      readOnly: true,\n                    }}\n                    value={receiptInfo?.createdBy} />\n                </Grid>\n                <Grid item xs={6}>\n                  <Box className={classes.labelInput}>\n                    Ngày tạo đơn nhận hàng\n                  </Box>\n                  <TextField\n                    fullWidth\n                    variant=\"outlined\"\n                    size=\"small\"\n                    inputRef={register({ required: false })}\n                    name=\"createdDate\"\n                    InputProps={{\n                      readOnly: true,\n                    }}\n                    value={convertTimeStampToDate(receiptInfo?.createdDate)} />\n                </Grid>\n                <Grid item xs={6}>\n                  <Box className={classes.labelInput}>\n                    Ngày muốn nhận hàng\n                  </Box>\n                  <TextField\n                    fullWidth\n                    variant=\"outlined\"\n                    size=\"small\"\n                    inputRef={register({ required: false })}\n                    name=\"expectedReceiveDate\"\n                    InputProps={{\n                      readOnly: true,\n                    }}\n                    value={convertTimeStampToDate(receiptInfo?.expectedReceiveDate)} />\n                </Grid>\n                <Grid item xs={12}>\n                  <Box className={classes.labelInput}>\n                    Lý do tạo đơn\n                  </Box>\n                  <TextField \n                    fullWidth\n                    variant=\"outlined\"\n                    size=\"small\"\n                    inputRef={register({ required: false })}\n                    name=\"createdReason\"\n                    multiline\n                    rows={4}\n                    InputProps={{\n                      readOnly: true,\n                    }}\n                    value={receiptInfo?.createdReason}\n                  />\n                </Grid>\n              </Grid>\n            </Box>\n\n            <Box className={classes.boxInfor}>\n              <StandardTable \n                title=\"Danh sách hàng hóa\"\n                columns={[\n                  { title: \"Tên hàng hóa\", field: \"productName\" },\n                  { title: \"Số lượng\", field: \"quantity\" },\n                  { title: \"Kho nhận\", field: \"warehouseName\" }\n                ]}\n                data={productTableData}\n                options={{\n                  selection: false,\n                  pageSize: 5,\n                  search: true,\n                  sorting: true,\n                }}\n                hideCommandBar={true}\n              />\n            </Box>\n          </Grid>\n        </Grid>\n      </Box>\n    </Box>\n  </Fragment>\n}\n\nexport default ReceiptRequestForApproval;","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/ecommerce/cartDetail.js",["410","411","412","413","414","415","416","417"],"import { ORDER_TYPE } from 'components/constants';\nimport MapIcon from '@mui/icons-material/Map';\nimport { Button, Grid, MenuItem, Modal, Select, TextField, Typography } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport useStyles from 'screens/styles';\nimport Maps from 'components/map/maps';\nimport { RequireStar } from 'components/common/requireStar';\nimport SearchBox from 'components/map/searchBox';\nimport { useForm } from \"react-hook-form\";\nimport { request } from 'api';\nimport { API_PATH } from '../apiPaths';\nimport { LOCAL_STORAGE } from 'components/constants';\nimport { errorNoti, successNoti } from 'utils/notification';\nimport { Fragment, useState, useEffect } from 'react';\nimport { useHistory } from 'react-router';\n\nconst ItemDetail = ( { product } ) => {\n  console.log(\"Product => \", product);\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={8}>\n        <img width={\"100%\"} height={\"100%\"} src={\"data:\" + product?.imageContentType + \";base64,\" + product?.imageData} />\n      </Grid>\n      <Grid item xs={4}>\n        <Grid item xs={12}>\n          <Typography variant=\"h6\">{product.name}</Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <Typography variant=\"h6\">{\"Đơn giá: \" + product.priceUnit + \" VNĐ\"}</Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <Typography variant=\"h6\">{\"Số lượng: \" + product.quantity}</Typography>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n\nconst CartDetail = () => {\n  const classes = useStyles();\n  const [isOpenMapModal, setOpenMapModal] = useState(false);\n  const [selectPosition, setSelectPosition] = useState(null);\n  const [cartItems, setCartItems] = useState(null);\n  const [paymentType, setPaymentType] = useState(null);\n\n  const { register, errors, handleSubmit, watch, getValues } = useForm();\n\n  const history = useHistory();\n\n  useEffect(() => {\n    async function fetchData() {\n      const cartRequestBody = {\n        \"items\": JSON.parse(localStorage.getItem(LOCAL_STORAGE.CART_ITEMS)),\n        \"longitude\": selectPosition == null ? null : selectPosition?.lon,\n        \"latitude\": selectPosition == null ? null : selectPosition?.lat\n      };\n\n      request(\n        \"post\",\n        API_PATH.CART,\n        (res) => {\n          setCartItems(res.data);\n          console.log(\"response data => \", res.data);\n        },\n        {\n\n        },\n        cartRequestBody\n      );\n    }\n\n    fetchData();\n  }, []);\n\n  const payOderHandle = (data) => {\n    data.items = cartItems?.items;\n    data.paymentTypeCode = paymentType;\n    data.orderTypeCode = ORDER_TYPE.ONLINE;\n    data.longitude = selectPosition?.lon;\n    data.latitude = selectPosition?.lat;\n    console.log(\"Data in request body => \", data);\n    request(\n      \"post\",\n      API_PATH.CUSTOMER_SALE_ORDER,\n      (res) => {\n        if (res.status == 200) {\n          successNoti(\"Tạo đơn hàng thành công\");\n          // remove cart items in localstorage\n          localStorage.removeItem(LOCAL_STORAGE.CART_ITEMS);\n          history.push(\"/customer/products\")\n        } else {\n          errorNoti(\"Có lỗi xảy ra khi tạo đơn hàng. Vui lòng thử lại sau\");\n        }\n      },\n      {\n        500: () => errorNoti(\"Có lỗi xảy ra khi tạo đơn hàng. Vui lòng thử lại sau\")\n      },\n      data\n    )\n  }\n\n  return (\n    <Fragment>\n      <Modal open={isOpenMapModal}\n        onClose={() => setOpenMapModal(!isOpenMapModal)}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <Box sx={{\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          width: '75%',\n          height: '90%',\n          transform: 'translate(-50%, -50%)',\n          bgcolor: 'background.paper',\n          border: '2px solid #000',\n          boxShadow: 24,\n          p: 4,\n        }}>\n          <Typography variant=\"h5\">\n            Chọn vị trí nhận hàng \n            <Button variant=\"contained\" \n            className={classes.addButton} \n            type=\"submit\" \n            onClick={() => {\n                setOpenMapModal(false);\n                console.log(\"Selected position => \", selectPosition);\n              }} >\n              Lưu\n            </Button>\n          </Typography>\n          \n          <div style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            width: \"100%\",\n            height: \"100%\",\n          }}>\n            <div style={{ width: \"50%\", height: \"90%\", marginRight: 10 }}>\n              <Maps selectPosition={selectPosition} \n                setSelectPosition={setSelectPosition} />\n            </div>\n            <div style={{ width: \"50%\", height: \"90%\" }}>\n              <SearchBox selectPosition={selectPosition} \n                setSelectPosition={setSelectPosition} />\n            </div>\n          </div>\n        </Box>\n      </Modal>\n  \n      <Box>\n        <Grid container justifyContent=\"space-between\" className={classes.headerBox} >\n          <Grid>\n            <Typography variant=\"h5\">\n              {\"Xem thông tin giỏ hàng\"}\n            </Typography>\n          </Grid>\n          <Grid className={classes.buttonWrap}>\n            <Button variant=\"contained\" className={classes.addButton} \n              type=\"submit\" onClick={handleSubmit(payOderHandle)} >Thanh toán</Button>\n          </Grid>\n        </Grid>\n      </Box>\n\n      <Box className={classes.formWrap}>\n        <Grid container spacing={3}>\n          <Grid item xs={6}>\n            {/* Delivery info */}\n            <Box className={classes.boxInfor}>\n              <Typography variant=\"h6\" className={classes.inforTitle}>\n                Thông tin vận chuyển\n              </Typography>\n              {/* TODO: List all previous address info here */}\n              <Grid container spacing={3} className={classes.inforWrap}>\n                <Grid item xs={6}>\n                  <Box className={classes.labelInput}>\n                    Tên <RequireStar />\n                  </Box>\n                  <TextField\n                    fullWidth\n                    variant=\"outlined\"\n                    size=\"small\"\n                    inputRef={register({ required: \"Vui lòng điền tên người nhận hàng\" })}\n                    name=\"customerName\"\n                    error={!!errors.name}\n                  />\n                  {/* TODO: fetch from user_login table */}\n                </Grid>\n\n                <Grid item xs={6}>\n                  <Box className={classes.labelInput}>\n                    Số điện thoại <RequireStar />\n                  </Box>\n                  <TextField\n                    fullWidth\n                    variant=\"outlined\"\n                    size=\"small\"\n                    inputRef={register({ required: \"Vui lòng điền số điện thoại\" })}\n                    name=\"customerPhone\"\n                    error={!!errors.name}\n                  />\n                </Grid>\n\n                <Grid item xs={12}>\n                  <Box className={classes.labelInput}>\n                    Địa chỉ nhận hàng <RequireStar /> \n                    <Button style={{ \"margin-bottom\": 0 }} \n                      onClick={() => setOpenMapModal(!isOpenMapModal)}><MapIcon /></Button>\n                  </Box>\n                  <TextField\n                    fullWidth\n                    variant=\"outlined\"\n                    size=\"small\"\n                    inputRef={register({ required: true })}\n                    name=\"addressName\"\n                    disabled\n                    value={selectPosition?.display_name}\n                  />\n                </Grid>\n\n                <Grid item xs={12}>\n                  <Box className={classes.labelInput}>\n                    Ghi chú thêm\n                  </Box>\n                  <TextField\n                    fullWidth\n                    variant=\"outlined\"\n                    size=\"small\"\n                    inputRef={register({ required: false })}\n                    name=\"description\"\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <Box className={classes.labelInput}>Hình thức thanh toán <RequireStar /></Box>\n                  <Select\n                    label=\"paymentType\"\n                    value={paymentType}\n                    defaultValue={paymentType}\n                    onChange={(e) => setPaymentType(e.target.value)}\n                    fullWidth\n                  >\n                    <MenuItem value={\"0\"} >COD</MenuItem>\n                  </Select>\n                </Grid>\n              </Grid>\n\n              \n            </Box>\n          </Grid>\n          <Grid item xs={6}>\n            {/* Cart item listing */}\n            <Typography variant=\"h6\" className={classes.inforTitle}>\n              Giỏ hàng\n            </Typography>\n            <Grid container spacing={3} className={classes.inforWrap}>\n              {\n                cartItems?.items?.length > 0 &&\n                cartItems?.items.map(item => <ItemDetail product={item} />)\n              }\n            </Grid>\n            <Grid>\n              <Typography variant=\"h6\" className={classes.inforTitle}>\n                {\"Tạm tính: \" + (cartItems?.totalProductCost == undefined ? 0 : cartItems?.totalProductCost)  + \" VNĐ\"}\n              </Typography>\n              <Typography variant=\"h6\" className={classes.inforTitle}>\n                {\"Phí vận chuyển: \" + (cartItems?.deliveryFee == undefined ? 0 : cartItems?.deliveryFee) + \" VNĐ\"}\n              </Typography>\n              <Typography variant=\"h6\" className={classes.inforTitle}>\n                {\"Tổng: \" + (cartItems?.totalOrderCost == undefined ? 0 : cartItems?.totalOrderCost) + \" VNĐ\"}\n              </Typography>\n            </Grid>\n          </Grid>\n\n        </Grid>\n      </Box>\n    </Fragment>\n  )\n}\n\nexport default CartDetail;","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/order/orderApprovalDetail.js",["418","419","420"],"import { Box, Button, Grid, TextField, Typography } from \"@mui/material\";\nimport { request } from \"api\";\nimport StandardTable from \"components/table/StandardTable\";\nimport { Fragment, useEffect, useState } from \"react\";\nimport { API_PATH } from \"screens/apiPaths\";\nimport useStyles from 'screens/styles.js';\nimport { convertTimeStampToDate, convertToVNDFormat } from \"screens/utils/utils\";\nimport { errorNoti, successNoti } from \"utils/notification\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport { useHistory } from \"react-router\";\n\nconst OrderApprovalDetail = ( props ) => {\n  const { path } = useRouteMatch();\n  const history = useHistory();\n  const orderId = props.match?.params?.id;\n  const classes = useStyles();\n  const [orderInfo, setOrderInfo] = useState({});\n\n  useEffect(() => {\n    async function fetchData () {\n      request(\n        \"get\",\n        `${API_PATH.ADMIN_SALE_ORDER}/${orderId}`,\n        (res) => {\n          setOrderInfo(res.data);\n        }\n      )\n    }\n\n    fetchData();\n  }, []);\n\n  const approveOrderButtonHandle = () => {\n    request(\n      \"put\",\n      `${API_PATH.APPROVE_SALE_ORDER}/${orderId}`,\n      (res) => {\n        if (res.status == 200) {\n          successNoti(\"Phê duyệt đơn hàng thành công\");\n          history.push(`${path.substring(0, path.lastIndexOf('/'))}`);\n        }\n      },\n      {\n        500: () => errorNoti(\"Phê duyệt đơn hàng thất bại. Vui lòng thử lại\")\n      }\n    )\n  }\n\n  const cancelOrderButtonHandle = () => {\n    request(\n      \"put\",\n      `${API_PATH.CANCEL_SALE_ORDER}/${orderId}`,\n      (res) => {\n        if (res.status == 200) {\n          successNoti(\"Hủy đơn hàng thành công\");\n          history.push(`${path.substring(0, path.lastIndexOf('/'))}`);\n        }\n      },\n      {\n        500: () => errorNoti(\"Hủy đơn hàng thất bại. Vui lòng thử lại\")\n      }\n    )\n  }\n\n  return <Fragment>\n    <Box>\n      <Grid container justifyContent=\"space-between\" \n        className={classes.headerBox} >\n        <Grid>\n          <Typography variant=\"h5\">\n            Thông tin đơn hàng</Typography>\n        </Grid>\n        <Grid className={classes.buttonWrap}>\n          <Button variant=\"contained\" className={classes.addButton} \n            type=\"submit\" onClick={approveOrderButtonHandle} >Phê duyệt</Button>\n        </Grid>\n        <Grid className={classes.buttonWrap}>\n          <Button variant=\"contained\" className={classes.addButton} \n            type=\"submit\" onClick={cancelOrderButtonHandle} >Hủy đơn hàng</Button>\n        </Grid>\n      </Grid>\n\n      <Box className={classes.bodyBox}>\n        <Box className={classes.formWrap}>\n          <Grid container spacing={2}>\n            <Grid item xs={6}>\n              <Grid container spacing={2}>\n                <Grid item xs={6}>\n                  <Box className={classes.inputWrap}>\n                    <Box className={classes.labelInput}>\n                      Ngày tạo đơn hàng\n                    </Box>\n                    <TextField\n                      fullWidth\n                      variant=\"outlined\"\n                      size=\"small\"\n                      value={convertTimeStampToDate(orderInfo?.createdDate)}\n                      InputProps={{\n                        readOnly: true,\n                      }}\n                    />\n                  </Box>\n                </Grid>\n                <Grid item xs={6}>\n                  <Box className={classes.inputWrap}>\n                    <Box className={classes.labelInput}>\n                      Phương thức thanh toán\n                    </Box>\n                    <TextField\n                      fullWidth\n                      variant=\"outlined\"\n                      size=\"small\"\n                      value={orderInfo?.paymentMethod}\n                      InputProps={{\n                        readOnly: true,\n                      }}\n                    />\n                  </Box>\n                </Grid>\n              </Grid>\n              <Grid item xs={12}>\n                <Box className={classes.inputWrap}>\n                  <Box className={classes.labelInput}>\n                    Địa chỉ nhận hàng\n                  </Box>\n                  <TextField\n                    fullWidth\n                    variant=\"outlined\"\n                    size=\"small\"\n                    value={orderInfo.receiptAddress}\n                    InputProps={{\n                      readOnly: true,\n                    }}\n                  />\n                </Box>\n              </Grid>\n              <Grid container spacing={2}>\n                <Grid item xs={6}>\n                  <Box className={classes.inputWrap}>\n                    <Box className={classes.labelInput}>\n                      Tổng giá trị đơn hàng\n                    </Box>\n                    <TextField\n                      fullWidth\n                      variant=\"outlined\"\n                      size=\"small\"\n                      value={convertToVNDFormat(orderInfo?.totalOrderCost)}\n                      InputProps={{\n                        readOnly: true,\n                      }}\n                    />\n                  </Box>\n                </Grid>\n                <Grid item xs={6}>\n                  <Box className={classes.inputWrap}>\n                    <Box className={classes.labelInput}>\n                      Trạng thái\n                    </Box>\n                    <TextField\n                      fullWidth\n                      variant=\"outlined\"\n                      size=\"small\"\n                      value={orderInfo?.status}\n                      InputProps={{\n                        readOnly: true,\n                      }}\n                    />\n                  </Box>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item xs={6}>\n              <Grid item xs={12}>\n                <Box className={classes.inputWrap}>\n                  <Box className={classes.labelInput}>\n                    Tài khoản mua hàng\n                  </Box>\n                  <TextField\n                    fullWidth\n                    variant=\"outlined\"\n                    size=\"small\"\n                    value={orderInfo?.userLoginId}\n                    InputProps={{\n                      readOnly: true,\n                    }}\n                  />\n                </Box>\n              </Grid>\n\n              <Grid container spacing={2}>\n                <Grid item xs={6}>\n                  <Box className={classes.inputWrap}>\n                    <Box className={classes.labelInput}>\n                      Số lượng đơn hàng giao thành công\n                    </Box>\n                    <TextField\n                      fullWidth\n                      variant=\"outlined\"\n                      size=\"small\"\n                      value={orderInfo?.totalSuccessOrderCount}\n                      InputProps={{\n                        readOnly: true,\n                      }}\n                    />\n                  </Box>\n                </Grid>\n                <Grid item xs={6}>\n                  <Box className={classes.inputWrap}>\n                    <Box className={classes.labelInput}>\n                      Tổng giá trị đơn hàng giao thành công\n                    </Box>\n                    <TextField\n                      fullWidth\n                      variant=\"outlined\"\n                      size=\"small\"\n                      value={convertToVNDFormat(orderInfo?.totalSuccessOrderCost)}\n                      InputProps={{\n                        readOnly: true,\n                      }}\n                    />\n                  </Box>\n                </Grid>\n              </Grid>\n\n              <Grid container spacing={2}>\n                <Grid item xs={6}>\n                  <Box className={classes.inputWrap}>\n                    <Box className={classes.labelInput}>\n                      Tổng số lượng đơn hàng giao thất bại\n                    </Box>\n                    <TextField\n                      fullWidth\n                      variant=\"outlined\"\n                      size=\"small\"\n                      value={orderInfo?.totalCancelledOrderCount}\n                      InputProps={{\n                        readOnly: true,\n                      }}\n                    />\n                  </Box>\n                </Grid>\n                <Grid item xs={6}>\n                  <Box className={classes.inputWrap}>\n                    <Box className={classes.labelInput}>\n                      Tổng giá trị đơn hàng giao thất bại\n                    </Box>\n                    <TextField\n                      fullWidth\n                      variant=\"outlined\"\n                      size=\"small\"\n                      value={convertToVNDFormat(orderInfo?.totalCancelledOrderCost)}\n                      InputProps={{\n                        readOnly: true,\n                      }}\n                    />\n                  </Box>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Box>\n      </Box>\n\n      <StandardTable\n        title=\"Danh sách sản phẩm\"\n        hideCommandBar={true}\n        options={{\n          selection: false,\n          pageSize: 5,\n          search: true,\n          sorting: true,\n        }}\n        data={orderInfo?.items}\n        columns={[\n          { title: \"Tên sản phẩm\", field: \"productName\" },\n          { title: \"Số lượng\", field: \"quantity\" },\n          { title: \"Đơn giá\", field: \"priceUnit\" }\n        ]}\n      />\n    </Box>\n  </Fragment>\n}\n\nexport default OrderApprovalDetail;","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/order/adminOrderDetail.js",["421","422","423","424","425","426","427","428","429","430","431","432","433","434","435"],"import LoadingScreen from \"components/common/loading/loading\";\nimport { Box, Button, Grid, TextField, Typography } from \"@mui/material\";\nimport { request } from \"api\";\nimport { BayDropDown, ProductDropDown, WarehouseDropDown } from \"components/table/DropDown\";\nimport StandardTable from \"components/table/StandardTable\";\nimport React, { Fragment, useEffect, useRef, useState } from \"react\"\nimport { API_PATH } from \"screens/apiPaths\";\nimport useStyles from 'screens/styles';\nimport { convertTimeStampToDate, convertToVNDFormat } from \"screens/utils/utils\";\nimport { errorNoti, successNoti } from \"utils/notification\";\n\nconst AdminOrderDetail = ( props ) => {\n  const orderId = props.match?.params?.id;\n  const classes = useStyles();\n\n  const [loading, setLoading] = useState(false);\n  const [orderInfo, setOrderInfo] = useState({});\n  const [processingItems, setProcessingItems] = useState([]);\n  const [processedItems, setProcessedItems] = useState([]);\n  const [remainingItems, setRemainingItems] = useState([]);\n\n  const [selectedProductId, setSelectedProductId] = useState(null);\n  const [selectedProductName, setSelectedProductName] = useState(null);\n\n  const [selectedBayId, setSelectedBayId] = useState(null);\n  const [selectedBayCode, setSelectedBayCode] = useState(null);\n\n  const [selectedQuantity, setSelectedQuantity] = useState(null);\n\n  const [allWarehouses, setAllWarehouses] = useState([]);\n  const [warehouseList, setWarehouseList] = useState([]);\n  const [selectedWarehouseId, setSelectedWarehouseId] = useState(null);\n  const [selectedWarehouseName, setSelectedWarehouseName] = useState(null);\n  const [selectedWarehouse, setSelectedWarehouse] = useState(null);\n  const [maxQuantity, setMaxQuantity] = useState(0);\n\n  const getProductOrderQuantity = ( productId ) => {\n    for (var i = 0; i < orderInfo?.items?.length; i++) {\n      if (orderInfo?.items[i]?.productId == productId) {\n        return orderInfo?.items[i]?.quantity;\n      }\n    }\n    return Number.MAX_SAFE_INTEGER;\n  }\n\n  useEffect(() => {\n    async function fetchData () {\n      request(\n        \"get\",\n        `${API_PATH.ADMIN_SALE_ORDER}/${orderId}`,\n        (res) => {\n          setOrderInfo(res.data);\n          setRemainingItems(res.data.remainingItems)\n        }\n      );\n\n      request(\n        \"get\",\n        API_PATH.WAREHOUSE_DETAIL_WITH_PRODUCT,\n        (res) => {\n          setAllWarehouses(res.data);\n        }\n      )\n    }\n\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    if (selectedProductId == null) {\n      setWarehouseList(allWarehouses);\n      return;\n    }\n\n    // Tìm tất cả warehouse có selectedProductId trong kho\n    const newWarehouseList = [];\n    for (var i = 0; i < allWarehouses.length; i++) {\n      const warehouseDetail = allWarehouses[i];\n      var itemCount = 0;\n      for (var j = 0; j < warehouseDetail.items?.length; j++) {\n        if (warehouseDetail.items[j]?.productId == selectedProductId) {\n          itemCount += warehouseDetail.items[j]?.quantity;\n        }\n      }\n      if (itemCount > 0) {\n        newWarehouseList.push(warehouseDetail.info);\n      }\n    }\n    setWarehouseList(newWarehouseList);\n  }, [selectedProductId]);\n\n  useEffect(() => {\n    for (var i = 0; i < warehouseList.length; i++) {\n      if (warehouseList[i]?.id == selectedWarehouseId) {\n        setSelectedWarehouse(warehouseList[i]);\n        return;\n      }\n    }\n  }, [selectedWarehouseId]);\n\n  useEffect(() => {\n    if (selectedProductId != null && selectedBayId != null) {\n      var totalProductOnBay = 0;\n      for (var i = 0; i < allWarehouses.length; i++) {\n        for (var j = 0; j < allWarehouses[i]?.items?.length; j++) {\n          const item = allWarehouses[i]?.items[j];\n          if (item?.productId == selectedProductId && item?.bayId == selectedBayId) {\n            totalProductOnBay += item?.quantity;\n          }\n        }\n      }\n      setMaxQuantity(Math.min(totalProductOnBay, getProductOrderQuantity(selectedProductId)));\n    }\n  }, [selectedBayId]);\n\n  const saveProcessingItems = () => {\n    request(\n      \"put\",\n      API_PATH.ASSIGN_ORDER_ITEM,\n      (res) => {\n        if (res.status == 200) {\n          successNoti(\"Phân phối hàng hóa thành công\");\n          window.location.reload();\n        }\n      },\n      {\n        500: () => errorNoti(\"Có lỗi xảy ra. Vui lòng thử lại sau\")\n      },\n      {\n        orderId: orderId,\n        items: processingItems\n      }\n    )\n  }\n\n  const autoAssignButtonHandle = () => {\n    setLoading(true);\n    request(\n      \"put\",\n      `${API_PATH.AUTO_ASSIGN_ORDER_ITEM}/${orderId}`,\n      (res) => {\n        const data = res.data;\n        setProcessingItems(data.processingItems);\n        setRemainingItems(data.remainingItems);\n        setLoading(false);\n      }\n    )\n  }\n  \n  return (\n    loading ? <LoadingScreen /> :\n    <Fragment>\n    <Box>\n    <Grid container justifyContent=\"space-between\" \n        className={classes.headerBox} >\n        <Grid>\n          <Typography variant=\"h5\">\n            Thông tin đơn hàng</Typography>\n        </Grid>\n        <Grid className={classes.buttonWrap}>\n          <Button variant=\"contained\" className={classes.addButton} \n            type=\"submit\" onClick={saveProcessingItems} >Lưu</Button>\n        </Grid>\n        <Grid className={classes.buttonWrap}>\n          <Button variant=\"contained\" className={classes.addButton} \n            type=\"submit\" onClick={autoAssignButtonHandle} >Phân phối tự động</Button>\n        </Grid>\n        <Grid className={classes.buttonWrap}>\n          <Button variant=\"contained\" className={classes.addButton} \n            type=\"submit\" >Hủy đơn hàng</Button>\n        </Grid>\n      </Grid>\n    </Box>\n\n    <Box className={classes.bodyBox}>\n      <Box className={classes.formWrap}>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Grid container spacing={3}>\n              <Grid item xs={6}>\n                <Box className={classes.inputWrap}>\n                  <Box className={classes.labelInput}>\n                    Ngày tạo đơn hàng\n                  </Box>\n                  <TextField\n                    fullWidth\n                    variant=\"outlined\"\n                    size=\"small\"\n                    value={convertTimeStampToDate(orderInfo?.createdDate)}\n                    InputProps={{\n                      readOnly: true,\n                    }}\n                  />\n                </Box>\n              </Grid>\n\n              <Grid item xs={6}>\n                <Box className={classes.inputWrap}>\n                  <Box className={classes.labelInput}>\n                    Phương thức thanh toán\n                  </Box>\n                  <TextField\n                    fullWidth\n                    variant=\"outlined\"\n                    size=\"small\"\n                    value={orderInfo?.paymentMethod}\n                    InputProps={{\n                      readOnly: true,\n                    }}\n                  />\n                </Box>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item xs={12}>\n            <Grid container spacing={3}>\n              <Grid item xs={6}>\n                <Box className={classes.inputWrap}>\n                  <Box className={classes.labelInput}>\n                    Tổng giá trị đơn hàng\n                  </Box>\n                  <TextField\n                    fullWidth\n                    variant=\"outlined\"\n                    size=\"small\"\n                    value={convertToVNDFormat(orderInfo?.totalOrderCost)}\n                    InputProps={{\n                      readOnly: true,\n                    }}\n                  />\n                </Box>\n              </Grid>\n              <Grid item xs={6}>\n                <Box className={classes.inputWrap}>\n                  <Box className={classes.labelInput}>\n                    Trạng thái\n                  </Box>\n                  <TextField\n                    fullWidth\n                    variant=\"outlined\"\n                    size=\"small\"\n                    value={orderInfo?.status}\n                    InputProps={{\n                      readOnly: true,\n                    }}\n                  />\n                </Box>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item xs={12}>\n            <Grid container spacing={3}>\n              <Grid item xs={6}>\n                <Box className={classes.inputWrap}>\n                  <Box className={classes.labelInput}>\n                    Tài khoản mua hàng\n                  </Box>\n                  <TextField\n                    fullWidth\n                    variant=\"outlined\"\n                    size=\"small\"\n                    value={orderInfo?.userLoginId}\n                    InputProps={{\n                      readOnly: true,\n                    }}\n                  />\n                </Box>\n              </Grid>\n\n              <Grid item xs={6}>\n              <Box className={classes.inputWrap}>\n                  <Box className={classes.labelInput}>\n                    Tên người nhận hàng\n                  </Box>\n                  <TextField\n                    fullWidth\n                    variant=\"outlined\"\n                    size=\"small\"\n                    value={orderInfo?.customerName}\n                    InputProps={{\n                      readOnly: true,\n                    }}\n                  />\n                </Box>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item xs={12}>\n            <Box className={classes.inputWrap}>\n              <Box className={classes.labelInput}>\n                Địa chỉ nhận hàng\n              </Box>\n              <TextField\n                fullWidth\n                variant=\"outlined\"\n                size=\"small\"\n                value={orderInfo.receiptAddress}\n                InputProps={{\n                  readOnly: true,\n                }}\n              />\n            </Box>\n          </Grid>\n\n        </Grid>\n      </Box>\n\n      <StandardTable\n        title=\"Danh sách sản phẩm cần phân phối giao hàng\"\n        hideCommandBar={true}\n        columns={[\n          { title: \"Tên sản phẩm\", field: \"productName\" },\n          { title: \"Số lượng\", field: \"quantity\" }\n        ]}\n        data={remainingItems}\n        options={{\n          selection: false,\n          pageSize: 5,\n          search: true,\n          sorting: true,\n        }}\n      />\n\n      <StandardTable\n        title=\"Danh sách sản phẩm đang xử lý\"\n        hideCommandBar={true}\n        columns={[\n          { title: \"Tên sản phẩm\", field: \"productName\",\n            editComponent: props => <ProductDropDown \n              productList={orderInfo?.items} \n              setSelectedProductId={setSelectedProductId}\n              setSelectedProductName={setSelectedProductName} /> },\n          { title: \"Kho\", field: \"warehouseName\",\n            editComponent: props => <WarehouseDropDown\n              warehouseList={warehouseList}\n              setSelectedWarehouseId={setSelectedWarehouseId}\n              setSelectedWarehouseName={setSelectedWarehouseName} />},\n          { title: \"Vị trí kệ hàng\", field: \"bayCode\",\n            editComponent: props => <BayDropDown\n              selectedWarehouse={selectedWarehouse} \n              setSelectedBayId={setSelectedBayId}\n              setSelectedBayCode={setSelectedBayCode} /> },\n          { title: \"Số lượng\", field: \"quantity\", \n            editComponent: props => <TextField\n              type=\"number\"\n              InputProps={{\n                inputProps: { \n                    max: maxQuantity, min: 0 \n                }\n              }}\n              value={selectedQuantity}\n              onChange={(e) => setSelectedQuantity(e.target.value)}\n               /> },\n        ]}\n        data={processingItems}\n        options={{\n          selection: false,\n          pageSize: 5,\n          search: true,\n          sorting: true,\n        }}\n        editable={{\n          onRowAdd: newData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              const adder = {\n                productId: selectedProductId,\n                productName: selectedProductName,\n                warehouseId: selectedWarehouseId,\n                warehouseName: selectedWarehouseName,\n                bayId: selectedBayId,\n                bayCode: selectedBayCode,\n                quantity: selectedQuantity\n              };\n              setProcessingItems([...processingItems, adder]);\n\n              // update số lượng sản phẩm cần phân phối\n              var newOrderInfo = {...orderInfo};\n              for (var i = 0; i < newOrderInfo?.remainingItems?.length; i++) {\n                if (newOrderInfo?.remainingItems[i]?.productId == selectedProductId) {\n                  const newQuantity = newOrderInfo?.remainingItems[i]?.quantity - selectedQuantity;\n                  newOrderInfo.remainingItems[i].quantity = newQuantity;\n                  if (newQuantity == 0) {\n                    newOrderInfo.remainingItems.splice(i, 1);\n                  }\n                  break;\n                }\n              }\n              setOrderInfo(newOrderInfo);\n              setRemainingItems(newOrderInfo.remainingItems);\n              setSelectedQuantity(0);\n              resolve();\n            })\n          }),\n          onRowDelete: oldData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              console.log(\"Old data => \", oldData);\n              // TODO: on row delete implementation....\n            })\n          })\n        }}\n      />\n\n      <StandardTable\n        title=\"Danh sách sản phẩm đã phân phối\"\n        hideCommandBar={true}\n        columns={[\n          { title: \"Tên sản phẩm\", field: \"productName\" },\n          { title: \"Số lượng\", field: \"quantity\" },\n          { title: \"Kho\", field: \"warehouseName\" },\n          { title: \"Vị trí kệ hàng\", field: \"bayCode\" },\n          { title: \"Trạng thái\", field: \"status\"},\n          { title: \"Số lô\", field: \"lotId\" },\n          { title: \"Ngày phân phối\", field: \"createdDate\"}\n        ]}\n        data={orderInfo?.processedItems}\n        options={{\n          selection: false,\n          pageSize: 5,\n          search: true,\n          sorting: true,\n        }}\n      />\n    </Box>\n  </Fragment>)\n};\n\nexport default AdminOrderDetail;","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/order/orderListing.js",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/components/ProtectedScreen.jsx",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/layout/sidebar/MenuItem.jsx",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/layout/sidebar/GroupMenuItem.jsx",["436"],"import { Downgraded } from \"@hookstate/core\";\nimport ArrowDropDownIcon from \"@mui/icons-material/ArrowDropDown\";\nimport { Collapse, Icon, List, ListItem, ListItemText } from \"@mui/material\";\nimport { whiteColor } from \"assets/jss/material-dashboard-react\";\nimport { menuIconMap } from \"config/menuconfig\";\nimport { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { useMenuState } from \"state/MenuState\";\nimport MenuItem, { hexToRgb } from \"./MenuItem\";\n\nexport const menuItemBaseStyle = (theme) => ({\n  whiteFont: {\n    color: \"#FFF\",\n  },\n  menuItem: {\n    margin: \"10px 15px 0 12px\",\n    padding: \"10px\",\n    width: \"auto\",\n    minWidth: 50,\n    transition: \"all 300ms linear\",\n    borderRadius: \"3px\",\n    position: \"relative\",\n    backgroundColor: \"transparent\",\n    // lineHeight: \"1.5em\",\n  },\n  menuItemIcon: {\n    width: \"24px\",\n    height: \"30px\",\n    fontSize: \"24px\",\n    lineHeight: \"30px\",\n    float: \"left\",\n    marginRight: \"15px\",\n    textAlign: \"center\",\n    // verticalAlign: \"middle\",\n    display: \"flex\",\n    alignItems: \"center\",\n    color: \"rgba(\" + hexToRgb(whiteColor) + \", 0.8)\",\n  },\n  menuItemText: {\n    fontWeight: theme.typography.fontWeightMedium,\n    margin: \"0\",\n    lineHeight: \"30px\",\n    fontSize: \"14px\",\n  },\n});\n\nconst styles = {\n  childSelected: {\n    \"&.MuiListItem-button\": {\n      backgroundColor: \"rgba(200, 200, 200, 0.2)\",\n    },\n  },\n  iconExpand: { transform: \"rotate(-180deg)\", transition: \"0.3s\" },\n  iconCollapse: { transition: \"0.3s\" },\n  whiteFont: (theme) => ({\n    ...menuItemBaseStyle(theme).whiteFont,\n  }),\n  menuItemIcon: (theme) => ({\n    ...menuItemBaseStyle(theme).menuItemIcon,\n  }),\n  menuItemText: (theme) => ({\n    ...menuItemBaseStyle(theme).menuItemText,\n  }),\n  menuItem: (theme) => ({\n    ...menuItemBaseStyle(theme).menuItem,\n    color: whiteColor,\n\n    \"&.MuiListItem-button:hover\": {\n      backgroundColor: \"rgba(200, 200, 200, 0.2)\",\n    },\n  }),\n};\n\nconst activeRoute = (route) => {\n  if (route === \"/\" || route === \"\") {\n    // access http://localhost:3000/ or http://localhost:3000, location is always http://localhost:3000/\n    return window.location.pathname === `/`;\n  } else return window.location.pathname.indexOf(route) === 0;\n};\n\n/**\n * This function finds the first element in a set that starts with a given string.\n * @returns The `findFirstElementStartingWith` function is returning the first element in the `set`\n * parameter that starts with the `str` parameter. It is using the `find` method to iterate over the\n * `set` and return the first element that satisfies the condition of starting with the `str`. The\n * returned value is the first matching element or `undefined` if no element matches the condition.\n */\nconst findFirstElementStartingWith = (str, set) => {\n  return [...set].find((element) => element.startsWith(str));\n};\n\nfunction GroupMenuItem(props) {\n  const { color, group } = props;\n  const location = useLocation();\n\n  //\n  const menuState = useMenuState();\n  const permittedFunctions = menuState.permittedFunctions\n    .attach(Downgraded)\n    .get();\n\n  //\n  const [expanded, setExpanded] = useState(false);\n  const [hasChildSelected, setHasChildSelected] = useState(false);\n  const [selected, setSelected] = useState(\n    group.child.map((menuItem) => activeRoute(menuItem.path))\n  );\n\n  //\n  const checkSelected = () => {\n    setHasChildSelected(false);\n    setSelected(\n      group.child.map((menuItem) => {\n        const selected = activeRoute(menuItem.path);\n\n        if (selected) setHasChildSelected(true);\n        return selected;\n      })\n    );\n  };\n\n  useEffect(() => {\n    checkSelected();\n  }, [location.pathname]);\n\n  if (group.child) {\n    let hasPublicChild = group.child.find(\n      (childMenuItem) => childMenuItem.isPublic\n    );\n\n    if (!hasPublicChild) {\n      let hasAuthorizedPrivateChild = findFirstElementStartingWith(\n        group.id,\n        permittedFunctions\n      );\n      if (!hasAuthorizedPrivateChild) {\n        return null;\n      }\n    }\n  }\n\n  if (group.child.length === 1) {\n    const childMenuItem = group.child[0];\n\n    if (!childMenuItem.icon) {\n      childMenuItem.icon = group.icon;\n    }\n\n    return (\n      <MenuItem\n        key={childMenuItem.text}\n        menuItem={childMenuItem}\n        color={color}\n        selected={selected[0]}\n        menu={permittedFunctions}\n        icon\n      />\n    );\n  } else\n    return (\n      <li>\n        <ListItem\n          button\n          key={group.text}\n          sx={(theme) => ({\n            ...styles.menuItem(theme),\n            ...(hasChildSelected ? styles.childSelected : {}),\n          })}\n          onClick={() => setExpanded(!expanded)}\n        >\n          {/* Icon */}\n          <Icon\n            sx={(theme) => ({\n              ...styles.menuItemIcon(theme),\n              ...styles.whiteFont(theme),\n            })}\n            style={{\n              marginLeft: 3,\n              marginRight: 27,\n            }}\n          >\n            {menuIconMap.get(group.icon)}\n          </Icon>\n\n          {/* Label */}\n          <ListItemText\n            primary={group.text}\n            sx={(theme) => ({\n              ...styles.menuItemText(theme),\n              ...styles.whiteFont(theme),\n\n              // limited lines text\n              whiteSpace: \"nowrap\",\n              overflow: \"hidden\",\n              textOverflow: \"ellipsis\",\n            })}\n            disableTypography={true}\n          />\n\n          <Icon\n            sx={(theme) => ({\n              ...styles.menuItemIcon(theme),\n              ...styles.whiteFont(theme),\n              ...(expanded ? styles.iconExpand : styles.iconCollapse),\n            })}\n            style={{\n              marginRight: 0,\n              marginLeft: 6,\n            }}\n          >\n            <ArrowDropDownIcon />\n          </Icon>\n        </ListItem>\n        <Collapse in={expanded} timeout=\"auto\">\n          <List disablePadding>\n            {group.child.map((childMenuItem, index) => (\n              <MenuItem\n                key={childMenuItem.text}\n                menuItem={childMenuItem}\n                color={color}\n                selected={selected[index]}\n                menu={permittedFunctions}\n              />\n            ))}\n          </List>\n        </Collapse>\n      </li>\n    );\n}\n\nexport default GroupMenuItem;\n","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/layout/Layout.jsx",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/apiPaths.js",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/config/menuconfig.js",["437","438"],"import AirportShuttleIcon from \"@mui/icons-material/AirportShuttle\";\nimport ApartmentSharpIcon from \"@mui/icons-material/ApartmentSharp\";\nimport AssignmentOutlinedIcon from \"@mui/icons-material/AssignmentOutlined\";\nimport AttachMoneySharpIcon from \"@mui/icons-material/AttachMoneySharp\";\nimport BlurOnIcon from \"@mui/icons-material/BlurOn\";\nimport DashboardRoundedIcon from \"@mui/icons-material/DashboardRounded\";\nimport DescriptionIcon from \"@mui/icons-material/Description\";\nimport DescriptionOutlinedIcon from \"@mui/icons-material/DescriptionOutlined\";\nimport EventNoteIcon from \"@mui/icons-material/EventNote\";\nimport FastfoodIcon from \"@mui/icons-material/Fastfood\";\nimport FormatListNumberedIcon from \"@mui/icons-material/FormatListNumbered\";\nimport HomeSharpIcon from \"@mui/icons-material/HomeSharp\";\nimport LocalGroceryStoreIcon from \"@mui/icons-material/LocalGroceryStore\";\nimport LocalLibraryIcon from \"@mui/icons-material/LocalLibrary\";\nimport ManageAccountsIcon from \"@mui/icons-material/ManageAccounts\";\nimport InboxIcon from \"@mui/icons-material/MoveToInbox\";\nimport PeopleIcon from \"@mui/icons-material/People\";\nimport PeopleOutlineIcon from \"@mui/icons-material/PeopleOutline\";\nimport PersonIcon from \"@mui/icons-material/Person\";\nimport StarBorder from \"@mui/icons-material/StarBorder\";\nimport StoreMallDirectorySharpIcon from \"@mui/icons-material/StoreMallDirectorySharp\";\nimport TeachingIcon from \"assets/icons/mathematics.svg\";\nimport { CiEdit } from \"react-icons/ci\";\nimport { GiTeacher } from \"react-icons/gi\";\nimport { buildMapPathMenu } from \"utils/MenuUtils\";\nimport { general } from \"./menuconfig/general\";\nimport { student } from \"./menuconfig/student\";\nimport { teacher } from \"./menuconfig/teacher\";\nimport { user } from \"./menuconfig/user\";\nimport { admin } from \"./menuconfig/admin\";\nimport { salemanager } from \"./menuconfig/salemanager\";\nimport { customer } from \"./menuconfig/customer\";\nimport { approver } from \"./menuconfig/approver\";\nimport { deliverymanager } from \"./menuconfig/deliverymanager\";\n\nexport const MENUS = [];\n\nMENUS.push(general);\nMENUS.push(user);\n// MENUS.push(teacher);\n// MENUS.push(student);\nMENUS.push(admin);\nMENUS.push(salemanager);\nMENUS.push(customer);\nMENUS.push(approver);\nMENUS.push(deliverymanager);\n\nexport const menuIconMap = new Map();\n\nmenuIconMap.set(\n  \"Schedule\",\n  <EventNoteIcon />\n  //   <img alt=\"Task Schedule icon\" src={TaskScheduleIcon} height={24} width={24} />\n);\nmenuIconMap.set(\n  \"Teaching\",\n  <img alt=\"Teaching icon\" src={TeachingIcon} height={24} width={24} />\n);\nmenuIconMap.set(\"DashboardIcon\", <DashboardRoundedIcon />);\nmenuIconMap.set(\"GiTeacher\", <GiTeacher size={24} />);\nmenuIconMap.set(\"InboxIcon\", <InboxIcon />);\nmenuIconMap.set(\"StarBorder\", <StarBorder />);\nmenuIconMap.set(\"PeopleIcon\", <PeopleIcon />);\nmenuIconMap.set(\"AirportShuttleIcon\", <AirportShuttleIcon />);\nmenuIconMap.set(\"PeopleOutlineIcon\", <PeopleOutlineIcon />);\nmenuIconMap.set(\"PersonIcon\", <PersonIcon />);\nmenuIconMap.set(\"FormatListNumberedIcon\", <FormatListNumberedIcon />);\nmenuIconMap.set(\"DescriptionIcon\", <DescriptionIcon />);\nmenuIconMap.set(\"DescriptionOutlinedIcon\", <DescriptionOutlinedIcon />);\nmenuIconMap.set(\"ApartmentSharpIcon\", <ApartmentSharpIcon />);\nmenuIconMap.set(\"AttachMoneySharpIcon\", <AttachMoneySharpIcon />);\nmenuIconMap.set(\"StoreMallDirectorySharpIcon\", <StoreMallDirectorySharpIcon />);\nmenuIconMap.set(\"HomeSharpIcon\", <HomeSharpIcon />);\nmenuIconMap.set(\"FastfoodIcon\", <FastfoodIcon />);\nmenuIconMap.set(\"LocalGroceryStoreIcon\", <LocalGroceryStoreIcon />);\nmenuIconMap.set(\"BlurOnIcon\", <BlurOnIcon />);\nmenuIconMap.set(\"LocalLibraryIcon\", <LocalLibraryIcon />);\nmenuIconMap.set(\"AssignmentOutlinedIcon\", <AssignmentOutlinedIcon />);\nmenuIconMap.set(\"ManageAccountsIcon\", <ManageAccountsIcon />);\nmenuIconMap.set(\"CiEdit\", <CiEdit />);\n\nexport const mapPathMenu = buildMapPathMenu(MENUS);\n","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/components/common/withScreenSecurity.js",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/utils/utils.js",["439","440","441","442","443"],"const getWarehouseNameByWarehouseId = (id, warehouseGeneralList) => {\n  for (var i = 0; i < warehouseGeneralList.length; i++) {\n    if (warehouseGeneralList[i].warehouseId == id) {\n      return warehouseGeneralList[i].name;\n    }\n  };\n}\n\nconst getProductNameFromProductId = (id, productList) => {\n  for (var i = 0; i < productList.length; i++) {\n    if (productList[i].productId == id) {\n      return productList[i].name;\n    }\n  }\n}\n\nconst convertTimeStampToDate = ( time ) => {\n  if (time == null) {\n    return \"\";\n  }\n  const date = new Date(time.slice(0, time.indexOf(\"T\")));\n  return date.getDate() + \"-\" + date.getMonth() + \"-\" + date.getFullYear();\n}\n\nconst getCurrentDateInString = () => {\n  const now = new Date();\n  return `${now.getDate()}-${now.getMonth() + 1}-${now.getFullYear()} ${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}`;\n}\n\nconst convertDateToRequestFormat = ( date ) => {\n  return `${date.getFullYear()}`\n}\n\nconst parseJwt = (token) => {\n  if (!token) {\n    return; \n  }\n  const base64Url = token.split('.')[1];\n  const base64 = base64Url.replace('-', '+').replace('_', '/');\n  return JSON.parse(window.atob(base64));\n}\n\nexport function setCanvasSize(size, scale) {\n  return (size * scale);\n}\n\nconst convertToVNDFormat = ( valueInt ) => {\n  // const formatter = new Intl.NumberFormat('vn-VN', {\n  //   style: 'currency',\n  //   currency: 'VND',\n  // });\n  // return formatter.format(valueInt).substring(1);\n  var result;\n  try {\n    return result = valueInt.toLocaleString('it-IT', {style : 'currency', currency : 'VND'})\n  } catch (e) {\n    console.log(\"Exception in convert to vnd format: \", e);\n  }\n  return '0';\n}\n\n\nexport { getCurrentDateInString,\n  convertToVNDFormat, \n  getWarehouseNameByWarehouseId, \n  getProductNameFromProductId, \n  convertTimeStampToDate };","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/styles.js",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/components/button/PrimaryButton.jsx",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/layout/sidebar/ListItemLink.jsx",["444"],"import { ListItem } from \"@mui/material\";\nimport _ from \"lodash\";\n// import PropTypes from \"prop-types\";\nimport { forwardRef, useMemo } from \"react\";\nimport { Link as RouterLink, useLocation } from \"react-router-dom\";\n\nexport default function ListItemLink({ sx, to, children, ...props }) {\n  const { pathname } = useLocation();\n\n  const renderLink = useMemo(\n    () =>\n      forwardRef((linkProps, ref) => (\n        <RouterLink\n          ref={ref}\n          to={to}\n          replace={to === pathname}\n          {...linkProps}\n        />\n      )),\n    [to]\n  );\n\n  return _.isString(to) ? (\n    <li>\n      <ListItem sx={sx} component={renderLink} {...props}>\n        {children}\n      </ListItem>\n    </li>\n  ) : (\n    <ListItem sx={sx} {...props}>\n      {children}\n    </ListItem>\n  );\n}\n\n// ListItemLink.propTypes = {\n//   to: PropTypes.string.isRequired,\n// };\n","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/components/constants.js",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/components/common/requireStar.js",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/components/common/loading/loading.js",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/components/map/searchBox.js",["445"],"import React, { useState } from \"react\";\nimport { OutlinedInput } from \"@mui/material\";\nimport {Button} from \"@mui/material\";\nimport {List} from \"@mui/material\";\nimport {ListItem} from \"@mui/material\";\nimport {ListItemIcon} from \"@mui/material\";\nimport {ListItemText} from \"@mui/material\";\nimport { Divider } from \"@mui/material\";\nimport { PLACE_HOLDER_ICON_URL } from \"components/constants\";\n\nconst NOMINATIM_BASE_URL = \"https://nominatim.openstreetmap.org/search?\";\n\nexport default function SearchBox(props) {\n  const { selectPosition, setSelectPosition } = props;\n  const [searchText, setSearchText] = useState(\"\");\n  const [listPlace, setListPlace] = useState([]);\n\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", width: '100%', height: '100%' }}>\n      <div style={{ display: \"flex\" }}>\n        <div style={{ flex: 1 }}>\n          <OutlinedInput\n            style={{ width: \"100%\" }}\n            value={searchText}\n            onChange={(event) => {\n              setSearchText(event.target.value);\n            }}\n          />\n        </div>\n        <div\n          style={{ display: \"flex\", alignItems: \"center\", padding: \"0px 20px\" }}\n        >\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => {\n              // Search\n              const params = {\n                q: searchText,\n                format: \"json\",\n                addressdetails: 1,\n                polygon_geojson: 0,\n              };\n              const queryString = new URLSearchParams(params).toString();\n              const requestOptions = {\n                method: \"GET\",\n                redirect: \"follow\",\n              };\n              fetch(`${NOMINATIM_BASE_URL}${queryString}`, requestOptions)\n                .then((response) => response.text())\n                .then((result) => {\n                  setListPlace(JSON.parse(result));\n                })\n                .catch((err) => console.log(\"err: \", err));\n            }}\n          >\n            Tìm kiếm\n          </Button>\n        </div>\n      </div>\n      <div style={{ height: '85%' }}>\n          <List component=\"nav\" aria-label=\"main mailbox folders\" style={{maxHeight: '100%', overflow: 'auto'}}>\n            {listPlace.map((item) => {\n              return (\n                <div key={item?.place_id}>\n                  <ListItem\n                    button\n                    onClick={() => {\n                      console.log(\"List element clicked: \", item);\n                      setSelectPosition(item);\n                    }}\n                  >\n                    <ListItemIcon>\n                      <img\n                        src={ PLACE_HOLDER_ICON_URL }\n                        alt=\"Placeholder\"\n                        style={{ width: 38, height: 38 }}\n                      />\n                    </ListItemIcon>\n                    <ListItemText primary={item?.display_name} />\n                  </ListItem>\n                  <Divider />\n                </div>\n              );\n            })}\n          </List>\n      </div>\n    </div>\n  );\n}\n","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/components/map/maps.js",["446","447"],"import React, { useEffect, useState } from \"react\";\nimport { MapContainer, Marker, Popup, TileLayer, useMap, useMapEvents } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport L from \"leaflet\";\nimport { PLACE_HOLDER_ICON_URL } from \"components/constants\";\n\nconst icon = L.icon({\n  iconUrl: PLACE_HOLDER_ICON_URL,\n  iconSize: [38, 38],\n});\nconst NOMINATIM_REVERSE_URL = \"https://nominatim.openstreetmap.org/reverse?\";\nconst TILE_LAYER_URL = \"https://api.maptiler.com/maps/basic/256/{z}/{x}/{y}.png?key=GsqVDsxlKcMfyPpnz8xW\";\nconst TILE_LAYER_ATTRIBUTE = '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors';\n\n/**\n * This method return address in String of selected latitude and longtitude\n * @param {*} lat \n * @param {*} lon \n * @returns \n */\nconst reverse = async (lat, lon) => {\n  // fetch(NOMINATIM_REVERSE_URL + \"lat=\" + lat + \"&lon=\" + lon + \"&format=json\");\n  const response = await fetch(NOMINATIM_REVERSE_URL + new URLSearchParams({lat: lat, lon: lon, format: 'json'}), {method: 'GET'});\n  const json = await response.json();\n  return json;\n}\n\nconst position = [51.505, -0.09];\n\nfunction ResetCenterView(props) {\n  const { selectPosition } = props;\n  const map = useMap();\n\n  useEffect(() => {\n    if (selectPosition) {\n      map.setView(\n        L.latLng(selectPosition?.lat, selectPosition?.lon),\n        map.getZoom(),\n        {\n          animate: true\n        }\n      )\n    }\n  }, [selectPosition]);\n\n  return null;\n}\n\nexport default function Maps(props) {\n  const { selectPosition, setSelectPosition } = props;\n  const [locationSelection, setLocationSelection] = useState([21.0294498, 105.8544441]);\n\n  useEffect(() => {\n    if (selectPosition !== null) {\n      setLocationSelection([parseFloat(selectPosition.lat), parseFloat(selectPosition.lon)]);\n    }\n  }, [selectPosition]);\n\n  const LocationFinderDummy = () => {\n    const map = useMapEvents({\n      async click(e) {\n        console.log(e.latlng);\n        setSelectPosition({lat: e.latlng.lat, lon: e.latlng.lng});\n        const newPosition = await reverse(e.latlng.lat, e.latlng.lng);\n        setSelectPosition(newPosition);\n      },\n    });\n    return null;\n  };\n\n  return (\n    <MapContainer\n      center={position}\n      zoom={8}\n      style={{ width: \"100%\", height: \"100%\" }}\n    >\n      <LocationFinderDummy />\n      <TileLayer\n        attribution={TILE_LAYER_ATTRIBUTE}\n        url={TILE_LAYER_URL}\n      />\n      {selectPosition && (\n        <Marker position={locationSelection} icon={icon}>\n          <Popup>\n            A pretty CSS3 popup. <br /> Easily customizable.\n          </Popup>\n        </Marker>\n      )}\n      <ResetCenterView selectPosition={selectPosition} />\n    </MapContainer>\n  );\n}\n\nexport function ListingMaps( props ) {\n  const { warehouses } = props;\n  const center = [Math.max(...warehouses.map(w => w.latitude)), \n    Math.max(...warehouses.map(w => w.longitude))]; // TODO: calculate center points by warehouses location\n\n  return (\n    <MapContainer\n      center={center}\n      zoom={8}\n      style={{ width: \"100%\", height: \"100%\" }}\n    >\n      <TileLayer\n        attribution={TILE_LAYER_ATTRIBUTE}\n        url={TILE_LAYER_URL}\n      />\n      {\n        warehouses.length > 0 &&\n        warehouses.map((warehouse) => {\n          console.log(\"Warehouse -> \", warehouse);\n          return (\n            <Marker \n              position={[ warehouse.latitude, warehouse.longitude ]}\n              icon={icon}\n            >\n              <Popup>\n                {warehouse.name}\n              </Popup>\n            </Marker>\n          );\n        })\n      }\n    </MapContainer>\n  )\n}","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/layout/notification/NotificationButton.jsx",["448","449","450"],"import NotificationsIcon from \"@mui/icons-material/Notifications\";\nimport { Avatar, Badge, IconButton } from \"@mui/material\";\nimport { grey } from \"@mui/material/colors\";\nimport { styled } from \"@mui/material/styles\";\nimport { bearerAuth, request } from \"api\";\nimport { config } from \"config/constant\";\nimport keycloak from \"config/keycloak\";\nimport { EventSourcePolyfill } from \"event-source-polyfill\";\nimport randomColor from \"randomcolor\";\nimport React from \"react\";\nimport { useNotificationState } from \"state/NotificationState\";\nimport NotificationMenu from \"./NotificationMenu\";\n\nconst StyledAvatar = styled(Avatar)(({ theme, isOpen }) => ({\n  width: 36,\n  height: 36,\n  color: \"#000000\",\n  backgroundColor: grey[200],\n  overflow: \"unset\",\n  \"&:hover\": {\n    backgroundColor: grey[300],\n  },\n  ...(isOpen\n    ? {\n        backgroundColor: \"#e7f3ff\",\n        \"&:hover\": { backgroundColor: \"rgba(187, 222, 251, 0.54)\" },\n      }\n    : {}),\n}));\n\nconst StyledBadge = styled(Badge)(({ theme }) => ({\n  \"& .MuiBadge-badge\": {\n    top: -3,\n    right: -3,\n  },\n}));\n\nconst SSE_EVENTS = {\n  HEARTBEAT: \"HEARTBEAT\",\n  NEW_NOTIFICATION: \"NEW_NOTIFICATION\",\n};\n\nconst processNotificationsContent = (notifications) => {\n  return notifications.map((notification) => ({\n    id: notification.id,\n    url: notification.url,\n    avatar: notification.avatar,\n    content: notification.content,\n    time: notification.createdStamp,\n    read: notification.read,\n    avatarColor: randomColor({\n      luminosity: \"dark\",\n      hue: \"random\",\n    }),\n  }));\n};\n\nfunction NotificationButton() {\n  const { open, notifications, numUnRead, hasMore } = useNotificationState();\n\n  // return focus to the button when we transitioned from !open -> open\n  const prevOpen = React.useRef(open.get());\n  const anchorRef = React.useRef(null);\n\n  //\n  const handleToggle = () => {\n    open.set((prevOpen) => !prevOpen);\n  };\n\n  const fetchNotification = () => {\n    let fromId = null;\n    const fetchedNoties = notifications.get();\n\n    if (fetchedNoties && fetchedNoties.length > 0) {\n      console.log(\n        \"fetchNotification, res = \",\n        fetchedNoties[fetchedNoties.length - 1]\n      );\n      fromId = fetchedNoties[fetchedNoties.length - 1].id;\n    }\n\n    request(\n      \"get\",\n      `/notification?fromId=${fromId || \"\"}&page=${0}&size=${20}`,\n      (res) => {\n        let data = res.data;\n        const noties = processNotificationsContent(data.notifications.content);\n\n        if (fromId === null) {\n          notifications.set(noties);\n        } else {\n          notifications.merge(noties);\n        }\n\n        numUnRead.set(data.numUnRead);\n        hasMore.set(!data.notifications.last);\n      },\n      { 401: () => {} }\n    );\n  };\n\n  React.useEffect(() => {\n    if (prevOpen.current === true && open.get() === false) {\n      anchorRef.current.focus();\n    }\n\n    prevOpen.current = open.get();\n\n    // if (open.get() === false && numUnRead.get() > 0) numUnRead.set(0);\n  }, [open.get()]);\n\n  React.useEffect(() => {\n    // When user open multiple tabs, only one tab will receive events at any point of time,\n    // all other tabs will wait for \"heartbeatTimeout\" secs and reconnect to server,\n    // one of them will successfully connect and receive next events\n\n    // SSE event handlers\n    const handleHeartbeatEvent = function (e) {\n      if (!notifications.get()) fetchNotification();\n      // console.log(new Date(), e);\n    };\n\n    const handleNewNotificationEvent = function (e) {\n      if (notifications.get()) {\n        let newNotification = processNotificationsContent([JSON.parse(e.data)]);\n        const len = notifications.get().length;\n\n        if (len === 0) {\n          // Notification list is empty\n          notifications.set(newNotification);\n          numUnRead.set(1);\n        } else {\n          newNotification = newNotification[0];\n          const newCreatedTime = new Date(newNotification.time).getTime();\n          let consideredCreatedTime;\n\n          // case 1: new is later than the considered one -> insert at that position and stop\n          // case 2: new is the same as the considered one -> stop\n          // case 3: new is earlier than the considered one -> continuously iterate\n          for (let i = 0; i < len; i++) {\n            consideredCreatedTime = new Date(\n              notifications[i].time.get()\n            ).getTime();\n\n            if (newCreatedTime > consideredCreatedTime) {\n              notifications.set((p) => {\n                p.splice(i, 0, newNotification);\n                return p;\n              });\n\n              numUnRead.set(numUnRead.get() + 1);\n              return;\n            } else if (newCreatedTime === consideredCreatedTime) {\n              return;\n            }\n          }\n        }\n      } else {\n        fetchNotification();\n      }\n    };\n\n    const onError = function (e) {\n      // When server SseEmitters timeout, it cause error\n      console.error(\n        `EventSource connection state: ${\n          es.readyState\n        }, error occurred: ${JSON.stringify(e)}`\n      );\n\n      if (e.target.readyState === EventSource.CLOSED) {\n        console.log(\n          new Date(),\n          `SSE closed (event readyState = ${e.target.readyState})`\n        );\n      } else if (e.target.readyState === EventSource.CONNECTING) {\n        console.log(\n          new Date(),\n          `SSE reconnecting (event readyState = ${e.target.readyState})`\n        );\n      }\n\n      es.close();\n      console.info(new Date(), `SSE closed`);\n      reconnect();\n    };\n\n    // Setup EventSource\n    let es;\n    let reconnectFrequencySeconds = 1;\n\n    // Putting these functions in extra variables is just for the sake of readability\n    const wait = function () {\n      return reconnectFrequencySeconds * 1000;\n    };\n\n    const tryToSetup = function () {\n      setupEventSource();\n      reconnectFrequencySeconds *= 2;\n\n      if (reconnectFrequencySeconds >= 64) {\n        reconnectFrequencySeconds = 64;\n      }\n    };\n\n    // Reconnect on every error\n    const reconnect = function () {\n      setTimeout(tryToSetup, wait());\n    };\n\n    // let count = 0;\n\n    function setupEventSource() {\n      fetchNotification();\n\n      es = new EventSourcePolyfill(\n        `${config.url.API_URL}/notification/subscription`,\n        {\n          headers: {\n            Authorization: bearerAuth(keycloak.token),\n            // Count: count++,\n          },\n          heartbeatTimeout: 120000,\n        }\n      );\n\n      // In fact, this callback function is usually not fired as soon as the connection is opened,\n      // but fired when the first event is received. Don't know the reason but this doesn't matter\n      es.onopen = (event) => {\n        console.info(new Date(), `SSE opened`);\n        // reconnectFrequencySeconds = 1;\n      };\n\n      // This event only to keep sse connection alive\n      es.addEventListener(SSE_EVENTS.HEARTBEAT, handleHeartbeatEvent);\n\n      es.addEventListener(\n        SSE_EVENTS.NEW_NOTIFICATION,\n        handleNewNotificationEvent\n      );\n\n      es.onerror = onError;\n    }\n\n    setupEventSource();\n\n    return () => {\n      es.close();\n      es = null;\n      console.info(new Date(), `SSE closed`);\n    };\n  }, []);\n\n  return (\n    <>\n      <IconButton\n        disableRipple\n        color=\"inherit\"\n        component=\"span\"\n        ref={anchorRef}\n        aria-haspopup=\"true\"\n        aria-label=\"notification button\"\n        aria-controls={open.get() ? \"menu-list-grow\" : undefined}\n        onClick={handleToggle}\n        sx={{ p: 1.5 }}\n      >\n        <StyledAvatar alt=\"notification button\" isOpen={open.get()}>\n          {open.get() ? (\n            <NotificationsIcon color=\"primary\" />\n          ) : (\n            <StyledBadge\n              badgeContent={numUnRead.get() < 10 ? numUnRead.get() : \"+9\"}\n              color=\"error\"\n            >\n              <NotificationsIcon />\n            </StyledBadge>\n          )}\n        </StyledAvatar>\n      </IconButton>\n      <NotificationMenu\n        open={open}\n        anchorRef={anchorRef}\n        notifications={notifications}\n        next={fetchNotification}\n        hasMore={hasMore}\n      />\n    </>\n  );\n}\n\n// NotificationButton.whyDidYouRender = {\n//   logOnDifferentValues: true,\n// };\n\nexport default React.memo(NotificationButton);\n","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/layout/account/AccountButton.jsx",["451","452"],"import { useState } from \"@hookstate/core\";\nimport { Avatar, IconButton } from \"@mui/material\";\nimport { useKeycloak } from \"@react-keycloak/web\";\nimport randomColor from \"randomcolor\";\nimport React, { useEffect } from \"react\";\nimport { AccountMenu } from \"./AccountMenu\";\n\nconst bgColor = randomColor({\n  luminosity: \"dark\",\n  hue: \"random\",\n});\n\nconst menuId = \"primary-search-account-menu\";\n\nfunction AccountButton() {\n  //\n  const { keycloak } = useKeycloak();\n\n  const open = useState(false);\n\n  // return focus to the button when we transitioned from !open -> open\n  const prevOpen = React.useRef(open.get());\n  const anchorRef = React.useRef(null);\n\n  //\n  const handleToggle = () => {\n    open.set((prevOpen) => !prevOpen);\n  };\n\n  useEffect(() => {\n    if (prevOpen.current === true && open.get() === false) {\n      anchorRef.current.focus();\n    }\n\n    prevOpen.current = open.get();\n  }, [open.get()]);\n\n  return (\n    <>\n      <IconButton\n        disableRipple\n        component=\"span\"\n        ref={anchorRef}\n        aria-haspopup=\"true\"\n        aria-label=\"account of current user\"\n        aria-controls={open.get() ? menuId : undefined}\n        onClick={handleToggle}\n        sx={{ p: 1.5 }}\n      >\n        <Avatar\n          alt=\"account button\"\n          sx={{ width: 36, height: 36, background: bgColor }}\n        >\n          {keycloak.tokenParsed.name\n            ?.split(\" \")\n            .pop()\n            .substring(0, 1)\n            .toLocaleUpperCase()}\n        </Avatar>\n      </IconButton>\n      <AccountMenu\n        open={open}\n        id={menuId}\n        anchorRef={anchorRef}\n        avatarBgColor={bgColor}\n      />\n    </>\n  );\n}\n\n// AccountButton.whyDidYouRender = {\n//   logOnDifferentValues: true,\n// };\n\nexport default React.memo(AccountButton);\n","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/config/menuconfig/approver.js",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/config/menuconfig/general.js",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/config/menuconfig/deliverymanager.js",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/components/table/StandardTable.jsx",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/components/table/DropDown.jsx",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/config/menuconfig/customer.js",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/config/menuconfig/salemanager.js",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/config/menuconfig/admin.js",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/config/menuconfig/user.js",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/receipt/receiptRequestProcessListing.js",["453"],"import { request } from \"api\";\nimport { API_PATH } from \"../apiPaths\";\nimport { useHistory } from \"react-router\";\nimport { useRouteMatch } from \"react-router-dom\";\n\nimport StandardTable from \"components/table/StandardTable\";\nimport { Fragment, useState, useEffect } from \"react\";\nimport { convertTimeStampToDate } from \"screens/utils/utils\";\n\nconst ReceiptRequestProcessListing = () => {\n\n  const [receiptTableData, setReceiptTableData] = useState([]);\n  const [processedReceiptTableData, setProcessedReceiptTableData] = useState([]);\n  const history = useHistory();\n  const { path } = useRouteMatch();\n\n  useEffect(() => {\n    request(\n      \"get\",\n      API_PATH.SALE_MANAGEMENT_RECEIPT_REQUEST + \"?status=APPROVED,IN_PROGRESS\",\n      (res) => {\n        var data = res.data;\n        for (var i = 0; i < data.length; i++) {\n          const createdTimestamp = data[i]?.createdDate;\n          const dateFormated = convertTimeStampToDate(createdTimestamp);\n          data[i].createdDate = dateFormated;\n\n          const expectedReceiveTimestamp = data[i]?.expectedReceiveDate;\n          const expectedReceiveDate = convertTimeStampToDate(expectedReceiveTimestamp);\n          data[i].expectedReceiveDate = expectedReceiveDate;\n        }\n        setReceiptTableData(data);\n      }\n    );\n\n    request(\n      \"get\",\n      API_PATH.SALE_MANAGEMENT_RECEIPT_REQUEST + \"?status=CANCELLED,COMPLETED\",\n      (res) => {\n        var data = res.data;\n        for (var i = 0; i < data.length; i++) {\n          const createdTimestamp = data[i]?.createdDate;\n          const dateFormated = convertTimeStampToDate(createdTimestamp);\n          data[i].createdDate = dateFormated;\n        }\n        setProcessedReceiptTableData(data);\n      }\n    )\n  }, []);\n\n  return <Fragment>\n    <StandardTable \n      title=\"Danh sách đơn nhập hàng cần xử lý\"\n      columns={[\n        { title: \"Ngày tạo đơn\", field: \"createdDate\" },\n        { title: \"Trạng thái\", field: \"status\" },\n        { title: \"Ngày muốn nhận hàng\", field: \"expectedReceiveDate\" },\n        { title: \"Người tạo đơn\", field: \"createdBy\" },\n        { title: \"Người phê duyệt\", field: \"approvedBy\" }\n      ]}\n      data={receiptTableData}\n      options={{\n        selection: false,\n        pageSize: 5,\n        search: true,\n        sorting: true,\n      }}\n      hideCommandBar={true}\n      onRowClick={ (event, rowData) => {\n        window.location.href = `${path}/${rowData.receiptRequestId}`;\n      } }\n    />\n\n    <StandardTable \n      title=\"Danh sách đơn nhập hàng đã xử lý\"\n      columns={[\n        { title: \"Ngày tạo đơn\", field: \"createdDate\" },\n        { title: \"Trạng thái\", field: \"status\" },\n        { title: \"Người tạo đơn\", field: \"createdBy\" },\n        { title: \"Người phê duyệt\", field: \"approvedBy\" },\n        { title: \"Người hủy\", field: \"cancelledBy\" },\n        { title: \"Cập nhật lần cuối\", field: \"lastUpdateStamp\" }\n      ]}\n      data={processedReceiptTableData}\n      hideCommandBar={true}\n      options={{\n        selection: false,\n        pageSize: 5,\n        search: true,\n        sorting: true,\n      }}\n      onRowClick={ (event, rowData) => {\n        window.location.href = `${path}/${rowData.receiptRequestId}`;\n      } }\n    />\n  </Fragment>\n}\n\nexport default ReceiptRequestProcessListing;","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/config/menuconfig/teacher.js",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/config/menuconfig/student.js",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/receipt/receiptRequestProcess.js",["454","455","456","457","458","459","460","461","462","463","464","465"],"import { Fragment, useState, useEffect } from \"react\";\nimport useStyles from \"screens/styles\";\nimport { useHistory } from \"react-router\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport { Box, Button, Grid, Modal, TextField, Typography } from \"@mui/material\";\nimport { request } from \"api\";\nimport { API_PATH } from \"../apiPaths\";\nimport StandardTable from \"components/table/StandardTable\";\nimport { convertTimeStampToDate } from \"../utils/utils\";\nimport { BayDropDown, WarehouseDropDown } from \"components/table/DropDown\";\nimport { errorNoti, successNoti } from \"utils/notification\";\nimport { Grid3x3 } from \"@mui/icons-material\";\n\nconst ProcessItem = ( { rowData, warehousesDetail, setProcessingItems, \n  processingItems, setOpenProcessModal, remainingItems, setRemainingItems } ) => {\n  const classes = useStyles();\n\n  const [localProcessingItems, setLocalProcessingItems] = useState([]);\n  const [selectedBayId, setSelectedBayId] = useState(null);\n  const [selectedBayCode, setSelectedBayCode] = useState(null);\n  const [selectedWarehouseId, setSelectedWarehouseId] = useState(null);\n  const [selectedWarehouseName, setSelectedWarehouseName] = useState(null);\n  const [selectedWarehouse, setSelectedWarehouse] = useState(null);\n  const [addedItemCount, setAddedItemCount] = useState(0);\n\n  useEffect(() => {\n    for (var i = 0; i < warehousesDetail?.length; i++) {\n      if (warehousesDetail[i].id == selectedWarehouseId) {\n        setSelectedWarehouse(warehousesDetail[i]);\n      }\n    }\n  }, [selectedWarehouseId]);\n\n  const saveButtonHandle = () => {\n    setProcessingItems([...processingItems, ...localProcessingItems]);\n    setOpenProcessModal(false);\n    var newRemainingItems = remainingItems;\n    var deleteItemId = null;\n    for (var i = 0; i < newRemainingItems?.length; i++) {\n      if (newRemainingItems[i].receiptItemRequestId == rowData.receiptItemRequestId) {\n        const prevQuantity = newRemainingItems[i].quantity;\n        const newQuantity = prevQuantity - addedItemCount;\n        newRemainingItems[i].quantity = newQuantity;\n        if (newQuantity == 0) {\n          deleteItemId = i;\n        }\n        break;\n      }\n    }\n    \n    if (deleteItemId != null) {\n      newRemainingItems.splice(deleteItemId, 1);\n    }\n\n    setRemainingItems(newRemainingItems);\n  }\n\n  console.log(\"Process item => \", warehousesDetail);\n  return <Box>\n    <Button variant=\"contained\" className={classes.addButton} \n      onClick={saveButtonHandle}>Lưu</Button>\n    <StandardTable\n      hideCommandBar={true}\n      title={`${rowData.productName} - Tổng số lượng cần xử lý ${rowData.quantity}`}\n      columns={[\n        { title: \"Kho nhận *\", field: \"warehouseName\",\n          editComponent: props => <WarehouseDropDown\n            warehouseList={warehousesDetail}\n            setSelectedWarehouseId={setSelectedWarehouseId}\n            setSelectedWarehouseName={setSelectedWarehouseName} /> },\n        { title: \"Kệ hàng *\", field: \"bayCode\",\n          editComponent: props => <BayDropDown\n            selectedWarehouse={selectedWarehouse}\n            setSelectedBayId={setSelectedBayId}\n            setSelectedBayCode={setSelectedBayCode} /> },\n        { title: \"Số lô *\", field: \"lotId\" },\n        { title: \"Giá nhập hàng *\", field: \"importPrice\", type: \"numeric\", min: 0, max: 5 },\n        { title: \"Số lượng *\", field: \"quantity\", type: \"numeric\" },\n      ]}\n      options={{\n        selection: false,\n        pageSize: 5,\n        search: true,\n        sorting: true,\n      }}\n      data={localProcessingItems}\n      editable={{\n        onRowAdd: newData => new Promise((resolve, reject) => {\n          setTimeout(() => {\n            // validate new row data\n            console.log(\"New data => \", newData);\n            const adder = {\n              ...newData,\n              bayCode: selectedBayCode,\n              warehouseName: selectedWarehouseName,\n              warehouseId: selectedWarehouseId,\n              bayId: selectedBayId,\n              productName: rowData.productName,\n              receiptItemRequestId: rowData.receiptItemRequestId,\n              productId: rowData.productId\n            };\n            if (adder.warehouseId == null ||\n              adder.bayId == null ||\n              adder.quantity == null ||\n              adder.lotId == null ||\n              adder.importPrice == null) {\n                errorNoti(\"Vui lòng nhập đầy đủ thông tin\");\n            } else if (adder.importPrice < 0) {\n              errorNoti(\"Giá nhập hàng không được nhỏ hơn 0\");\n            } else if (adder.quantity < 0) {\n              errorNoti(\"Số lượng không được nhỏ hơn 0\");\n            } else {\n              const total = addedItemCount + adder.quantity;\n              if (total > rowData.quantity) {\n                errorNoti(\"Bạn đã nhập quá số lượng hàng. Vui lòng kiểm tra lại\");\n              } else {\n                setAddedItemCount(total);\n                setLocalProcessingItems([...localProcessingItems, adder]);\n              }\n            }\n            resolve();\n          }, 500);\n        }),\n        onRowDelete: oldData => new Promise((resolve, reject) => {\n          const dataDelete = [...localProcessingItems];\n          const index = oldData.tableData.id;\n          dataDelete.splice(index, 1);\n          setLocalProcessingItems([...dataDelete]);\n          resolve();\n        })\n      }}\n    />\n  </Box>\n}\n\nconst ReceiptRequestProcess = ( props ) => {\n  const receiptId = props.match?.params?.id;\n  const classes = useStyles();\n\n  const [receiptInfo, setReceiptInfo] = useState(null);\n  const [remainingItems, setRemainingItems] = useState([]);\n  const [processingItems, setProcessingItems] = useState([]);\n  const [processedItems, setProcessedItems] = useState([]);\n\n  const [isOpenProcessModal, setOpenProcessModal] = useState(false);\n  const [rowData4ProcessItem, setRowData4ProcessItem] = useState(null);\n  const [warehousesDetail4ProcessItem, setWarehousesDetail4ProcessItem] = useState([]);\n\n  const [isDoneReceipt, setIsDoneReceipt] = useState(false);\n\n  const [warehouseList, setWarehouseList] = useState([]);\n  const [productList, setProductList] = useState([]);\n  const history = useHistory();\n  const { path } = useRouteMatch();\n\n  useEffect(() => {\n    request(\n      \"get\",\n      API_PATH.SALE_MANAGEMENT_RECEIPT_REQUEST + \"/\" + receiptId,\n      (res) => {\n        setReceiptInfo(res.data);\n        if (['Đã hoàn thành', 'Đã hủy'].includes(res.data.status)) {\n          setIsDoneReceipt(true);\n        }\n      }\n    );\n\n    request(\n      \"get\",\n      API_PATH.PROCESS_RECEIPT_REQUEST + \"/\" + receiptId,\n      (res) => {\n        setRemainingItems(res.data?.remainingItems);\n        setProcessedItems(res.data?.processedItems);\n      }\n    );\n\n    request(\n      \"get\",\n      API_PATH.WAREHOUSE_DETAIL,\n      (res) => {\n        setWarehouseList(res.data);\n      }\n    );\n\n    request(\n      \"get\",\n      API_PATH.PRODUCT,\n      (res) => {\n        setProductList(res.data);\n      }\n    );\n  }, []);\n\n  const saveButtonHandle = () => {\n    const isDone = remainingItems.length == 0;\n    request(\n      \"post\",\n      API_PATH.PROCESS_RECEIPT_REQUEST + `/${receiptInfo.receiptRequestId}?isDone=${isDone}`,\n      (res) => {\n        if (res.status == 200) {\n          successNoti(\"Lưu xử lý đơn hàng thành công\");\n          history.push(`${path.substring(0, path.lastIndexOf(\"/\"))}`);\n        }\n      },\n      {\n        500: () => errorNoti(\"Có lỗi xảy ra trong quá trình xử lý. Vui lòng thử lại sau\")\n      },\n      processingItems\n    );\n  }\n\n  const cancelReceiptButtonHandle = () => {\n    request(\n      \"put\",\n      API_PATH.CANCEL_RECEIPT_REQUEST + `/${receiptInfo.receiptRequestId}`,\n      (res) => {\n        if (res.status == 200) {\n          successNoti(\"Hủy bỏ đơn hàng thành công\");\n          history.push(`${path.substring(0, path.lastIndexOf(\"/\"))}`);\n        }\n      }\n    )\n  }\n\n  return <Fragment>\n    <Modal open={isOpenProcessModal}\n      onClose={() => setOpenProcessModal(!isOpenProcessModal)}\n      aria-labelledby=\"modal-modal-title\"\n      aria-describedby=\"modal-modal-description\">\n      <Box sx={{\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        width: '75%',\n        height: '50%',\n        transform: 'translate(-50%, -50%)',\n        bgcolor: 'background.paper',\n        border: '2px solid #000',\n        boxShadow: 24,\n        p: 4,\n      }} >\n        <ProcessItem remainingItems={remainingItems} \n          setRemainingItems={setRemainingItems} \n          setOpenProcessModal={setOpenProcessModal} \n          processingItems={processingItems} \n          setProcessingItems={setProcessingItems} \n          rowData={rowData4ProcessItem} \n          warehousesDetail={warehousesDetail4ProcessItem} />\n      </Box>\n    </Modal>\n\n    <Box>\n      <Grid container justifyContent=\"space-between\" className={classes.headerBox}>\n        <Typography variant=\"h5\">Xử lý đơn nhập hàng</Typography>\n        {\n          !isDoneReceipt &&\n          <Grid container xs={6} justifyContent=\"space-around\">\n            <Grid className={classes.buttonWrap}>\n              <Button variant=\"contained\" className={classes.addButton}\n                type=\"submit\" onClick={saveButtonHandle} >Lưu</Button>\n            </Grid>\n            <Grid classNam={classes.buttonWrap}>\n              <Button variant=\"contained\" className={classes.addButton}\n                type=\"submit\" onClick={cancelReceiptButtonHandle} >Hủy đơn nhập hàng</Button>\n            </Grid>\n          </Grid>\n        }\n      </Grid>\n    </Box>\n\n    <Box className={classes.formWrap} component=\"form\">\n      <Box>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <Box className={classes.boxInfor}>\n              <Typography className={classes.inforTitle} variant=\"h6\">\n                Thông tin chung\n              </Typography>\n              <Grid container spacing={3} className={classes.inforWrap}>\n                <Grid item xs={6}>\n                  <Box className={classes.labelInput}>\n                    Người tạo đơn\n                  </Box>\n                  <TextField\n                    fullWidth\n                    variant=\"outlined\"\n                    size=\"small\"\n                    name=\"createdBy\"\n                    InputProps={{\n                      readOnly: true,\n                    }}\n                    value={receiptInfo?.createdBy} />\n                </Grid>\n                <Grid item xs={6}>\n                  <Box className={classes.labelInput}>\n                    Trạng thái\n                  </Box>\n                  <TextField\n                    fullWidth\n                    variant=\"outlined\"\n                    size=\"small\"\n                    name=\"createdBy\"\n                    InputProps={{\n                      readOnly: true,\n                    }}\n                    value={receiptInfo?.status} />\n                </Grid>\n                <Grid item xs={6}>\n                  <Box className={classes.labelInput}>\n                    Ngày tạo đơn nhận hàng\n                  </Box>\n                  <TextField\n                    fullWidth\n                    variant=\"outlined\"\n                    size=\"small\"\n                    name=\"createdDate\"\n                    InputProps={{\n                      readOnly: true,\n                    }}\n                    value={convertTimeStampToDate(receiptInfo?.createdDate)} />\n                </Grid>\n                <Grid item xs={6}>\n                  <Box className={classes.labelInput}>\n                    Ngày muốn nhận hàng\n                  </Box>\n                  <TextField\n                    fullWidth\n                    variant=\"outlined\"\n                    size=\"small\"\n                    name=\"expectedReceiveDate\"\n                    InputProps={{\n                      readOnly: true,\n                    }}\n                    value={convertTimeStampToDate(receiptInfo?.expectedReceiveDate)} />\n                </Grid>\n                <Grid item xs={12}>\n                  <Box className={classes.labelInput}>\n                    Lý do tạo đơn\n                  </Box>\n                  <TextField \n                    fullWidth\n                    variant=\"outlined\"\n                    size=\"small\"\n                    name=\"createdReason\"\n                    multiline\n                    rows={4}\n                    InputProps={{\n                      readOnly: true,\n                    }}\n                    value={receiptInfo?.createdReason}\n                  />\n                </Grid>\n              </Grid>\n            </Box>\n\n            {\n              !isDoneReceipt &&\n              <Box>\n                <Box className={classes.boxInfor}>\n                  <StandardTable\n                    title=\"Danh sách hàng hóa cần xử lý\"\n                    columns={[\n                      { title: \"Sản phẩm\", field: \"productName\" },\n                      { title: \"Số lượng\", field: \"quantity\" },\n                      { title: \"Kho nhận hàng (nếu có)\", field: \"warehouseName\" },\n                      { title: \"\", fileds: \"productId\",\n                        render: (rowData) =>\n                          <Button variant=\"contained\" className={classes.addButton}\n                          onClick={() => {\n                            setRowData4ProcessItem(rowData);\n                            // TODO: set warehouse 4 process item\n                            if (rowData.warehouseId != null) {\n                              for (var i = 0; i < warehouseList?.length; i++) {\n                                if (warehouseList[i].id == rowData.warehouseId) {\n                                  setWarehousesDetail4ProcessItem([warehouseList[i]]);\n                                  break;\n                                }\n                              }\n                            } else {\n                              setWarehousesDetail4ProcessItem(warehouseList);\n                            }\n                            setOpenProcessModal(true);\n                          }}>Xử lý</Button>\n                      }\n                    ]}\n                    data={remainingItems}\n                    options={{\n                      selection: false,\n                      pageSize: 5,\n                      search: true,\n                      sorting: true,\n                    }}\n                    hideCommandBar={true}\n                  />\n                </Box>\n                <Box className={classes.boxInfor}>\n                  <StandardTable\n                    title=\"Danh sách hàng hóa đang xử lý\"\n                    columns={[\n                      { title: \"Sản phẩm\", field: \"productName\" },\n                      { title: \"Số lượng\", field: \"quantity\" },\n                      { title: \"Kho nhận\", field: \"warehouseName\" },\n                      { title: \"Kệ hàng\", field: \"bayCode\" },\n                      { title: \"Số lô\", field: \"lotId\" },\n                      { title: \"Giá nhập hàng\", field: \"importPrice\" },\n                    ]}\n                    data={processingItems}\n                    options={{\n                      selection: false,\n                      pageSize: 5,\n                      search: true,\n                      sorting: true,\n                    }}\n                    hideCommandBar={true}\n                    editable={{\n                      onRowDelete: oldData => new Promise((resolve, reject) => {\n                        // delete record from this table\n                        const dataDelete = [...processingItems];\n                        const index = oldData.tableData.id;\n                        dataDelete.splice(index, 1);\n                        setProcessingItems([...dataDelete]);\n                        // update quantity from remaining item table\n                        console.log(\"Old data => \", oldData);\n                        var remainingItemTemp = remainingItems;\n                        var quantityUpdated = false;\n                        for (var i = 0; i < remainingItemTemp?.length; i++) {\n                          if (remainingItemTemp[i]?.receiptItemRequestId == oldData.receiptItemRequestId) {\n                            const newQuantity = remainingItemTemp[i].quantity + oldData.quantity;\n                            remainingItemTemp[i].quantity = newQuantity;\n                            quantityUpdated = true;\n                            break;\n                          }\n                        }\n                        if (!quantityUpdated) {\n                          // restore record if needed\n                          setRemainingItems([...remainingItems, oldData]);\n                        } else {\n                          setRemainingItems(remainingItemTemp);\n                        }\n                        resolve();\n                      })\n                    }}\n                  />\n                </Box>\n              </Box>\n            }\n\n            <Box className={classes.boxInfor}>\n              <StandardTable \n                hideCommandBar={true}\n                columns={[\n                  { title: \"Sản phẩm\", field: \"productName\" },\n                  { title: \"Số lượng\", field: \"quantity\" },\n                  { title: \"Kho nhận\", field: \"warehouseName\" },\n                  { title: \"Kệ hàng\", field: \"bayCode\" },\n                  { title: \"Số lô\", field: \"lotId\" },\n                  { title: \"Giá nhập hàng\", field: \"importPrice\" },\n                ]}\n                title=\"Danh sách hàng hóa đã xử lý\"\n                data={processedItems}\n                options={{\n                  selection: false,\n                  pageSize: 5,\n                  search: true,\n                  sorting: true,\n                }}\n              />\n            </Box>\n          </Grid>\n        </Grid>\n      </Box>\n    </Box>\n  </Fragment>\n}\n\nexport default ReceiptRequestProcess;","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/order/saleManagerOrderListing.js",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/receipt/receiptRequestDetail.js",["466","467","468","469","470","471"],"// Màn hình tạo mới đơn xin nhập hàng dành cho quản lý bán hàng\n\nimport { Button, Grid, MenuItem, Select, TextField, Typography } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport useStyles from \"screens/styles\";\nimport { useForm } from \"react-hook-form\";\nimport StandardTable from \"components/table/StandardTable\";\nimport { request } from \"api\";\nimport { API_PATH } from \"../apiPaths\";\nimport { getProductNameFromProductId, getWarehouseNameByWarehouseId } from \"../utils/utils\";\nimport { errorNoti, successNoti } from \"utils/notification\";\nimport { useHistory } from \"react-router\";\nimport { useRouteMatch } from \"react-router-dom\";\n\nimport { Fragment, useState, useEffect } from \"react\";\n\nconst ReceiptRequestDetail = ( props ) => {\n  const history = useHistory();\n  const { path } = useRouteMatch();\n  const classes = useStyles();\n  const { register, errors, handleSubmit, watch, getValues } = useForm();\n  const [productTableData, setProductTableData] = useState([]);\n  const [selectedProductId, setSelectedProductId] = useState(null);\n  const [selectedWarehouseId, setSelectedWarehouseId] = useState(null);\n\n  const receiptId = props.match?.params?.id;\n  const isCreateForm = receiptId == null;\n  const [receiptInfo, setReceiptInfo] = useState(null);\n\n  // Data fetched from server\n  const [productList, setProductList] = useState([]);\n  const [warehouseList, setWarehouseList] = useState([]);\n\n  const ProductDropDown = ({ productList, setSelectedProduct }) => {\n    return <Select onChange={(e) => setSelectedProduct(e.target.value)}>\n      {\n        productList.length > 0 &&\n        productList.map(product => \n          <MenuItem value={product.productId}>\n            {product.name}\n          </MenuItem>)\n      }\n    </Select>\n  }\n\n  const WarehouseDropDown = ({ warehouseList, setSelectedWarehouseId }) => {\n    return <Select onChange={(e) => setSelectedWarehouseId(e.target.value)}>\n      {\n        warehouseList.length > 0 &&\n        warehouseList.map(warehouse => \n          <MenuItem value={warehouse.warehouseId}>\n            {warehouse.name}\n          </MenuItem>)\n      }\n    </Select>\n  }\n\n  const submitForm = ( data ) => {\n    const requestBody = {\n      \"createdReason\": data.createdReason,\n      \"expectedReceiveDate\": data.expectedReceiveDate,\n      \"receiptItemList\": productTableData\n    }\n    request(\n      \"put\",\n      API_PATH.RECEIPT,\n      (res) => {\n        if (res.status == 200) {\n          successNoti(\"Tạo đơn xin nhập hàng hóa thành công\");\n          history.push(`${path.replace('/create', '')}`);\n        } else {\n          errorNoti(\"Có lỗi khi tạo đơn. Vui lòng thử lại sau\");\n        }\n      },\n      {\n\n      },\n      requestBody\n    );\n  }\n\n  useEffect(() => {\n    \n    async function fetchData() {\n      await request(\n        \"get\",\n        API_PATH.PRODUCT,\n        (res) => {\n          setProductList(res.data);\n        }\n      );\n\n      await request(\n        \"get\",\n        API_PATH.WAREHOUSE,\n        (res) => {\n          setWarehouseList(res.data);\n        }\n      )\n\n      if (!isCreateForm) {\n        request(\n          \"get\",\n          API_PATH.SALE_MANAGEMENT_RECEIPT_REQUEST + \"/\" + receiptId,\n          (res) => {\n            setReceiptInfo(res.data);\n            setProductTableData(res.data?.items);\n          }\n        )\n      }\n    }\n\n    fetchData();\n  }, []);\n\n  return (\n    <Fragment>\n      <Box>\n        <Grid container justifyContent=\"space-between\" \n          className={classes.headerBox} >\n          <Grid>\n            <Typography variant=\"h5\">\n              {\"Tạo mới đơn xin nhập hàng\"}\n            </Typography>\n          </Grid>\n          {\n            isCreateForm && \n            <Grid className={classes.buttonWrap}>\n              <Button variant=\"contained\" className={classes.addButton} \n                type=\"submit\" onClick={handleSubmit(submitForm)} >Lưu</Button>\n            </Grid>\n          }\n        </Grid>\n      </Box>\n\n      <Box className={classes.formWrap} component=\"form\">\n        <Box>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <Box className={classes.boxInfor}>\n                <Typography className={classes.inforTitle} variant=\"h6\">\n                  Thông tin chung\n                </Typography>\n                <Grid container spacing={3} className={classes.inforWrap}>\n                  <Grid item xs={12}>\n                    <Box className={classes.labelInput}>\n                      Ngày muốn nhận hàng\n                    </Box>\n                    <TextField\n                      fullWidth\n                      variant=\"outlined\"\n                      size=\"small\"\n                      inputRef={register({ required: false })}\n                      name=\"expectedReceiveDate\"\n                      type={\"date\"} \n                      InputProps={{\n                        readOnly: !isCreateForm,\n                      }}\n                      value={receiptInfo?.expectedReceiveDate} />\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <Box className={classes.labelInput}>\n                      Lý do tạo đơn\n                    </Box>\n                    <TextField \n                      fullWidth\n                      variant=\"outlined\"\n                      size=\"small\"\n                      inputRef={register({ required: false })}\n                      name=\"createdReason\"\n                      multiline\n                      rows={4}\n                      InputProps={{\n                        readOnly: !isCreateForm,\n                      }}\n                      value={receiptInfo?.createdReason}\n                    />\n                  </Grid>\n                </Grid>\n              </Box>\n\n              <Box className={classes.boxInfor}>\n                {/* <Typography className={classes.inforTitle} variant=\"h6\">\n                  Danh sách hàng hóa\n                </Typography> */}\n                <StandardTable \n                  title=\"Danh sách hàng hóa\"\n                  columns={[\n                    { title: \"Tên hàng hóa\", field: \"productName\", \n                      editComponent: props => <ProductDropDown \n                        setSelectedProduct={setSelectedProductId}\n                        productList={productList} /> },\n                    { title: \"Số lượng\", field: \"quantity\", type: \"numeric\" },\n                    { title: \"Kho nhận (không bắt buộc)\", field: \"warehouseName\", \n                      editComponent: props => <WarehouseDropDown \n                        setSelectedWarehouseId={setSelectedWarehouseId}\n                        warehouseList={warehouseList} />}\n                  ]}\n                  data={productTableData}\n                  options={{\n                    selection: false,\n                    pageSize: 5,\n                    search: true,\n                    sorting: true,\n                  }}\n                  hideCommandBar={true}\n                  editable={isCreateForm && {\n                    onRowAdd: newData => new Promise((resolve, reject) => {\n                      setTimeout(() => {\n                        console.log(\"new data => \", newData);\n                        if (newData.quantity == undefined \n                          || selectedProductId == null \n                          || newData.quantity == null \n                          || newData.quantity < 1) {\n                          errorNoti(\"Vui lòng kiểm tra lại thông tin đơn hàng vừa nhập.\");\n                          reject();\n                        } else {\n                          const newRow = {\n                            \"productId\": selectedProductId,\n                            \"productName\": getProductNameFromProductId(selectedProductId, productList),\n                            \"quantity\": newData.quantity,\n                            \"warehouseId\": selectedWarehouseId,\n                            \"warehouseName\": getWarehouseNameByWarehouseId(selectedWarehouseId, warehouseList)\n                          }\n                          setProductTableData([...productTableData, newRow]);\n                          setSelectedProductId(null);\n                          setSelectedWarehouseId(null);\n                          resolve();\n                        }\n                      });\n                    }),\n                    onRowDelete: oldData => new Promise((resolve, reject) => {\n                      setTimeout(() => {\n                        console.log(\"Old data => \", oldData);\n                        const dataDelete = [...productTableData];\n                        const index = oldData.tableData.id;\n                        dataDelete.splice(index, 1);\n                        setProductTableData([...dataDelete]);\n                        resolve();\n                      });\n                    })\n                  }}\n                />\n              </Box>\n            </Grid>\n          </Grid>\n        </Box>\n      </Box>\n    </Fragment>\n  )\n}\n\nexport default ReceiptRequestDetail;","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/ecommerce/productGeneralView.js",["472","473"],"import { useRouteMatch } from \"react-router-dom\";\nimport { Box, Grid, Typography, Badge, Link, Button } from \"@mui/material\";\nimport { request } from \"api\";\nimport { Fragment, useEffect, useState } from \"react\";\nimport { API_PATH } from \"../apiPaths\";\nimport ShoppingCartIcon from '@mui/icons-material/ShoppingCart';\nimport { useHistory } from \"react-router\";\n\nconst ProductGeneralView = () => {\n  const history = useHistory();\n  const { path } = useRouteMatch();\n  const [productData, setProductData] = useState([]);\n  const [itemInCartCount, setItemInCartCount] = useState(0);\n  \n  useEffect(() => {\n    async function fetchData() {\n      request(\n        \"get\",\n        API_PATH.PRODUCT,\n        (res) => {\n          setProductData(res.data);\n        }\n      );\n    }\n\n    fetchData();\n\n  }, []);\n\n  return (\n    <Fragment>\n      <Grid container mb={3}>\n        <Grid item xs={8}>\n          <Typography variant=\"h4\">Mua hàng online</Typography>\n        </Grid>\n        <Grid item xs={4} justifyContent=\"flex-end\">\n          <Button onClick={() => history.push('/wmsv2/customer/cart')}>\n            <Badge color=\"secondary\" badgeContent={itemInCartCount}>\n              <ShoppingCartIcon />{\" \"}\n            </Badge>\n          </Button>\n        </Grid>\n      </Grid>\n\n      <Grid container spacing={3}>\n        {\n          productData.length > 0 &&\n          productData.map(product => \n            <Grid item xs={3}>\n              <Box>\n                <img src={\"data:\" + product?.imageContentType + \";base64,\" + product?.imageData} width={\"100%\"} height={\"100%\"} />\n                <Typography variant=\"h6\">{product?.name}</Typography>\n                <Typography variant=\"h6\">{\"Giá bán lẻ: \" + (product?.retailPrice == null ? \"Liên hệ\" : product?.retailPrice)}</Typography>\n                <Link href={`${path}/${product.productId}`}>Xem chi tiết</Link>\n              </Box>\n            </Grid>\n            )\n        }\n      </Grid>\n    </Fragment>\n  )\n}\n\nexport default ProductGeneralView;","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/ecommerce/productCustomerDetailView.js",["474","475","476","477","478","479","480","481"],"import { RequireStar } from \"components/common/requireStar\";\nimport React, { useEffect, useState } from \"react\";\nimport { Fragment } from \"react\";\nimport { Box, Grid, Button, Typography, TextField, Select, MenuItem } from \"@material-ui/core\";\nimport useStyles from \"screens/styles\";\nimport { errorNoti, successNoti } from 'utils/notification';\nimport { request } from 'api';\nimport { API_PATH } from \"../apiPaths\";\nimport { LOCAL_STORAGE } from \"components/constants\";\n\nconst ProductCustomerDetailView = ( props ) => {\n  const classes = useStyles();\n\n  const [imageURL, setImageURL] = useState(null);\n  const [productCategories, setProductCategories] = useState([]);\n  const [warehouseDetails, setWarehouseDetails] = useState([]);\n\n  const productId = props.match?.params?.id;\n  const [productInfo, setProductInfo] = useState(null);\n\n  // for selection field\n  const [categoryId, setCategoryId] = useState(null);\n  const [uom, setUom] = useState(null);\n\n  const addToCart = () => {\n    // check if product is already added to cart\n    const items = JSON.parse(localStorage.getItem(LOCAL_STORAGE.CART_ITEMS));\n    console.log(\"Items => \", items);\n    \n    if (items != null) {\n      var quantity = 1;\n      var oldIndex;\n      for (var i = 0; i < items?.length; i++) {\n        if (items[i].productId == productId) {\n          quantity = items[i].quantity + 1;\n          oldIndex = i;\n          break;\n        }\n      }\n      if (oldIndex != undefined) {\n        items.splice(oldIndex, 1);\n      }\n      const newItem = {\n        productId: productId,\n        quantity: quantity\n      };\n      localStorage.setItem(LOCAL_STORAGE.CART_ITEMS, JSON.stringify([...items, newItem]));\n    } else {\n      const newItem = {\n        productId: productId,\n        quantity: 1\n      };\n      localStorage.setItem(LOCAL_STORAGE.CART_ITEMS, JSON.stringify([newItem]));\n    }\n    \n    successNoti(\"Đã thêm 1 sản phẩm \" + productInfo?.productInfo?.name)\n  };\n\n  useEffect(() => {\n\n    async function fetchData() {\n      const categoryResponse = request(\n        \"get\",\n        API_PATH.PRODUCT_CATEGORY,\n        (res) => {\n          console.log(\"Response product category request -> \", res);\n          setProductCategories(res.data);\n        }\n      );\n      const warehouseResponse = request(\n        \"get\",\n        API_PATH.WAREHOUSE_DETAIL,\n        (res) => {\n          setWarehouseDetails(res.data);\n        }\n      );\n      console.log(\"Get information of product with id \", productId);\n      request(\n        \"get\",\n        API_PATH.PRODUCT + \"/\" + productId,\n        (res) => {\n          setProductInfo(res.data);\n          setCategoryId(res.data.productInfo.categoryId);\n          setUom(res.data.productInfo.uom);\n          const imageBytes = res.data.productInfo.imageData;\n          setImageURL(\"data:\" + res.data.productInfo.imageContentType + \";base64,\" + imageBytes);\n        },\n        {\n          401: () => { },\n          503: () => { errorNoti(\"Có lỗi khi tải dữ liệu của sản phẩm\") }\n        }\n      )\n    }\n\n    fetchData();\n\n  }, []);\n  return (\n    <Fragment>\n\n      <Box>\n        <Grid container justifyContent=\"space-between\" \n          className={classes.headerBox} >\n          <Grid>\n            <Typography variant=\"h5\">\n              {\"Xem thông tin sản phẩm\"}\n            </Typography>\n          </Grid>\n          <Grid className={classes.buttonWrap}>\n            <Button variant=\"contained\" className={classes.addButton} \n              type=\"submit\" onClick={addToCart} >Thêm vào giỏ hàng</Button>\n          </Grid>\n        </Grid>\n      </Box>\n\n      <Box className={classes.formWrap}\n          component=\"form\">\n        <Box>\n          <Grid container spacing={2}>\n            <Grid item xs={8}>\n              <Box className={classes.boxInfor}>\n                <Typography className={classes.inforTitle} variant=\"h6\">\n                  Thông tin cơ bản\n                </Typography>\n\n                <Grid container spacing={3} className={classes.inforWrap}>\n                  <Grid item xs={6}>\n                    <Box className={classes.labelInput}>\n                      Tên sản phẩm <RequireStar /></Box>\n                    <TextField\n                      fullWidth\n                      variant=\"outlined\"\n                      size=\"small\"\n                      name=\"name\"\n                      value={productInfo?.productInfo?.name}\n                      InputProps={{\n                        readOnly: true,\n                      }}\n                    ></TextField>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Box className={classes.labelInput}>\n                      Mã sản phẩm <RequireStar /></Box>\n                    <TextField\n                      fullWidth\n                      variant=\"outlined\"\n                      size=\"small\"\n                      name=\"code\"\n                      value={productInfo?.productInfo?.code}\n                      InputProps={{\n                        readOnly: true,\n                      }}\n                    ></TextField>\n                  </Grid>\n                </Grid>\n                \n              </Box>\n            </Grid>\n            <Grid item xs={4}>\n              <Box className={classes.boxInfor}>\n                <Typography className={classes.inforTitle} variant=\"h6\">\n                  Ảnh sản phẩm</Typography>\n                <Box>\n                  <img src={imageURL} width={\"100%\"} height={\"100%\"} />\n                </Box>\n              </Box>\n            </Grid>\n          </Grid>\n\n          <Grid container spacing={2}>\n            <Grid item xs={8}>\n              <Box className={classes.boxInfor}>\n                <Typography className={classes.inforTitle} variant=\"h6\">\n                  Thông tin bổ sung\n                </Typography>\n\n                <Grid container spacing={3} className={classes.inforWrap}>\n                  <Grid item xs={6}>\n                    <Box className={classes.labelInput}>Phân loại</Box>\n                    <Select\n                      label=\"categoryId\"\n                      fullWidth\n                      value={categoryId}\n                      defaultValue={categoryId}\n                      onChange={(e) => setCategoryId(e.target.value)}\n                      inputProps={{\n                        readOnly: true\n                      }}\n                    >\n                      {\n                        productCategories.length > 0 &&\n                        productCategories.map(category =>\n                          category.categoryId == productInfo?.productInfo?.categoryId ? \n                          <MenuItem selected value={category.categoryId}>\n                            {category.name}\n                          </MenuItem> : \n                          <MenuItem value={category.categoryId}>\n                            {category.name}\n                          </MenuItem>\n                          )\n                      }\n                    </Select>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Box className={classes.labelInput}>Đơn vị tính</Box>\n                    <Select\n                      label=\"uom\"\n                      value={uom}\n                      defaultValue={uom}\n                      onChange={(e) => setUom(e.target.value)}\n                      fullWidth\n                      inputProps={{\n                        readOnly: true\n                      }}\n                    >\n                      <MenuItem value={\"Cái\"} >Cái</MenuItem>\n                      <MenuItem value={\"Kg\"}>Kg</MenuItem>\n                      <MenuItem value={\"Gói\"}>Gói</MenuItem>\n                    </Select>\n                  </Grid>\n                </Grid>\n\n                <Grid container spacing={3} className={classes.inforWrap}>\n                  <Grid item xs={6}>\n                    <Box className={classes.labelInput}>Chiều cao (cm)</Box>\n                    <TextField\n                      fullWidth\n                      variant=\"outlined\"\n                      size=\"small\"\n                      name=\"height\"\n                      type={\"number\"}\n                      value={productInfo?.productInfo?.height}\n                      InputProps={{\n                        readOnly: true,\n                      }}\n                    ></TextField>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Box className={classes.labelInput}>Diện tích đáy (cm2)</Box>\n                    <TextField\n                      fullWidth\n                      variant=\"outlined\"\n                      size=\"small\"\n                      name=\"area\"\n                      type={\"number\"}\n                      value={productInfo?.productInfo?.area}\n                      InputProps={{\n                          readOnly: true,\n                        }}\n                    ></TextField>\n                  </Grid>\n                </Grid>\n\n                <Grid container spacing={3} className={classes.inforWrap}>\n                  <Grid item xs={6}>\n                    <Box className={classes.labelInput}>Khối lượng (kg)</Box>\n                    <TextField\n                      fullWidth\n                      variant=\"outlined\"\n                      size=\"small\"\n                      name=\"weight\"\n                      type={\"number\"}\n                      value={productInfo?.productInfo?.weight}\n                      InputProps={{\n                          readOnly: true,\n                        }}\n                    ></TextField>\n                  </Grid>\n                </Grid>\n              </Box>\n            </Grid>\n            <Grid item xs={4}>\n              <Box className={classes.boxInfor}>\n                <Typography className={classes.inforTitle} variant=\"h6\">\n                  Mô tả thêm</Typography> \n                <TextField\n                  name=\"description\"\n                  fullWidth\n                  variant=\"outlined\"\n                  size=\"small\"\n                  multiline\n                  rows={4}\n                  value={productInfo?.productInfo?.description}\n                  InputProps={{\n                    readOnly: true,\n                  }}\n                ></TextField>\n              </Box>\n            </Grid>\n          </Grid>\n        </Box>\n      </Box>\n    </Fragment>\n  );\n\n}\n\nexport default ProductCustomerDetailView;","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/receipt/receiptRequestForApprovalListing.js",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/components/common/NotAuthorized.jsx",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/warehouse/listWarehouses.js",["482"],"import { useRouteMatch } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport { ListingMaps } from 'components/map/maps';\nimport MapIcon from '@mui/icons-material/Map';\nimport AddIcon from '@mui/icons-material/Add';\nimport { successNoti } from \"utils/notification\";\nimport { request } from \"api\";\nimport CommandBarButton from 'components/button/commandBarButton';\nimport React, { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport StandardTable from 'components/table/StandardTable';\nimport { API_PATH } from \"../apiPaths\";\nimport { Box, Modal } from '@material-ui/core';\n\nconst ListWarehouse = () => {\n  let { path } = useRouteMatch();\n  const [isHideCommandBar, setHideCommandBar] = useState(true);\n  const [warehousesTableData, setWarehousesTableData] = useState([]);\n  const [isMapModalOpen, setMapModalOpen] = useState(false);\n\n  useEffect(() => {\n    request(\n      \"get\",\n      API_PATH.WAREHOUSE,\n      (res) => {\n        const tableData = res.data.map(obj => {\n          obj.tableData = { \"checked\": false };\n          return obj;\n        })\n        setWarehousesTableData(tableData);\n      })\n  }, []);\n\n  const columns = [\n    { title: \"Tên\", field: \"name\" },\n    { title: \"Code\", field: \"code\" },\n    { title: \"Địa chỉ\", field: \"address\" }\n  ];\n\n  const removeSelectedFacilities = () => {\n    const selectedFacilityIds = warehousesTableData\n      .filter((facility) => facility.tableData.checked == true)\n      .map((obj) => obj.warehouseId);\n    \n    console.log(\"warehousesTableData: \", warehousesTableData);\n\n    request(\n      \"delete\",\n      API_PATH.WAREHOUSE,\n      (res) => { \n        successNoti(\"Xóa thành công\");\n        const newTableData = warehousesTableData.filter(\n          (facility) => !selectedFacilityIds.includes(facility.warehouseId));\n        setWarehousesTableData(newTableData);\n        setHideCommandBar(true);\n      },\n      { },\n      selectedFacilityIds\n    )\n  }\n\n  const onSelectionChangeHandle = (rows) => {\n    setWarehousesTableData(warehousesTableData);\n    if (rows.length === 0) {\n      setHideCommandBar(true);\n    } else {\n      setHideCommandBar(false);\n    }\n  }\n\n  return <div>\n    <Modal\n      open={isMapModalOpen}\n      onClose={() => setMapModalOpen(!isMapModalOpen)}\n    >\n      <Box\n        sx={{\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          width: '75%',\n          height: '90%',\n          transform: 'translate(-50%, -50%)',\n          bgcolor: 'background.paper',\n          border: '2px solid #000',\n          boxShadow: 24,\n          p: 4,\n        }}>\n          <div style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            width: \"100%\",\n            height: \"100%\",\n          }}>\n            <ListingMaps\n              warehouses={warehousesTableData\n                .filter((warehouse) => warehouse.latitude != null && warehouse.longitude != null)}\n            ></ListingMaps>\n          </div>\n      </Box>\n    </Modal>\n    <div>\n      <StandardTable\n        title={\"Danh sách nhà kho\"}\n        columns={columns}\n        data={warehousesTableData}\n        hideCommandBar={isHideCommandBar}\n        options={{\n          selection: true,\n          pageSize: 20,\n          search: true,\n          sorting: true,\n        }}\n        onRowClick={ (event, rowData) => {\n          window.location.href = `${path}/update/${rowData.warehouseId}`;\n        } } \n        onSelectionChange={onSelectionChangeHandle}\n        commandBarComponents={ <CommandBarButton \n                                  onClick={removeSelectedFacilities}>\n                                    Xóa\n                                </CommandBarButton> }\n        actions={[\n          {\n            icon: () => <MapIcon />,\n            tooltip: \"Xem kho trên bản đồ\",\n            onClick: () => setMapModalOpen(true),\n            isFreeAction: true\n          },\n          {\n            icon: () => <Link to={`warehouse/create`}>\n              <AddIcon />\n            </Link>,\n            tooltip: \"Thêm mới kho\",\n            isFreeAction: true\n          }\n        ]}\n      />\n    </div>\n  </div>\n}\n\nexport default ListWarehouse;\n","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/warehouse/createWarehouse.js",["483","484"],"import SearchBox from 'components/map/searchBox.js';\nimport Maps from 'components/map/maps.js';\nimport MapIcon from '@mui/icons-material/Map';\nimport { Button, Box, Grid, InputAdornment, OutlinedInput, TextField, Typography, Modal } from '@mui/material';\nimport React, { Fragment, useEffect, useState, useRef } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { setCanvasSize } from 'screens/utils/utils.js';\nimport { Stage, Layer, Rect } from \"react-konva\";\nimport useStyles from 'screens/styles.js';\nimport { request } from 'api';\nimport { errorNoti, successNoti } from 'utils/notification';\nimport HighlightOffIcon from '@mui/icons-material/HighlightOff';\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\nimport CachedIcon from '@mui/icons-material/Cached';\nimport { API_PATH } from '../apiPaths.js';\n// import { warehouse } from 'config/menuconfig/warehouse.js'; ==> ?\nimport { useRouteMatch } from \"react-router-dom\";\nimport { useHistory } from \"react-router\";\nimport StandardTable from 'components/table/StandardTable.jsx';\nimport withScreenSecurity from 'components/common/withScreenSecurity.js';\n\nconst CreateWarehouse = ( props, { screenAuthorization } ) => {\n  const holderShelf = { x: \"\", y: \"\", width: \"\", length: \"\", num: \"\" };\n  const classes = useStyles();\n  const [listShelf, setListShelf] = useState([holderShelf]);\n  const [canvanData, setCanvasData] = useState([]);\n  const [scale, setScale] = useState();\n  const { register, errors, handleSubmit, watch, getValues } = useForm();\n  const [pos, setPos] = useState();\n  const [shelf, setShelf] = useState();\n  const stageCanvasRef = useRef();\n  const [width, setWidth] = useState();\n  const [warehouseHeight, setWarehouseHeight] = useState();\n  const [height, setHeight] = useState();\n  const [openModal, setOpenModal] = useState(false);\n  const [selectPosition, setSelectPosition] = useState(null);\n  const warehouseId = props.match?.params?.id;\n  const [warehouseInfo, setWarehouseInfo] = useState(null);\n  const isCreateForm = warehouseId == null;\n  const history = useHistory();\n  const { path } = useRouteMatch();\n  // Use to determine what value of Address text field\n  // if updateAddress = true -> Address text field = new select address from map\n  // else -> current warehouse address or null\n  const [updateAddress, setUpdateAddress] = useState(false);\n  const [productTableData, setProductTableData] = useState([]);\n\n  useEffect(() => {\n    if (warehouseId != null) {\n      request(\n        \"get\",\n        API_PATH.WAREHOUSE + \"/\" + warehouseId,\n        (res) => {\n          setWarehouseInfo(res.data);\n          setListShelf([...res.data.listShelf, ...listShelf]);\n        },\n        {\n          401: () => { },\n          503: () => { errorNoti(\"Có lỗi khi tải dữ liệu của kho\") }\n        }\n      );\n      request(\n        \"get\",\n        API_PATH.PRODUCT_WAREHOUSE + \"/\" + warehouseId,\n        ( res ) => {\n          setProductTableData(res.data.products);\n        },\n        {\n          401: () => { },\n          503: () => { errorNoti(\"Có lỗi khi tải dữ liệu của kho\") }\n        }\n      )\n    }\n  }, [warehouseId])\n\n  useEffect(() => {\n    if (selectPosition != null) {\n      setUpdateAddress(true);\n      console.log(\"Update address is set to true\");\n    }\n  }, [selectPosition])\n\n  const handleAddShelf = () => {\n    setListShelf([...listShelf, holderShelf])\n  }\n\n  let removeFormFields = (i) => {\n    let newFormValues = [...listShelf];\n    newFormValues.splice(i, 1);\n    setListShelf(newFormValues)\n  }\n\n  const addWareHouse = () => {\n  }\n\n  const addFile = (e) => {\n    e.preventDefault();\n    const reader = new FileReader();\n    reader.readAsText(e.target.files[0], \"UTF-8\");\n    reader.onload = (e) => {\n      const text = e.target.result;\n      setListShelf(JSON.parse(text))\n    };\n  };\n\n  let submitForm = (data) => {\n    data.listShelf = listShelf.filter((element) => \n      JSON.stringify(element) !== JSON.stringify(holderShelf));\n    data.longitude = updateAddress ? selectPosition.lon : warehouseInfo.longitude;\n    data.latitude = updateAddress ? selectPosition.lat : warehouseInfo.latitude;\n    data.id = isCreateForm ? null : warehouseId;\n    console.log(\"Data in request body -> \", data);\n    request(\n      \"put\",\n      API_PATH.WAREHOUSE,\n      (res) => {\n        successNoti(isCreateForm ? \"Tạo kho thành công\" : \"Cập nhật kho thành công\");\n        // history.push(`${path.replace('/create', '')}/${id}`);\n        if (isCreateForm) {\n          history.push(`${path.replace('/create', '')}`);\n        } else {\n          history.push(`${path.substring(0, path.indexOf('/update'))}`);\n        }\n      },\n      {\n        401: () => { },\n        400: (e) => { errorNoti(e.response.data.errors[0].message); }\n      },\n      data\n    );\n  };\n\n  const handleChange = (i, e) => {\n    const { name, value } = e.target;\n    const list = [...listShelf];\n    list[i][name] = value;\n    // list[i][\"num\"] = i + 1;\n    setListShelf(list);\n  };\n\n  const resetCanvas = () => {\n    const data = getValues();\n    const width = parseInt(data.warehouseWidth)\n    const length = parseInt(data.warehouseLength)\n    if (isNaN(width) || isNaN(length) || width <= 0 || length <= 0) {\n      errorNoti(\n        \"Vui lòng điền kích thước kho\"\n      );\n    }\n    setCanvasData(listShelf)\n    // const data = getValues();\n    if (stageCanvasRef.current) {\n      setWidth(stageCanvasRef.current.offsetWidth);\n      setHeight(stageCanvasRef.current.offsetHeight);\n      setWarehouseHeight(stageCanvasRef.current.offsetWidth \n        * data.warehouseLength / data.warehouseWidth)\n      setScale(stageCanvasRef.current.offsetWidth / data.warehouseWidth)\n    }\n  };\n\n  const warehouseBox = (data, maxSize) => {\n    return (\n      <Rect\n        key={data.shelfID}\n        x={setCanvasSize(data.x, maxSize)}\n        y={setCanvasSize(data.y, maxSize)}\n        width={setCanvasSize(data.width, maxSize)}\n        height={setCanvasSize(data.length, maxSize)}\n        fill={\"#87CEFA\"}\n        stroke='#1976d2'\n        strokeWidth={2}\n        onMouseEnter={e => {\n          e.target._clearCache();\n          let mousePos = e.target.getAbsolutePosition();\n          setPos(mousePos)\n          setShelf(e.target.index)\n        }}\n        onMouseOut={e => {\n          setPos(null)\n          setShelf(null)\n        }}\n      />\n    );\n  }\n\n  return (\n    <Fragment>\n      <Modal open={openModal}\n        onClose={() => setOpenModal(!openModal)}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <Box sx={{\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          width: '75%',\n          height: '90%',\n          transform: 'translate(-50%, -50%)',\n          bgcolor: 'background.paper',\n          border: '2px solid #000',\n          boxShadow: 24,\n          p: 4,\n        }}>\n          <Typography variant=\"h5\">\n            Chọn vị trí kho \n            <Button variant=\"contained\" \n            className={classes.addButton} \n            type=\"submit\" \n            onClick={() => setOpenModal(false)} >\n              Lưu\n            </Button>\n          </Typography>\n          \n          <div style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            width: \"100%\",\n            height: \"100%\",\n          }}>\n            <div style={{ width: \"50%\", height: \"90%\", marginRight: 10 }}>\n              <Maps selectPosition={selectPosition} \n                setSelectPosition={setSelectPosition} />\n            </div>\n            <div style={{ width: \"50%\", height: \"90%\" }}>\n              <SearchBox selectPosition={selectPosition} \n                setSelectPosition={setSelectPosition} />\n            </div>\n          </div>\n        </Box>\n      </Modal>\n      <Box className={classes.warehousePage} >\n        <Grid container justifyContent=\"space-between\" \n          className={classes.headerBox} >\n          <Grid>\n            <Typography variant=\"h5\">\n              {isCreateForm ? \"Tạo mới kho\" : \"Xem thông tin kho\"}\n            </Typography>\n          </Grid>\n          <Grid className={classes.buttonWrap}>\n            <Button variant=\"contained\" className={classes.addButton} \n              type=\"submit\" onClick={handleSubmit(submitForm)} >Lưu</Button>\n          </Grid>\n        </Grid>\n      </Box>\n      <Box className={classes.bodyBox}>\n        <Box className={classes.formWrap}\n          component=\"form\"\n          onSubmit={handleSubmit(addWareHouse)}>\n          <Box >\n            <Grid container spacing={2}>\n              <Grid item xs={8}>\n                <Box className={classes.boxInfor}>\n                  <Typography className={classes.inforTitle} variant=\"h6\">\n                    Thông tin cơ bản\n                  </Typography>\n                  <Grid container spacing={3} className={classes.inforWrap}>\n                    <Grid item xs={6}>\n                      <Box className={classes.inputWrap}>\n                        <Box className={classes.labelInput}>\n                          Tên kho\n                        </Box>\n                        <TextField\n                          fullWidth\n                          variant=\"outlined\"\n                          size=\"small\"\n                          inputRef={register({ required: \"Vui lòng điền tên kho\" })}\n                          name=\"name\"\n                          error={!!errors.name}\n                          helperText={errors.name?.message}\n                          value={warehouseInfo?.name}\n                          onChange={(e) => {\n                            setWarehouseInfo({\n                              ...warehouseInfo,\n                              name: e.target.value\n                            });\n                          }}\n                        />\n                      </Box>\n                    </Grid>\n                    <Grid item xs={6}>\n                      <Box className={classes.inputWrap}>\n                        <Box className={classes.labelInput}>\n                          Mã kho\n                        </Box>\n                        <TextField\n                          fullWidth\n                          variant=\"outlined\"\n                          size=\"small\"\n                          inputRef={register({ required: \"Vui lòng điền mã kho\" })}\n                          name=\"code\"\n                          error={!!errors.code}\n                          helperText={errors.code?.message}\n                          value={warehouseInfo?.code}\n                          onChange={(e) => {\n                            setWarehouseInfo({\n                              ...warehouseInfo,\n                              code: e.target.value\n                            });\n                          }}\n                        />\n                      </Box>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <Box className={classes.inputWrap}>\n                        <Box className={classes.labelInput}>\n                          Địa chỉ <Button style={{ \"margin-bottom\": 0 }} \n                          onClick={() => setOpenModal(!openModal)}><MapIcon /></Button>\n                        </Box>\n                        <TextField\n                          fullWidth\n                          className={classes.inputRight}\n                          style={{ flexGrow: 1, marginRight: 4 }}\n                          variant=\"outlined\"\n                          size=\"small\"\n                          inputRef={register({ required: \"Vui lòng điền địa chỉ kho\" })}\n                          name=\"address\"\n                          error={!!errors.address}\n                          helperText={errors.address?.message}\n                          disabled\n                          value={\n                            updateAddress ? \n                            selectPosition?.display_name :\n                            warehouseInfo?.address\n                          }\n                        />\n                      </Box>\n                    </Grid>\n                  </Grid>\n                </Box>\n              </Grid>\n              <Grid item xs={4}>\n                <Box className={classes.boxInfor}>\n                  <Typography className={classes.inforTitle} variant=\"h6\">\n                    Kích thước\n                  </Typography>\n                  <Grid container spacing={3} className={classes.inforWrap}>\n                    <Grid item xs={12}>\n                      <Box className={classes.inputWrap}>\n                        <Box className={classes.labelInput}>\n                          Chiều dài\n                        </Box>\n                        <OutlinedInput\n                          fullWidth\n                          inputRef={register({ required: false })}\n                          name=\"warehouseLength\"\n                          className={classes.settingInput}\n                          endAdornment={<InputAdornment position=\"end\">{`(mét)`}</InputAdornment>}\n                          value={warehouseInfo?.warehouseLength}\n                          onChange={(e) => {\n                            setWarehouseInfo({\n                              ...warehouseInfo,\n                              warehouseLength: e.target.value\n                            });\n                          }}\n                        />\n                      </Box>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <Box className={classes.inputWrap}>\n                        <Box className={classes.labelInput}>\n                          Chiều rộng\n                        </Box>\n                        <OutlinedInput\n                          fullWidth\n                          name=\"warehouseWidth\"\n                          inputRef={register({ required: false })}\n                          className={classes.settingInput}\n                          endAdornment={<InputAdornment position=\"end\">{`(mét)`}</InputAdornment>}\n                          value={warehouseInfo?.warehouseWidth}\n                          onChange={(e) => {\n                            setWarehouseInfo({\n                              ...warehouseInfo,\n                              warehouseWidth: e.target.value\n                            });\n                          }}\n                        />\n                      </Box>\n                    </Grid>\n                  </Grid>\n                </Box>\n              </Grid>\n            </Grid>\n          </Box>\n          <Box className={classes.boxInfor} style={{ margin: 0 }}>\n            <Typography className={classes.inforTitle} variant=\"h6\">\n              Thông tin chi tiết kho\n              <input\n                style={{ display: 'none' }}\n                id=\"raised-button-file\"\n                onChange={addFile}\n                type=\"file\"\n              />\n              <label htmlFor=\"raised-button-file\">\n                <Button \n                  variant=\"raised\" \n                  component=\"span\" \n                  style={{ fontSize: \"18px !important\", color: \"#1976d2\", marginLeft: 94, textTransform: \"none\" }}>\n                  Tải file lên\n                </Button>\n              </label>\n            </Typography>\n            <Grid container className={classes.detailWrap}>\n              <Grid xs={3} sx={{ display: \"flex\", }} item className={classes.boxWrap}>\n                <Typography className={classes.inforTitle} style={{ fontWeight: 500 }}>\n                  Danh sách kệ hàng\n                </Typography>\n                <Box className={classes.listWrap}>\n                  {\n                    listShelf.map((data, index) => (\n                      <Box key={index} width={\"100%\"} display={\"flex\"} alignItems={\"center\"} padding={\"8px\"} >\n                        <Box className={classes.shelfInput} style={{ flexGrow: 1 }} display={\"flex\"} padding={\"8px\"}>\n                          <Box width={\"75px\"}>\n                            <Typography style={{ fontWeight: 500 }}>Kệ số {data.num}</Typography>\n                          </Box>\n                          <Box style={{ width: `calc(100% - 75px` }} className={classes.rootInput}>\n                            <Grid container spacing={1} >\n                              <Grid item xs={6} >\n                                <TextField \n                                  variant=\"outlined\" \n                                  size=\"small\" \n                                  label=\"Tọa độ x\" \n                                  fullWidth \n                                  name=\"x\" \n                                  value={data.x} \n                                  onChange={e => handleChange(index, e)} />\n                              </Grid>\n                              <Grid item xs={6} >\n                                <TextField \n                                  variant=\"outlined\" \n                                  size=\"small\" \n                                  label=\"Chiều dài\" \n                                  fullWidth \n                                  name={`width`} \n                                  value={data.width} \n                                  onChange={e => handleChange(index, e)} />\n                              </Grid>\n                              <Grid item xs={6} >\n                                <TextField \n                                  variant=\"outlined\" \n                                  size=\"small\" \n                                  label=\"Tọa độ y\"\n                                   fullWidth \n                                   name={`y`} \n                                   value={data.y} \n                                   onChange={e => handleChange(index, e)} />\n                              </Grid>\n                              <Grid item xs={6} >\n                                <TextField \n                                  variant=\"outlined\" \n                                  size=\"small\" \n                                  label=\"Chiều Rộng\" \n                                  fullWidth \n                                  name={`length`} \n                                  value={data.length} \n                                  onChange={e => handleChange(index, e)} />\n                              </Grid>\n                              <Grid item xs={6}>\n                                <TextField \n                                  variant=\"outlined\" \n                                  size=\"small\" \n                                  label=\"Code\" \n                                  fullWidth \n                                  name={`code`} \n                                  value={data.code} \n                                  onChange={e => handleChange(index, e)} />\n                              </Grid>\n                            </Grid>\n\n                          </Box>\n                          <Box \n                            className={classes.removeIconBox} \n                            onClick={() => removeFormFields(index)}  >\n                            <HighlightOffIcon className={classes.removeIcon} />\n                          </Box>\n                        </Box>\n                      </Box>\n                    ))\n                  }\n                </Box>\n                <Box className={classes.addIconBox} onClick={() => handleAddShelf()}>\n                  <Box className={classes.addIconWrap} >\n                    <AddCircleOutlineIcon className={classes.addIcon} />\n                    <Typography>Thêm kệ hàng</Typography>\n                  </Box>\n                </Box>\n              </Grid>\n\n              <Grid xs={9} item sx={{ display: \"flex\", }} className={classes.boxWrap}>\n                <Box className={classes.titleWap} >\n                  <Typography style={{ fontWeight: 500 }}>\n                    Mô phỏng\n                  </Typography>\n                  <Box className={classes.rerloadIconBox} onClick={resetCanvas}>\n                    <Box className={classes.reloadIconWrap} >\n                      <CachedIcon style={{ color: \"#1976d2\" }} />\n                      <Typography>Tải lại</Typography>\n                    </Box>\n                  </Box>\n                </Box>\n                <Box className={classes.canvasWrap}>\n                  <Box className={classes.stageWrap} ref={stageCanvasRef} >\n                    <Stage\n                      width={width}\n                      height={height}\n                    >\n                      <Layer>\n                        <Rect\n                          width={width}\n                          height={warehouseHeight}\n                          x={0} y={0}\n                          fill=\"#FFFEFA\"\n                          strokeWidth={3}\n                          stroke=\"#89C4FA\"\n                          cornerRadius={3}\n                        />\n                        {canvanData.map((data) => (\n                          warehouseBox(data, scale)\n                        ))}\n                      </Layer>\n                    </Stage>\n                    {\n                      shelf && pos &&\n                      <Typography style={{ \n                        position: \"absolute\", \n                        top: pos.y + 8 + \"px\", \n                        left: pos.x + 8 + \"px\", \n                        padding: \"4px\", \n                        boxShadow: \"0px 2px 4px rgb(168 168 168 / 25%)\", \n                        borderRadius: 3, \n                        background: \"#FFF\", }}>\n                          Kệ {listShelf[shelf - 1].code}\n                      </Typography>\n                    }\n                  </Box>\n                </Box>\n              </Grid>\n            </Grid>\n          </Box>\n\n          {!isCreateForm &&\n          <Box className={classes.boxInfor}>\n            <StandardTable\n              title={\"Danh sách hàng tồn kho\"}\n              columns={\n                [\n                  { title: \"Tên hàng\", field: \"productName\" },\n                  { title: \"Số lượng\", field: \"quantity\" },\n                  { title: \"Số lô\", field: \"lotId\" },\n                  { title: \"Kệ hàng\", field: \"bayCode\" },\n                  { title: \"Giá nhập (VNĐ)\", field: \"importPrice\" },\n                  { title: \"Giá bán (VNĐ)\", field: \"exportPrice\" }\n                ]\n              }\n              data={productTableData}\n              options={{\n                pageSize: 5,\n                search: true,\n                sorting: true,\n              }}\n            />\n          </Box>}\n        </Box>\n      </Box>\n    </Fragment>\n  );\n}\n\nconst SCR_ID = \"SCR_WMSv2_WAREHOUSE\";\nexport default withScreenSecurity(CreateWarehouse, SCR_ID, true);","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/product/productListing.js",["485","486","487"],"import { useRouteMatch } from \"react-router-dom\";\nimport { useHistory } from \"react-router\";\nimport { request } from \"api\";\nimport StandardTable from \"components/table/StandardTable\";\nimport { API_PATH } from \"../apiPaths\";\nimport CommandBarButton from \"components/button/commandBarButton\";\nimport { Link } from 'react-router-dom';\nimport { successNoti } from \"utils/notification\";\nimport { Fragment, useState, useEffect } from \"react\";\nimport AddIcon from '@mui/icons-material/Add';\n\nconst ProductListing =  () => {\n  const [productTableData, setProductTableData] = useState([]);\n  const [isHideCommandBar, setHideCommandBar] = useState(true);\n  const history = useHistory();\n  const { path } = useRouteMatch();\n  \n  const columns = [\n    { title: \"Tên sản phẩm\", field: \"name\" },\n    { title: \"Mã sản phẩm\", field: \"code\" },\n    { title: \"Số lượng hàng tồn\", field: \"onHandQuantity\" }\n  ];\n\n  const onSelectionChangeHandle = (rows) => {\n    setProductTableData(productTableData);\n    if (rows.length === 0) {\n      setHideCommandBar(true);\n    } else {\n      setHideCommandBar(false);\n    }\n  }\n\n  const removeSelectedProducts = () => {\n    const selectedProductIds = productTableData\n      .filter((product) => product.tableData.checked == true)\n      .map((obj) => obj.productId);\n    \n    console.log(\"selected product ids: \", selectedProductIds);\n\n    request(\n      \"delete\",\n      API_PATH.PRODUCT,\n      (res) => { \n        successNoti(\"Xóa thành công\");\n        const newTableData = productTableData.filter(\n          (product) => !selectedProductIds.includes(product.productId));\n        setProductTableData(newTableData);\n        setHideCommandBar(true);\n      },\n      { },\n      selectedProductIds\n    )\n  }\n\n  useEffect(() => {\n    async function fetchData() {\n      request(\n        \"get\",\n        API_PATH.PRODUCT,\n        (res) => {\n          console.log(\"data response -> \", res);\n          setProductTableData(res.data);\n          console.log(\"product table data -> \", productTableData);\n        }\n      )\n    }\n\n    fetchData();\n  }, []);\n\n  return (\n    <Fragment>\n      <StandardTable\n        title={\"Danh sách sản phẩm\"}\n        columns={columns}\n        data={productTableData}\n        hideCommandBar={isHideCommandBar}\n        options={{\n          selection: true,\n          pageSize: 20,\n          search: true,\n          sorting: true,\n        }}\n        onRowClick={ (event, rowData) => {\n          window.location.href = `${path}/update/${rowData.productId}`;\n        } } \n        onSelectionChange={onSelectionChangeHandle}\n        commandBarComponents={ <CommandBarButton \n          onClick={removeSelectedProducts}>\n            Xóa\n        </CommandBarButton> }\n        actions={[\n          {\n            icon: () => <Link to={`product/create`}>\n              <AddIcon />\n            </Link>,\n            tooltip: \"Thêm mới sản phẩm\",\n            isFreeAction: true\n          }\n        ]}\n      />\n    </Fragment>\n  );\n}\n\nexport default ProductListing;","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/product/productDetail.js",["488","489","490","491","492","493","494","495","496","497","498","499","500","501","502"],"import { RequireStar } from \"components/common/requireStar\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport { useHistory } from \"react-router\";\nimport { InputAdornment, TableBody, TableCell, TableContainer, \n  TableHead, TableRow } from '@mui/material';\nimport FormatListBulletedIcon from '@mui/icons-material/FormatListBulleted';\nimport React, { useEffect, useState } from \"react\";\nimport { Fragment } from \"react\";\nimport { Box, Grid, Button, Typography, TextField, Select,\n  MenuItem, Modal, Table} from \"@material-ui/core\";\nimport useStyles from \"screens/styles\";\nimport { useForm } from \"react-hook-form\";\nimport { errorNoti, successNoti } from 'utils/notification';\nimport { request } from 'api';\nimport { API_PATH } from '../apiPaths';\n\nconst DetailQuantityTable = ({ \n  isCreateForm, \n  warehouseDetails, \n  setShowDetailQuantityModal, \n  initQuantityArray,\n  setInitQuantityArray,\n  classes,\n  totalQuantity }) => {\n\n  const [warehouseId, setWarehouseId] = useState(null);\n  const [bayId, setBayId] = useState(null);\n  const [quantity, setQuantity] = useState(0);\n  const [importPrice, setImportPrice] = useState(0);\n  const [exportPrice, setExportPrice] = useState(0);\n  const [lotId, setLotId] = useState(null);\n  const [selectedWarehouse, setSelectedWarehouse] = useState(null);\n\n  useEffect(() => {\n    if (warehouseId != null && warehouseDetails.length > 0) {\n      for (var i = 0; i < warehouseDetails.length; i++) {\n        if (warehouseDetails[i].id == warehouseId) {\n          setSelectedWarehouse(warehouseDetails[i]);\n          return;\n        }\n      }\n    }\n  }, [warehouseId]);\n\n  const newLineButtonClickHandle = () => {\n    if (warehouseId == null || bayId == null || quantity <= 0 || lotId == null) {\n      errorNoti(\"Vui lòng nhập đầy đủ thông tin\");\n      return;\n    }\n    const newQuantity = {\n      warehouseId: warehouseId,\n      bayId: bayId,\n      quantity: quantity,\n      exportPrice: exportPrice,\n      importPrice: importPrice,\n      lotId: lotId\n    };\n    setInitQuantityArray([...initQuantityArray, newQuantity]);\n    console.log(\"New quantity array: \", initQuantityArray);\n    setWarehouseId(null);\n    setBayId(null);\n    setQuantity(0);\n    setSelectedWarehouse(null);\n  };\n\n  const saveButtonHandle = () => {\n    if (totalQuantity == 0) {\n      setShowDetailQuantityModal(false)\n      return;\n    }\n    setShowDetailQuantityModal(false);\n  }\n\n  const getWarehouseNameByWarehouseId = (id) => {\n    return warehouseDetails.filter(detail => detail.id == id)\n      .map(detail => detail.name)[0];\n  }\n\n  const getBayCodeByBayId = (id) => {\n    for (var i = 0; i < warehouseDetails.length; i++) {\n      const shelf = warehouseDetails[i].listShelf;\n      if (shelf == null || shelf.length <= 0) {\n        continue;\n      }\n      for (var j = 0; j < shelf.length; j++) {\n        if (shelf[j].id == id) {\n          return shelf[j].code;\n        }\n      }\n    }\n  }\n\n  return (\n    <Box>\n      <Grid container>\n        <Grid item xs={8}>\n          <Typography variant=\"h5\">\n            Số lượng ban đầu\n          </Typography>\n        </Grid>\n        <Grid item xs={4}>\n          {isCreateForm && <Button variant=\"contained\"\n            className={classes.addButton}\n            type=\"submit\"\n            onClick={saveButtonHandle} >\n              Lưu\n          </Button>}\n        </Grid>\n      </Grid>\n\n      <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Kho</TableCell>\n              <TableCell>Kệ</TableCell>\n              <TableCell>Số lượng</TableCell>\n              <TableCell>Giá nhập</TableCell>\n              <TableCell>Giá bán</TableCell>\n              <TableCell>Lô</TableCell>\n            </TableRow>\n          </TableHead>\n      \n          <TableBody>\n            {\n              initQuantityArray.length > 0 &&\n              initQuantityArray.map(element =>\n                <TableRow>\n                  <TableCell>{getWarehouseNameByWarehouseId(element.warehouseId)}</TableCell>\n                  <TableCell>{getBayCodeByBayId(element.bayId)}</TableCell>\n                  <TableCell>{element.quantity}</TableCell>\n                  <TableCell>{element.importPrice}</TableCell>\n                  <TableCell>{element.exportPrice}</TableCell>\n                  <TableCell>{element.lotId}</TableCell>\n                </TableRow>\n                )\n            }\n            \n            {\n              isCreateForm &&\n              <TableRow>\n                <TableCell>\n                  <Select\n                    value={warehouseId}\n                    label=\"warehouseId\"\n                    onChange={(e) => setWarehouseId(e.target.value)}\n                    fullWidth\n                  >\n                  {\n                    warehouseDetails\n                      .map(detail =>\n                        (<MenuItem value={detail.id}>{detail.name}</MenuItem>))\n                  }\n                  </Select>\n                </TableCell>\n                \n                <TableCell>\n                  <Select\n                    value={bayId}\n                    label=\"bayId\"\n                    onChange={(e) => setBayId(e.target.value)}\n                    fullWidth\n                  >\n                  {\n                    selectedWarehouse != null &&\n                    selectedWarehouse.listShelf != null &&\n                    selectedWarehouse.listShelf.length > 0 &&\n                    selectedWarehouse.listShelf\n                      .map(shelf => <MenuItem value={shelf.id}>{shelf.code}</MenuItem>)\n                  }\n                  </Select>\n                </TableCell>\n              \n                <TableCell>\n                  <TextField\n                    fullWidth\n                    variant=\"outlined\"\n                    size=\"small\"\n                    name=\"area\"\n                    type={\"number\"}\n                    value={quantity}\n                    error={quantity < 0}\n                    onChange={(e) => setQuantity(e.target.value)}\n                  ></TextField>\n                </TableCell>\n\n                <TableCell>\n                  <TextField\n                    fullWidth\n                    variant=\"outlined\"\n                    size=\"small\"\n                    name=\"area\"\n                    type={\"number\"}\n                    value={importPrice}\n                    error={importPrice < 0}\n                    onChange={(e) => setImportPrice(e.target.value)}\n                  ></TextField>\n                </TableCell>\n\n                <TableCell>\n                  <TextField\n                    fullWidth\n                    variant=\"outlined\"\n                    size=\"small\"\n                    name=\"area\"\n                    type={\"number\"}\n                    value={exportPrice}\n                    error={exportPrice < 0}\n                    onChange={(e) => setExportPrice(e.target.value)}\n                  ></TextField>\n                </TableCell>\n\n                <TableCell>\n                  <TextField\n                    fullWidth\n                    variant=\"outlined\"\n                    size=\"small\"\n                    name=\"area\"\n                    value={lotId}\n                    onChange={(e) => setLotId(e.target.value)}\n                  ></TextField>\n                </TableCell>\n              </TableRow>\n              }\n\n            {\n              isCreateForm &&\n              <TableRow>\n                <Button onClick={newLineButtonClickHandle}>\n                  Thêm mới\n                </Button>\n              </TableRow>\n            }\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Box>\n  );\n}\n\nconst ProductDetail = ( props ) => {\n  const classes = useStyles();\n  const { register, errors, handleSubmit, watch, getValues } = useForm();\n\n  const [totalQuantity, setTotalQuantity] = useState(0);\n\n  const [isShowDetailQuantityModal, setShowDetailQuantityModal] = useState(false);\n\n  const [initQuantityArray, setInitQuantityArray] = useState([]);\n  const [uploadedImage, setUploadedImage] = useState(null);\n  const [imageURL, setImageURL] = useState(null);\n  const [productCategories, setProductCategories] = useState([]);\n  const [warehouseDetails, setWarehouseDetails] = useState([]);\n\n  const productId = props.match?.params?.id;\n  const isCreateForm = productId == null;\n  const [productInfo, setProductInfo] = useState(null);\n\n  // for selection field\n  const [categoryId, setCategoryId] = useState(null);\n  const [uom, setUom] = useState(null);\n\n  const history = useHistory();\n  const { path } = useRouteMatch();\n\n  const submitForm = (data) => {\n    // remove empty key-value in form data\n    const entries = Object.entries(data);\n    const nonEmptyOrNull = entries.filter(\n      ([key, value]) => value !== '' && value !== null && value !== undefined);\n    var modelData = Object.fromEntries(nonEmptyOrNull);\n    modelData.initProductQuantityList = initQuantityArray;\n    modelData.categoryId = categoryId;\n    modelData.uom = uom;\n    modelData.productId = productId;\n\n    const requestBody = new FormData()\n    requestBody.append(\"image\", uploadedImage);\n    requestBody.append(\"model\", JSON.stringify(modelData));\n\n    request(\n      \"put\",\n      API_PATH.PRODUCT,\n      (res) => {\n        successNoti(isCreateForm ? \"Tạo sản phẩm thành công\" : \"Cập nhật sản phẩm thành công\");\n        if (isCreateForm) {\n          history.push(`${path.replace('/create', '')}`);\n        } else {\n          history.push(`${path.substring(0, path.indexOf('/update'))}`);\n        }\n      },\n      {\n        401: () => { },\n        400: (e) => { errorNoti(e.response.data.errors[0].message); }\n      },\n      requestBody\n    )\n  };\n\n  useEffect(() => {\n    if (uploadedImage != null) {\n      setImageURL(URL.createObjectURL(uploadedImage));\n      console.log(\"Image url \", imageURL);\n    }\n  }, [uploadedImage]);\n\n  useEffect(() => {\n    if (initQuantityArray != null && initQuantityArray.length > 0) {\n      var newTotalQuantity = 0;\n      for (var i = 0; i < initQuantityArray.length; i++) {\n        const quantity = initQuantityArray[i];\n        newTotalQuantity += parseInt(quantity.quantity);\n      }\n      setTotalQuantity(newTotalQuantity);\n    }\n  }, [initQuantityArray]);\n\n  useEffect(() => {\n\n    async function fetchData() {\n      const categoryResponse = request(\n        \"get\",\n        API_PATH.PRODUCT_CATEGORY,\n        (res) => {\n          console.log(\"Response product category request -> \", res);\n          setProductCategories(res.data);\n        }\n      );\n      const warehouseResponse = request(\n        \"get\",\n        API_PATH.WAREHOUSE_DETAIL,\n        (res) => {\n          setWarehouseDetails(res.data);\n        }\n      );\n\n      if (isCreateForm) {\n        return;\n      }\n      console.log(\"Get information of product with id \", productId);\n      request(\n        \"get\",\n        API_PATH.PRODUCT + \"/\" + productId,\n        (res) => {\n          setProductInfo(res.data);\n          setCategoryId(res.data.productInfo.categoryId);\n          setUom(res.data.productInfo.uom);\n          setInitQuantityArray(res.data.quantityList);\n          const imageBytes = res.data.productInfo.imageData;\n          console.log(\"Image bytes -> \", imageBytes);\n          const blob = new Blob([imageBytes], {type: res.data.productInfo.imageContentType});\n          console.log(\"blob is setted to -> \", blob);\n          // setUploadedImage(blob);\n          setImageURL(\"data:\" + res.data.productInfo.imageContentType + \";base64,\" + imageBytes);\n        },\n        {\n          401: () => { },\n          503: () => { errorNoti(\"Có lỗi khi tải dữ liệu của sản phẩm\") }\n        }\n      )\n    }\n\n    fetchData();\n\n  }, []);\n\n  return (\n    <Fragment>\n      <Modal open={isShowDetailQuantityModal}\n        onClose={() => setShowDetailQuantityModal(!isShowDetailQuantityModal)}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <Box sx={{\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          width: '50%',\n          height: '50%',\n          transform: 'translate(-50%, -50%)',\n          bgcolor: 'background.paper',\n          border: '2px solid #000',\n          boxShadow: 24,\n          p: 4,\n        }}>\n          <DetailQuantityTable\n            isCreateForm={isCreateForm}\n            warehouseDetails={warehouseDetails} \n            setShowDetailQuantityModal={setShowDetailQuantityModal} \n            initQuantityArray={initQuantityArray} \n            setInitQuantityArray={setInitQuantityArray} \n            classes={classes}\n            totalQuantity={totalQuantity} />\n        </Box>\n      </Modal>\n\n      <Box>\n        <Grid container justifyContent=\"space-between\" \n          className={classes.headerBox} >\n          <Grid>\n            <Typography variant=\"h5\">\n              {isCreateForm ? \"Tạo mới sản phẩm\" : \"Xem thông tin sản phẩm\"}\n            </Typography>\n          </Grid>\n          <Grid className={classes.buttonWrap}>\n            <Button variant=\"contained\" className={classes.addButton} \n              type=\"submit\" onClick={handleSubmit(submitForm)} >Lưu</Button>\n          </Grid>\n        </Grid>\n      </Box>\n\n      <Box className={classes.formWrap}\n          component=\"form\">\n        <Box>\n          <Grid container spacing={2}>\n            <Grid item xs={8}>\n              <Box className={classes.boxInfor}>\n                <Typography className={classes.inforTitle} variant=\"h6\">\n                  Thông tin cơ bản\n                </Typography>\n\n                <Grid container spacing={3} className={classes.inforWrap}>\n                  <Grid item xs={6}>\n                    <Box className={classes.labelInput}>\n                      Tên sản phẩm <RequireStar /></Box>\n                    <TextField\n                      fullWidth\n                      variant=\"outlined\"\n                      size=\"small\"\n                      inputRef={register({ required: \"Vui lòng điền tên sản phẩm\" })}\n                      name=\"name\"\n                      error={!!errors.name}\n                      value={productInfo?.productInfo?.name}\n                    ></TextField>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Box className={classes.labelInput}>\n                      Mã sản phẩm <RequireStar /></Box>\n                    <TextField\n                      fullWidth\n                      variant=\"outlined\"\n                      size=\"small\"\n                      inputRef={register({ required: \"Vui lòng điền mã sản phẩm\" })}\n                      name=\"code\"\n                      error={!!errors.name}\n                      value={productInfo?.productInfo?.code}\n                    ></TextField>\n                  </Grid>\n                </Grid>\n                \n              </Box>\n            </Grid>\n            <Grid item xs={4}>\n              <Box className={classes.boxInfor}>\n                <Typography className={classes.inforTitle} variant=\"h6\">\n                  Ảnh sản phẩm</Typography>\n                <Button variant=\"contained\" component=\"label\" >\n                  Tải ảnh lên\n                  <input type=\"file\" accept=\"image/*\" hidden onChange={(e) => {\n                    setUploadedImage(e.target.files[0]); \n                    console.log(e.target.files[0]);\n                  }} />\n                </Button>\n                <Box>\n                  <img src={imageURL} width={\"100%\"} height={\"100%\"} />\n                </Box>\n              </Box>\n            </Grid>\n          </Grid>\n\n          <Grid container spacing={2}>\n            <Grid item xs={8}>\n              <Box className={classes.boxInfor}>\n                <Typography className={classes.inforTitle} variant=\"h6\">\n                  Thông tin bổ sung\n                </Typography>\n\n                <Grid container spacing={3} className={classes.inforWrap}>\n                  <Grid item xs={6}>\n                    <Box className={classes.labelInput}>Phân loại</Box>\n                    <Select\n                      label=\"categoryId\"\n                      // {...register(\"categoryId\", { required: false })}\n                      fullWidth\n                      value={categoryId}\n                      defaultValue={categoryId}\n                      onChange={(e) => setCategoryId(e.target.value)}\n                    >\n                      {\n                        productCategories.length > 0 &&\n                        productCategories.map(category =>\n                          category.categoryId == productInfo?.productInfo?.categoryId ? \n                          <MenuItem selected value={category.categoryId}>\n                            {category.name}\n                          </MenuItem> : \n                          <MenuItem value={category.categoryId}>\n                            {category.name}\n                          </MenuItem>\n                          )\n                      }\n                    </Select>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Box className={classes.labelInput}>Đơn vị tính</Box>\n                    <Select\n                      label=\"uom\"\n                      value={uom}\n                      defaultValue={uom}\n                      onChange={(e) => setUom(e.target.value)}\n                      fullWidth\n                    >\n                      <MenuItem value={\"Cái\"} >Cái</MenuItem>\n                      <MenuItem value={\"Kg\"}>Kg</MenuItem>\n                      <MenuItem value={\"Gói\"}>Gói</MenuItem>\n                    </Select>\n                  </Grid>\n                </Grid>\n\n                <Grid container spacing={3} className={classes.inforWrap}>\n                  <Grid item xs={6}>\n                    <Box className={classes.labelInput}>Chiều cao (cm)</Box>\n                    <TextField\n                      fullWidth\n                      variant=\"outlined\"\n                      size=\"small\"\n                      name=\"height\"\n                      inputRef={register({ required: false })}\n                      type={\"number\"}\n                      value={productInfo?.productInfo?.height}\n                    ></TextField>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Box className={classes.labelInput}>Diện tích đáy (cm2)</Box>\n                    <TextField\n                      fullWidth\n                      variant=\"outlined\"\n                      size=\"small\"\n                      name=\"area\"\n                      inputRef={register({ required: false })}\n                      type={\"number\"}\n                      value={productInfo?.productInfo?.area}\n                    ></TextField>\n                  </Grid>\n                </Grid>\n\n                <Grid container spacing={3} className={classes.inforWrap}>\n                  <Grid item xs={6}>\n                    <Box className={classes.labelInput}>Khối lượng (kg)</Box>\n                    <TextField\n                      fullWidth\n                      variant=\"outlined\"\n                      size=\"small\"\n                      name=\"weight\"\n                      inputRef={register({ required: false })}\n                      type={\"number\"}\n                      value={productInfo?.productInfo?.weight}\n                    ></TextField>\n                  </Grid>\n                  {/* <Grid item xs={6}>\n                    <Box className={classes.labelInput}>Số lượng ban đầu</Box>\n                    <TextField\n                      fullWidth\n                      variant=\"outlined\"\n                      size=\"small\"\n                      name=\"initQuantity\"\n                      type={\"number\"}\n                      value={totalQuantity}\n                      InputProps={{\n                        readOnly: true,\n                        startAdornment: (\n                          <InputAdornment position=\"end\">\n                            <Button onClick={() => setShowDetailQuantityModal(true)}>\n                              <FormatListBulletedIcon />\n                            </Button>\n                          </InputAdornment>\n                        )\n                      }}\n                    ></TextField>\n                  </Grid> */}\n                </Grid>\n              </Box>\n            </Grid>\n            <Grid item xs={4}>\n              <Box className={classes.boxInfor}>\n                <Typography className={classes.inforTitle} variant=\"h6\">\n                  Mô tả thêm</Typography> \n                <TextField\n                  inputRef={register({ required: false })}\n                  name=\"description\"\n                  fullWidth\n                  variant=\"outlined\"\n                  size=\"small\"\n                  multiline\n                  rows={4}\n                  value={productInfo?.productInfo?.description}\n                ></TextField>\n              </Box>\n            </Grid>\n          </Grid>\n        </Box>\n      </Box>\n    </Fragment>\n  );\n\n}\n\nexport default ProductDetail;","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/product/priceConfig.js",["503","504","505","506","507"],"import { Box, Modal } from \"@mui/material\";\nimport { request } from \"api\";\nimport StandardTable from \"components/table/StandardTable\";\nimport { errorNoti } from \"utils/notification\";\nimport useStyles from \"screens/styles\";\nimport { API_PATH } from \"../apiPaths\";\n\nimport { Fragment, useState, useEffect } from \"react\";\n\nconst PriceHistory = ( { data } ) => {\n  const [historyPricesArr, setHistoryPricesArr] = useState(data?.historyPrices == null ? [] : data?.historyPrices);\n  const classes = useStyles();\n\n  const [columns, setColumns] = useState([\n    { title: \"Giá bán\", field: \"price\", type: \"numeric\" },\n    { title: \"Ngày bắt đầu\", field: \"startDate\", type: \"date\" },\n    { title: \"Ngày kết thúc\", field: \"endDate\", type: \"date\" },\n    { title: \"Mô tả\", field: \"description\" }\n  ]);\n\n  return (\n    <Box>\n      <StandardTable\n        title={\"Cấu hình giá cho \" + data?.productName}\n        columns={columns}\n        data={historyPricesArr}\n        options={{\n          selection: false,\n          pageSize: 5,\n          search: true,\n          sorting: true,\n        }}\n        hideCommandBar\n        editable={{\n          onRowAdd: newData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              console.log(\"new data => \", newData);\n              if (newData.startDate > newData.endDate) {\n                errorNoti(\"Ngày bắt đầu phải trước ngày kết thúc\");\n                reject();\n              }\n              const requestBody = {\n                \"productId\": data.productId,\n                \"price\": newData.price,\n                \"startDate\": newData.startDate,\n                \"endDate\": newData.endDate,\n                \"description\": newData.description\n              }\n              request(\n                \"put\",\n                API_PATH.PRODUCT_PRICE,\n                (res) => {\n                  console.log(\"Response add data => \", res);\n                  if (res.status == 200) {\n                    setHistoryPricesArr([...historyPricesArr, newData]);\n                    resolve();\n                  } else {\n                    errorNoti(\"Có lỗi xảy ra. Vui lòng thử lại sau\");\n                    reject();\n                  }\n                },\n                {},\n                requestBody\n              )\n            })\n          }),\n          onRowDelete: oldData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              const dataDelete = [...historyPricesArr];\n              const index = oldData.tableData.id;\n              dataDelete.splice(index, 1);\n              request(\n                \"delete\",\n                API_PATH.PRODUCT_PRICE + \"/\" + oldData.productPriceId,\n                (res) => {\n                  if (res.status == 200) {\n                    setHistoryPricesArr([...dataDelete]);\n                    resolve();\n                  } else {\n                    errorNoti(\"Có lỗi xảy ra. Vui lòng thử lại sau\");\n                    reject();\n                  }\n                }\n              )\n            });\n          })\n        }}\n      />\n    </Box>\n  );\n}\n \nconst PriceConfig = () => {\n  const classes = useStyles();\n  const [priceHistory, setPriceHistory] = useState({});\n  const [isOpenModal, setOpenModal] = useState(false);\n  const [priceTableData, setPriceTableData] = useState([]);\n\n  useEffect(() => {\n    request(\n      \"get\",\n      API_PATH.PRODUCT_PRICE,\n      (res) => {\n        setPriceTableData(res.data);\n      }\n    )\n  }, []);\n\n  const columns = [\n    { title: \"Tên sản phẩm\", field: \"productName\" }, \n    { title: \"Giá bán hiện tại\", field: \"currPrice\" },\n  ];\n  \n  return (\n  <>\n    <Modal \n      open={isOpenModal}\n      onClose={() => {\n        setOpenModal(!isOpenModal);\n        window.location.reload();\n      }}\n      aria-labelledby=\"modal-modal-title\"\n      aria-describedby=\"modal-modal-description\">\n      <Box sx={{\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          width: '75%',\n          height: '75%',\n          transform: 'translate(-50%, -50%)',\n          bgcolor: 'background.paper',\n          border: '2px solid #000',\n          boxShadow: 24,\n          p: 4,\n        }}>\n        <PriceHistory data={priceHistory} />\n      </Box>\n    </Modal>\n    <StandardTable \n      hideCommandBar={true}\n      title={\"Cấu hình giá sản phẩm\"}\n      columns={columns}\n      data={priceTableData}\n      options={{\n        selection: true,\n        pageSize: 10,\n        search: true,\n        sorting: true,\n      }}\n      onRowClick={ (event, rowData) => { \n          console.log(\"On row click => row data: \", rowData);\n          setPriceHistory(rowData); \n          setOpenModal(true)\n        } \n      }\n    />\n  </>);\n}\n\nexport default PriceConfig;","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/assets/jss/material-dashboard-react.js",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/shipment/deliveryTripListing.js",["508","509"],"import { TextField } from \"@mui/material\";\nimport { request } from \"api\";\nimport { ShipmentDropDown } from \"components/table/DropDown\";\nimport StandardTable from \"components/table/StandardTable\";\nimport { Fragment, useEffect, useState } from \"react\"\nimport { API_PATH } from \"screens/apiPaths\";\nimport { getCurrentDateInString } from \"screens/utils/utils\";\nimport { errorNoti } from \"utils/notification\";\nimport { useHistory } from \"react-router\";\nimport { useRouteMatch } from \"react-router-dom\";\n\nconst DeliveryTripListing = () => {\n  const [userLoginId, setUserLoginId] = useState(null);\n  const [shipmentList, setShipmentList] = useState([]);\n  const [selectedShipmentId, setSelectedShipmentId] = useState(null);\n  const [tripTableData, setTripTableData] = useState([]);\n  const now = getCurrentDateInString();\n\n  const history = useHistory();\n  const { path } = useRouteMatch();\n  \n  useEffect(() => {\n    request(\n      \"get\",\n      API_PATH.GET_USER_LOGIN_ID,\n      (res) => {\n        setUserLoginId(res.data);\n      }\n    );\n\n    request(\n      \"get\",\n      API_PATH.DELIVERY_MANAGER_SHIPMENT,\n      (res) => {\n        setShipmentList(res.data);\n      }\n    );\n    \n    request(\n      \"get\",\n      API_PATH.DELIVERY_MANAGER_DELIVERY_TRIP,\n      (res) => {\n        setTripTableData(res.data);\n      }\n    )\n  }, []);\n\n  return <Fragment>\n    <StandardTable\n      title=\"Danh sách các chuyến giao hàng\"\n      hideCommandBar={true}\n      columns={[\n        { title: \"Mã chuyến\", field: \"deliveryTripId\",\n          editComponent: props => <TextField InputProps={{readOnly: true}}/> },\n        { title: \"Ngày tạo\", field: \"createdStamp\",\n          editComponent: props => <TextField value={now}/> },\n        { title: \"Người tạo\", field: \"createdBy\", \n          editComponent: props => <TextField value={userLoginId}/> }, \n        { title: \"Đợt giao hàng\", field: \"shipmentId\",\n          editComponent: props => <ShipmentDropDown shipmentList={shipmentList}\n            setSelectedShipmentId={setSelectedShipmentId} />}\n      ]}\n      data={tripTableData}\n      editable={{\n        onRowAdd: newData => new Promise((resolve, reject) => {\n          setTimeout(() => {\n            request(\n              \"put\",\n              API_PATH.DELIVERY_MANAGER_DELIVERY_TRIP,\n              (res) => {\n                if (res.status == 200) {\n                  const adder = {\n                    deliveryTripId: res.data.deliveryTripId,\n                    createdStamp: now,\n                    createdBy: userLoginId,\n                    shipmentId: selectedShipmentId\n                  };\n                  setTripTableData([...tripTableData, adder]);\n                }\n              },\n              {\n                500: () => errorNoti(\"Có lỗi xảy ra. Vui lòng thử lại sau\")\n              },\n              {\n                shipmentId: selectedShipmentId\n              }\n            )\n            resolve();\n          })\n        }),\n        onRowDelete: oldData => new Promise((resolve, reject) => {\n          setTimeout(() => {\n            console.log(\"Old data => \", oldData);\n            resolve();\n          })\n        })\n      }}\n      onRowClick={(event, rowData) => {\n        window.location.href = `${path}/${rowData.deliveryTripId}`;\n      }}\n      options={{\n        selection: false,\n        pageSize: 5,\n        search: true,\n        sorting: true,\n      }}\n    />\n  </Fragment>\n}\n\nexport default DeliveryTripListing;","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/shipment/deliveryTripDetail.js",["510","511","512","513","514","515","516","517","518","519"],"import AddIcon from '@mui/icons-material/Add';\nimport { Box, Button, Grid, MenuItem, Modal, Select, TextField, Typography } from \"@mui/material\";\nimport { request } from \"api\";\nimport { WarehouseDropDown } from \"components/table/DropDown\";\nimport StandardTable from \"components/table/StandardTable\";\nimport { Fragment, useEffect, useState } from \"react\";\nimport { API_PATH } from \"screens/apiPaths\";\nimport useStyles from 'screens/styles.js';\nimport { errorNoti, successNoti } from 'utils/notification';\n\nconst DeliveryTripDetail = ( props ) => {\n  const tripId = props.match?.params?.id;\n  const classes = useStyles();\n\n  const [tripInfo, setTripInfo] = useState({});\n  const [deliveryPersons, setDeliveryPersons] = useState([]);\n  const [warehouseList, setWarehouseList] = useState([]);\n  const [deliveryItemsTableData, setDeliveryItemsTableData] = useState([]);\n\n  const [selectedDeliveryPersonId, setSelectedDeliveryPersonId] = useState(null);\n  const [selectedWarehouseId, setSelectedWarehouseId] = useState(null);\n  const [selectedWarehouseName, setSelectedWarehouseName] = useState(null);\n\n  const [isShowAssignedItemsModal, setShowAssignedItemsModal] = useState(false);\n  const [selectedAssignedItem, setSelectedAssignItem] = useState({});\n  const [isShowQuantityModal, setShowQuantityModal] = useState(false);\n  const [maxQuantity, setMaxQuantity] = useState(0);\n  const [selectedQuantity, setSelectedQuantity] = useState(0);\n  const [createdItemsTableData, setCreatedItemsTableData] = useState([]);\n  const [maxSequence, setMaxSequence] = useState(0);\n\n  // chọn danh sách sản phẩm (phải cùng một warehouse)\n  // nếu danh sách sản phẩm của delivery trip khác rỗng -> không thể update warehouse\n\n  useEffect(() => {\n    request(\n      \"get\",\n      `${API_PATH.DELIVERY_MANAGER_DELIVERY_TRIP}/${tripId}`,\n      (res) => {\n        setTripInfo(res.data);\n        setMaxSequence(res.data.totalLocations);\n        setSelectedWarehouseId(res.data.warehouseId);\n      }\n    );\n\n    request(\n      \"get\",\n      API_PATH.DELIVERY_MANAGER_DELIVERY_PERSON,\n      (res) => {\n        setDeliveryPersons(res.data);\n      }\n    );\n\n    request(\n      \"get\",\n      API_PATH.WAREHOUSE,\n      (res) => {\n        setWarehouseList(res.data);\n      }\n    );\n\n    request(\n      \"get\",\n      API_PATH.DELIVERY_MANAGER_ASSIGN_ORDER_ITEM,\n      (res) => {\n        setCreatedItemsTableData(res.data);\n      }\n    );\n  }, []);\n\n  useEffect(() => {\n    // filter created assigned items table data\n    // that match with selected warehouse id\n    if (selectedWarehouseId != null) {\n      const filterTableData = createdItemsTableData.filter(\n        item => item.warehouseId == selectedWarehouseId);\n      setCreatedItemsTableData(filterTableData);\n    }\n  }, [selectedWarehouseId]);\n\n  const saveQuantityButtonHandle = () => {\n    setShowQuantityModal(false);\n    setShowAssignedItemsModal(false);\n    const newDeliveryItem = {\n      ...selectedAssignedItem,\n      quantity: selectedQuantity,\n      sequence: maxSequence + 1\n    };\n    var updated = false;\n    for (var i = 0; i < deliveryItemsTableData.length; i++) {\n      if (deliveryItemsTableData[i].assignOrderItemId \n        == newDeliveryItem.assignOrderItemId) {\n          var localDeliveryItem = deliveryItemsTableData[i];\n          const newQuantity = parseInt(localDeliveryItem.quantity) + parseInt(newDeliveryItem.quantity);\n          localDeliveryItem.quantity = newQuantity;\n          var newDeliveryItemsTableData = deliveryItemsTableData;\n          newDeliveryItemsTableData.splice(i, 1);\n          setDeliveryItemsTableData([...newDeliveryItemsTableData, localDeliveryItem]);\n          updated = true;\n          break;\n        }\n    }\n    if (!updated) {\n      setDeliveryItemsTableData([...deliveryItemsTableData, newDeliveryItem]);\n      setMaxSequence(maxSequence + 1);\n    }\n    setSelectedWarehouseId(selectedAssignedItem.warehouseId);\n    setSelectedWarehouseName(selectedAssignedItem.warehouseName);\n    setSelectedQuantity(0);\n\n    // update created assign items table data \n    // substract quantity \n    // or remove item if quantity if needed \n    var localSelectedItem = selectedAssignedItem;\n    const newQuantity = maxQuantity - selectedQuantity;\n    localSelectedItem.quantity = newQuantity;\n    var index = -1;\n    for (var i = 0 ; i < createdItemsTableData.length; i++) {\n      if (createdItemsTableData[i].assignOrderItemId \n        == selectedAssignedItem.assignOrderItemId) {\n        index = i;\n        break;\n      }\n    }\n    var newCreatedItemsTableData = createdItemsTableData;\n    newCreatedItemsTableData.splice(index, 1);\n    if (newQuantity > 0) {\n      setCreatedItemsTableData([...newCreatedItemsTableData, localSelectedItem]);\n    } else {\n      setCreatedItemsTableData(newCreatedItemsTableData);\n    }\n  }\n\n  const saveDeliveryTripButtonHandle = () => {\n    request(\n      \"put\",\n      API_PATH.DELIVERY_MANAGER_DELIVERY_TRIP,\n      (res) => {\n        if (res.status == 200) {\n          setTripInfo(res.data);\n          successNoti(\"Lưu thông tin chuyến giao hàng thành công\");\n        }\n      },\n      {\n        500: () => errorNoti(\"Có lỗi xảy ra. Vui lòng thử lại sau\")\n      },\n      {\n        ...tripInfo,\n        warehouseId: selectedWarehouseId,\n        totalLocations: maxSequence,\n        items: [\n          ...deliveryItemsTableData\n        ]\n      }\n    )\n  }\n\n  return <Fragment>\n\n    <Modal open={isShowAssignedItemsModal}\n      onClose={() => setShowAssignedItemsModal(!isShowAssignedItemsModal)}\n      aria-labelledby=\"modal-modal-title\" \n      aria-describedby=\"modal-modal-description\"\n    >\n      <Box sx={{\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        width: '75%',\n        height: '70%',\n        transform: 'translate(-50%, -50%)',\n        bgcolor: 'background.paper',\n        border: '2px solid #000',\n        boxShadow: 24,\n        p: 4,\n      }}>\n        <StandardTable \n          title='Thêm sản phẩm vào chuyến giao hàng'\n          hideCommandBar={true}\n          columns={[\n            { title: \"Sản phẩm\", field: \"productName\" },\n            { title: \"Số lượng\", field: \"quantity\" },\n            { title: \"Kệ hàng\", field: \"bayCode\" },\n            { title: \"Lô\", field: \"lotId\" },\n            { title: \"Kho\", field: \"warehouseName\" },\n            { title: \"Địa chỉ nhận hàng\", field: \"customerAddressName\" }\n          ]}\n          options={{\n            selection: false,\n            pageSize: 5,\n            search: true,\n            sorting: true,\n          }}\n          data={createdItemsTableData}\n          onRowClick={(event, rowData) => {\n            setMaxQuantity(rowData?.quantity)\n            setShowQuantityModal(true);\n            setSelectedAssignItem(rowData);\n          }}\n        />\n      </Box>\n    </Modal>\n\n    <Modal\n      open={isShowQuantityModal}\n      onClose={() => setShowQuantityModal(!isShowQuantityModal)}\n      aria-labelledby=\"modal-modal-title\" \n      aria-describedby=\"modal-modal-description\">\n        <Box sx={{\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          width: '25%',\n          height: '25%',\n          transform: 'translate(-50%, -50%)',\n          bgcolor: 'background.paper',\n          border: '2px solid #000',\n          boxShadow: 24,\n          p: 4,\n        }}>\n          <Typography variant=\"h5\">\n            Số lượng sản phẩm muốn thêm\n          </Typography>\n          <TextField \n            value={selectedQuantity}\n            onChange={(e) => setSelectedQuantity(e.target.value)}\n            type=\"number\"\n            InputLabelProps={{\n              shrink: true,\n            }}\n            InputProps={{\n              inputProps: { \n                  max: maxQuantity, min: 1\n              }\n            }}\n          />\n          <Button variant=\"contained\" className={classes.addButton} \n            type=\"submit\" onClick={saveQuantityButtonHandle}>Lưu</Button>\n        </Box>\n    </Modal>\n\n    <Box>\n      <Grid container justifyContent=\"space-between\" \n        className={classes.headerBox} >\n        <Grid>\n          <Typography variant=\"h5\">\n            Thông tin chuyến giao hàng</Typography>\n        </Grid>\n\n        <Grid className={classes.buttonWrap}>\n          <Button variant=\"contained\" className={classes.addButton} \n            type=\"submit\" onClick={saveDeliveryTripButtonHandle} >Lưu</Button>\n        </Grid>\n      </Grid>\n    </Box>\n\n    <Box className={classes.bodyBox}>\n      <Box className={classes.formWrap}>\n        <Grid container spacing={2}>\n          <Grid item xs={6}>\n            <Box className={classes.inputWrap}>\n              <Box className={classes.labelInput}>\n                Ngày tạo chuyến giao hàng\n              </Box>\n              <TextField\n                fullWidth\n                variant=\"outlined\"\n                size=\"small\"\n                value={tripInfo?.createdStamp}\n                InputProps={{\n                  readOnly: true,\n                }}\n              />\n            </Box>\n          </Grid>\n\n          <Grid item xs={6}>\n            <Box className={classes.inputWrap}>\n              <Box className={classes.labelInput}>\n                Ngày cập nhật gần nhất\n              </Box>\n              <TextField\n                fullWidth\n                variant=\"outlined\"\n                size=\"small\"\n                value={tripInfo?.lastUpdatedStamp}\n                InputProps={{\n                  readOnly: true,\n                }}\n              />\n            </Box>\n          </Grid>\n\n          <Grid item xs={6}>\n            <Box className={classes.inputWrap}>\n              <Box className={classes.labelInput}>\n                Người tạo \n              </Box>\n              <TextField\n                fullWidth\n                variant=\"outlined\"\n                size=\"small\"\n                value={tripInfo?.createdBy}\n                InputProps={{\n                  readOnly: true,\n                }}\n              />\n            </Box>\n          </Grid>\n\n          <Grid item xs={6}>\n            <Box className={classes.inputWrap}>\n              <Box className={classes.labelInput}>\n                Nhân viên giao hàng \n              </Box>\n              <Select onChange={(e) => setSelectedDeliveryPersonId(e.target.value)}>\n                {\n                  deliveryPersons.length > 0 &&\n                  deliveryPersons.map(person => \n                    <MenuItem key={person.deliveryPersonId}\n                      value={person.fullName}></MenuItem>)\n                }\n              </Select>\n            </Box>\n          </Grid>\n\n          <Grid item xs={6}>\n            <Box className={classes.inputWrap}>\n              <Box className={classes.labelInput}>\n                Tổng quãng đường \n              </Box>\n              <TextField\n                fullWidth\n                variant=\"outlined\"\n                size=\"small\"\n                value={tripInfo?.distance}\n                InputProps={{\n                  readOnly: true,\n                }}\n              />\n            </Box>\n          </Grid>\n\n          <Grid item xs={6}>\n            <Box className={classes.inputWrap}>\n              <Box className={classes.labelInput}>\n                Số điểm cần giao hàng \n              </Box>\n              <TextField\n                fullWidth\n                variant=\"outlined\"\n                size=\"small\"\n                value={maxSequence}\n                InputProps={{\n                  readOnly: true,\n                }}\n              />\n            </Box>\n          </Grid>\n\n          <Grid item xs={6}>\n            <Box className={classes.inputWrap}>\n              <Box className={classes.labelInput}>\n                Kho lấy hàng \n              </Box>\n              {/* <Select onChange={(e, v) => {\n                  setSelectedWarehouseId(e.target.value);\n                  setSelectedWarehouseName(v?.props?.children);\n                }}\n                defaultValue={\"\"}\n                value={selectedWarehouseName}>\n              {\n                warehouseList.length > 0 &&\n                warehouseList.map(warehouse => \n                  <MenuItem key={warehouse.id} value={warehouse.id}>{warehouse.name}</MenuItem>)\n              }\n            </Select> */}\n              <TextField\n                fullWidth\n                variant=\"outlined\"\n                size=\"small\"\n                value={selectedWarehouseName}\n                InputProps={{\n                  readOnly: true,\n                }}\n              />\n            </Box>\n          </Grid>\n        </Grid>\n      </Box>\n\n      <StandardTable\n        title=\"Danh sách sản phẩm\"\n        hideCommandBar={true}\n        columns={[\n          { title: \"Số thứ tự giao hàng\", field: \"sequence\" },\n          { title: \"Sản phẩm\", field: \"productName\" },\n          { title: \"Số lượng\", field: \"quantity\" },\n          { title: \"Kệ hàng\", field: \"bayCode\" },\n          { title: \"Lô\", field: \"lotId\" },\n          { title: \"Kho\", field: \"warehouseName\" },\n          { title: \"Địa chỉ nhận hàng\", field: \"customerAddressName\" }\n        ]}\n        actions={[\n          {\n            icon: () => <AddIcon onClick={() => setShowAssignedItemsModal(true)} />,\n            tooltip: \"Thêm sản phẩm vào chuyến giao hàng\",\n            isFreeAction: true\n          }\n        ]}\n        options={{\n          selection: false,\n          pageSize: 5,\n          search: true,\n          sorting: true,\n        }}\n        data={deliveryItemsTableData}\n      />\n    </Box>\n  </Fragment>\n}\n\nexport default DeliveryTripDetail;","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/shipment/shipmentDetail.js",["520"],"import { Box, Grid, TextField, Typography } from \"@mui/material\";\nimport { request } from \"api\";\nimport StandardTable from \"components/table/StandardTable\";\nimport { Fragment, useEffect, useState } from \"react\";\nimport { API_PATH } from \"screens/apiPaths\";\nimport useStyles from 'screens/styles.js';\nimport { convertTimeStampToDate } from \"screens/utils/utils\";\n\nconst ShipmentDetail = ( props ) => {\n  const shipmentId = props.match?.params?.id;\n  const classes = useStyles();\n  const [shipmentInfo, setShipmentInfo] = useState({});\n  const [tripTableData, setTripTableData] = useState([]);\n\n  useEffect(() => {\n    request(\n      \"get\",\n      `${API_PATH.DELIVERY_MANAGER_SHIPMENT}/${shipmentId}`,\n      (res) => {\n        setShipmentInfo(res.data);\n        setTripTableData(res.data.trips);\n      }\n    );\n  }, []);\n\n  return <Fragment>\n    <Box>\n      <Grid container justifyContent=\"space-between\" \n        className={classes.headerBox} >\n        <Grid>\n          <Typography variant=\"h5\">\n            Thông tin đơn hàng</Typography>\n        </Grid>\n      </Grid>\n    </Box>\n\n    <Box className={classes.bodyBox}>\n      <Box className={classes.formWrap}>\n        <Grid container spacing={2}>\n          <Grid item xs={6}>\n            <Box className={classes.inputWrap}>\n              <Box className={classes.labelInput}>\n                Ngày tạo đợt giao hàng\n              </Box>\n              <TextField\n                fullWidth\n                variant=\"outlined\"\n                size=\"small\"\n                value={shipmentInfo?.createdStamp}\n                InputProps={{\n                  readOnly: true,\n                }}\n              />\n            </Box>\n          </Grid>\n          <Grid item xs={6}>\n            <Box className={classes.inputWrap}>\n              <Box className={classes.labelInput}>\n                Ngày cập nhật gần nhất\n              </Box>\n              <TextField\n                fullWidth\n                variant=\"outlined\"\n                size=\"small\"\n                value={shipmentInfo?.lastUpdatedStamp}\n                InputProps={{\n                  readOnly: true,\n                }}\n              />\n            </Box>\n          </Grid>\n\n          <Grid item xs={6}>\n            <Box className={classes.inputWrap}>\n              <Box className={classes.labelInput}>\n                Người tạo \n              </Box>\n              <TextField\n                fullWidth\n                variant=\"outlined\"\n                size=\"small\"\n                value={shipmentInfo?.createdBy}\n                InputProps={{\n                  readOnly: true,\n                }}\n              />\n            </Box>\n          </Grid>\n          <Grid item xs={6}>\n            <Box className={classes.inputWrap}>\n              <Box className={classes.labelInput}>\n                Ngày thực hiện giao hàng (dự kiến) \n              </Box>\n              <TextField\n                fullWidth\n                variant=\"outlined\"\n                size=\"small\"\n                value={convertTimeStampToDate(shipmentInfo?.expectedDeliveryStamp)}\n                InputProps={{\n                  readOnly: true,\n                }}\n              />\n            </Box>\n          </Grid>\n        </Grid>\n      </Box>\n\n      <StandardTable \n        hideCommandBar={true}\n        title=\"Danh sách các chuyến giao hàng\"\n        options={{\n          selection: false,\n          pageSize: 5,\n          search: true,\n          sorting: true,\n        }}\n        data={tripTableData}\n        columns={[\n          { title: \"Người giao hàng\", field: \"deliveryPersonName\" },\n          { title: \"Xe giao hàng\", field: \"vehicleId\" },\n          { title: \"Quãng đường\", field: \"distance\" },\n          { title: \"Tổng khối lượng hàng\", field: \"totalWeight\" },\n          { title: \"Số điểm giao hàng\", field: \"totalLocations\" }\n        ]}\n      />\n    </Box>\n  </Fragment>\n};\n\nexport default ShipmentDetail;","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/shipment/shipmentListing.js",["521","522"],"import { TextField } from \"@mui/material\";\nimport { request } from \"api\";\nimport StandardTable from \"components/table/StandardTable\"\nimport { Fragment, useEffect, useState } from \"react\"\nimport { API_PATH } from \"screens/apiPaths\";\nimport { convertTimeStampToDate, getCurrentDateInString } from \"screens/utils/utils\";\nimport { errorNoti, successNoti } from \"utils/notification\";\nimport { useHistory } from \"react-router\";\nimport { useRouteMatch } from \"react-router-dom\";\n\nconst ShipmentListing = () => {\n  const history = useHistory();\n  const { path } = useRouteMatch();\n\n  const [shipmentTableData, setShipmentTableData] = useState([]);\n  const [numOrder, setNumOrder] = useState(1);\n  const [userLoginId, setUserLoginId] = useState(null);\n  const now = getCurrentDateInString();\n  const [expectDeliveryDate, setExpectDeliveryDate] = useState(null);\n\n  useEffect(() => {\n    request(\n      \"get\",\n      API_PATH.DELIVERY_MANAGER_SHIPMENT,\n      (res) => {\n        var data = res.data;\n        for (var i = 0; i < data?.length; i++) {\n          data[i].numOrder = i + 1;\n          data[i].expectedDeliveryStamp = convertTimeStampToDate(data[i].expectedDeliveryStamp);\n        }\n        setShipmentTableData(res.data);\n        setNumOrder(data.length + 1);\n      }\n    );\n\n    request(\n      \"get\",\n      API_PATH.GET_USER_LOGIN_ID,\n      (res) => {\n        setUserLoginId(res.data);\n      }\n    )\n  }, []);\n\n  return <Fragment>\n    <StandardTable\n      hideCommandBar={true}\n      title=\"Danh sách chuyến giao hàng\"\n      data={shipmentTableData}\n      columns={[\n        { title: \"Số thứ tự\", field: \"numOrder\", editComponent: props => <TextField value={numOrder}/> },\n        { title: \"Mã chuyến\", field: \"shipmentId\", editComponent: props => <TextField InputProps={{readOnly: true}}/> },\n        { title: \"Ngày tạo\", field: \"createdStamp\", editComponent: props => <TextField value={now}/> },\n        { title: \"Người tạo\", field: \"createdBy\", editComponent: props => <TextField value={userLoginId}/> }, \n        { title: \"Ngày giao hàng dự kiến\", field: \"expectedDeliveryStamp\", \n          editComponent: props => <TextField type=\"date\" value={expectDeliveryDate} \n          onChange={(e) => setExpectDeliveryDate(e.target.value)} /> }\n      ]}\n      options={{\n        selection: false,\n        pageSize: 5,\n        search: true,\n        sorting: true,\n      }}\n      onRowClick={(event, rowData) => {\n        window.location.href = `${path}/${rowData.shipmentId}`;\n      }}\n      editable={{\n        onRowAdd: newData => new Promise((resolve, reject) => {\n          setTimeout(() => {\n            request(\n              \"put\",\n              API_PATH.DELIVERY_MANAGER_SHIPMENT,\n              (res) => {\n                if (res.status == 200) {\n                  successNoti(\"Thêm mới đợt giao hàng thành công\");\n                  const adder = {\n                    numOrder: numOrder,\n                    createdStamp: now,\n                    createdBy: userLoginId,\n                    expectedDeliveryStamp: convertTimeStampToDate(expectDeliveryDate),\n                    shipmentId: res.data\n                  };\n                  console.log(\"Adder => \", adder);\n                  setShipmentTableData([...shipmentTableData, adder]);\n                  resolve();\n                }\n              },\n              {\n                500: () => errorNoti(\"Có lỗi xảy ra. Vui lòng thử lại sau\")\n              },\n              {\n                expectedDeliveryStamp: expectDeliveryDate\n              }\n            )\n          });\n        }),\n        onRowDelete: oldData => new Promise((resolve, reject) => {\n          setTimeout(() => {\n            console.log(\"Old data => \", oldData);\n          })\n        })\n      }}\n    />\n  </Fragment>\n}\n\nexport default ShipmentListing;","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/screens/deliveryperson/deliveryPersonManagement.js",["523","524","525"],"import { request } from \"api\";\nimport StandardTable from \"components/table/StandardTable\"\nimport { Fragment, useEffect, useState } from \"react\"\nimport { API_PATH } from \"screens/apiPaths\";\nimport { errorNoti, successNoti } from \"utils/notification\";\n\nconst DeliveryPersonManagement = () => {\n  const [deliveryPersonsTableData, setDeliveryPersonsTableData] = useState([]);\n  \n  useEffect(() => {\n    request(\n      \"get\",\n      API_PATH.DELIVERY_MANAGER_DELIVERY_PERSON,\n      (res) => {\n        setDeliveryPersonsTableData(res.data);\n      }\n    )\n  }, []);\n\n  return <Fragment>\n    <StandardTable \n      hideCommandBar={true}\n      title=\"Quản lý nhân viên giao hàng\"\n      columns={[\n        { title: \"Tên\", field: \"fullName\" },\n        { title: \"Số điện thoại\", field: \"phoneNumber\" }\n      ]}\n      data={deliveryPersonsTableData}\n      options={{\n        selection: false,\n        pageSize: 5,\n        search: true,\n        sorting: true,\n      }}\n      editable={{\n        onRowAdd: newData => new Promise((resolve, reject) => {\n          setTimeout(() => {\n            console.log(\"New data => \", newData);\n            if (newData.fullName == null || newData.fullName == undefined) {\n              errorNoti(\"Vui lòng nhập tên người giao hàng\");\n              reject();\n            } else {\n              request(\n                \"put\",\n                API_PATH.DELIVERY_MANAGER_DELIVERY_PERSON,\n                (res) => {\n                  if (res.status == 200) {\n                    const newTableData = res.data;\n                    successNoti(\"Thêm mới nhân viên thành công\");\n                    setDeliveryPersonsTableData([...deliveryPersonsTableData, newTableData]);\n                    resolve();\n                  }\n                },\n                {\n                  500: () => errorNoti(\"Có lỗi xảy ra khi thêm mới nhân viên\")\n                },\n                {\n                  \"fullName\": newData.fullName,\n                  \"phoneNumber\": newData.phoneNumber\n                }\n              );\n            }\n          });\n        }),\n        onRowDelete: oldData => new Promise((resolve, reject) => {\n          setTimeout(() => {\n            request(\n              \"delete\",\n              `${API_PATH.DELIVERY_MANAGER_DELIVERY_PERSON}/${oldData.deliveryPersonId}`,\n              (res) => {\n                if (res.status == 200) {\n                  successNoti(\"Xóa nhân viên thành công\");\n                  const dataDelete = [...deliveryPersonsTableData];\n                  const index = oldData.tableData.id;\n                  dataDelete.splice(index, 1);\n                  setDeliveryPersonsTableData([...dataDelete]);\n                  resolve();\n                }\n              },\n              {\n                500: () => errorNoti(\"Có lỗi xảy ra khi thêm mới nhân viên\")\n              }\n            )\n          })\n        })\n      }}\n    />\n  </Fragment>\n};\n\nexport default DeliveryPersonManagement;","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/utils/MenuUtils.js",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/layout/account/AccountMenu.jsx",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/layout/notification/NotificationMenu.jsx",["526","527","528"],"import { Box, List, Typography } from \"@mui/material\";\nimport ClickAwayListener from \"@mui/material/ClickAwayListener\";\nimport Grow from \"@mui/material/Grow\";\nimport MenuList from \"@mui/material/MenuList\";\nimport Paper from \"@mui/material/Paper\";\nimport Popper from \"@mui/material/Popper\";\nimport { ReactComponent as EmptyNotificationIcon } from \"assets/icons/undraw_happy_announcement_ac67.svg\";\nimport { OverlayScrollbarsComponent } from \"overlayscrollbars-react\";\nimport \"overlayscrollbars/css/OverlayScrollbars.css\";\nimport React, { useEffect } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { useLocation } from \"react-router\";\nimport { notificationMenuWidth } from \"./ActionsWithNotificationButton\";\nimport Notification from \"./Notification\";\nimport NotificationTitle from \"./NotificationTitle\";\n\nconst styles = {\n  paper: {\n    overflowY: \"hidden\",\n    // maxHeight: `calc(100vh - 80px)`,\n    height: `calc(100vh - 80px)`,\n    width: notificationMenuWidth,\n    borderRadius: 2,\n    boxShadow:\n      \"0 12px 28px 0 rgba(0, 0, 0, 0.2), 0 2px 4px 0 rgba(0, 0, 0, 0.1), inset 0 0 0 1px rgba(255, 255, 255, 0.5)\",\n  },\n  notificationsLoadingList: {\n    \"& div:first-of-type\": {\n      \"& div\": {\n        paddingTop: 0,\n      },\n    },\n  },\n};\n\nconst NotificationsLoading = React.memo(({ quantity }) => {\n  const notifications = [];\n\n  for (let i = 0; i < quantity; i++) {\n    notifications.push(<Notification key={i} />);\n  }\n\n  return notifications;\n});\n\nexport default function NotificationMenu({\n  open,\n  anchorRef,\n  notifications,\n  next,\n  hasMore,\n}) {\n  const { pathname } = useLocation();\n\n  //\n  const [displayInfiniteScroll, setDisplayInfiniteScroll] =\n    React.useState(false);\n\n  // Use useCallback to prevent Notification rerender because callback is recreated.\n  const handleClose = React.useCallback((event) => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n\n    open.set(false);\n  }, []);\n\n  function handleListKeyDown(event) {\n    if (event.key === \"Tab\") {\n      event.preventDefault();\n      open.set(false);\n    }\n  }\n\n  // This effect is used to make sure the OverlayScrollbarsComponent already exists in the DOM\n  // before rendering InfiniteScroll\n  useEffect(() => {\n    if (open.get() === true) setDisplayInfiniteScroll(true);\n    else setDisplayInfiniteScroll(false);\n  }, [open.get()]);\n\n  return (\n    <Popper\n      transition\n      disablePortal\n      open={open.get()}\n      anchorEl={anchorRef.current}\n      modifiers={[\n        {\n          name: \"flip\",\n          enabled: false,\n        },\n        {\n          name: \"preventOverflow\",\n          enabled: true,\n          options: {\n            padding: 36,\n            boundary: \"scrollParent\",\n          },\n        },\n      ]}\n    >\n      {({ TransitionProps, placement }) => (\n        <Grow\n          {...TransitionProps}\n          style={{\n            transformOrigin: placement.startsWith(\"bottom\")\n              ? \"center top\"\n              : \"center bottom\",\n          }}\n        >\n          <Paper elevation={0} sx={styles.paper}>\n            <ClickAwayListener onClickAway={handleClose}>\n              <MenuList\n                autoFocusItem={open.get()}\n                id=\"menu-list-grow\"\n                onKeyDown={handleListKeyDown}\n                style={{ padding: 0 }}\n              >\n                <OverlayScrollbarsComponent\n                  style={{\n                    width: notificationMenuWidth,\n                    maxHeight: `calc(100vh - 80px)`,\n                    // overscrollBehaviorY: \"none\", // To prevent tag <main> be scrolled when menu'scrollbar reach end\n                  }}\n                  options={{ scrollbars: { autoHide: \"scroll\" } }}\n                >\n                  {notifications.get() ? (\n                    <>\n                      <NotificationTitle\n                        showActionsMenu={notifications.length > 0}\n                      />\n                      {notifications.length > 0 ? (\n                        displayInfiniteScroll && (\n                          <List disablePadding aria-label=\"notifications list\">\n                            <InfiniteScroll\n                              dataLength={notifications.get().length}\n                              next={next}\n                              hasMore={hasMore.get()}\n                              scrollThreshold={0.85}\n                              loader={<NotificationsLoading quantity={2} />}\n                              scrollableTarget={document.querySelector(\n                                \".os-viewport\"\n                              )}\n                            >\n                              {notifications.map((notification) => (\n                                <Notification\n                                  key={notification.id.get()}\n                                  notification={notification}\n                                  currentURL={pathname}\n                                  handleClose={handleClose}\n                                />\n                              ))}\n                            </InfiniteScroll>\n                          </List>\n                        )\n                      ) : (\n                        // Empty notification.\n                        <Box\n                          display=\"flex\"\n                          alignItems=\"center\"\n                          flexDirection=\"column\"\n                          pl={4}\n                          pr={4}\n                          pb={3}\n                        >\n                          <EmptyNotificationIcon width={225} height={200} />\n                          <Typography style={{ textAlign: \"center\" }}>\n                            Đừng bỏ lỡ những thông tin quan trọng. Khi có thông\n                            báo mới, chúng sẽ hiển thị tại đây\n                          </Typography>\n                        </Box>\n                      )}\n                    </>\n                  ) : (\n                    // Notifications loading.\n                    <div>\n                      <NotificationTitle />\n                      <List\n                        disablePadding\n                        aria-label=\"notifications list\"\n                        sx={styles.notificationsLoadingList}\n                      >\n                        <NotificationsLoading quantity={10} />\n                      </List>\n                    </div>\n                  )}\n                </OverlayScrollbarsComponent>\n              </MenuList>\n            </ClickAwayListener>\n          </Paper>\n        </Grow>\n      )}\n    </Popper>\n  );\n}\n\n// NotificationMenu.whyDidYouRender = {\n//   logOnDifferentValues: true,\n// };\n","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/components/button/commandBarButton.js",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/utils/MaterialTableUtils.jsx",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/layout/account/FeedbackDialog.jsx",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/layout/notification/NotificationTitle.jsx",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/layout/notification/Notification.jsx",["529"],"import { useState } from \"@hookstate/core\";\nimport {\n  Avatar,\n  Box,\n  ListItemAvatar,\n  Skeleton,\n  Typography,\n} from \"@mui/material\";\nimport { grey } from \"@mui/material/colors\";\nimport { styled } from \"@mui/material/styles\";\nimport { request } from \"api\";\nimport React from \"react\";\nimport { useNotificationState } from \"state/NotificationState\";\nimport ListItemLink from \"../sidebar/ListItemLink\";\nimport NotificationReadIcon from \"./NotificationReadIcon\";\n\nconst ContentContainer = styled(\"div\")({\n  padding: \"0px 8px\",\n  borderRadius: 8,\n  \"&:hover\": {\n    backgroundColor: grey[200],\n  },\n});\n\nconst styles = {\n  itemLink: (theme) => ({\n    padding: \"0px 8px\",\n    color: theme.palette.text.primary,\n  }),\n  itemAvatar: {\n    marginRight: 1.5,\n    marginBottom: 1,\n    marginTop: 1,\n  },\n  avatar: {\n    width: 56,\n    height: 56,\n  },\n};\n\nconst ONE_MINUTE = 60000;\nconst ONE_HOUR = 60 * ONE_MINUTE;\nconst ONE_DAY = 24 * ONE_HOUR;\nconst ONE_WEEK = 7 * ONE_DAY;\n\nconst formatTime = (createdTime) => {\n  const now = new Date().getTime();\n  const time = new Date(createdTime).getTime();\n\n  const duration = now - time;\n  let convertDuration = (duration / ONE_WEEK) | 0;\n\n  if (convertDuration > 0) {\n    return `${convertDuration} tuần trước`;\n  } else {\n    convertDuration = (duration / ONE_DAY) | 0;\n\n    if (convertDuration > 0) {\n      return `${convertDuration} ngày trước`;\n    } else {\n      convertDuration = (duration / ONE_HOUR) | 0;\n\n      if (convertDuration > 0) {\n        return `${convertDuration} giờ trước`;\n      } else {\n        convertDuration = (duration / ONE_MINUTE) | 0;\n        convertDuration = convertDuration > 1 ? convertDuration : 1;\n\n        return `${convertDuration} phút trước`;\n      }\n    }\n  }\n};\n\nexport function getRandomIntInclusive(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive\n}\n\nconst STATUS_NOTIFICATION_CREATED = \"NOTIFICATION_CREATED\";\nexport const STATUS_NOTIFICATION_READ = \"NOTIFICATION_READ\";\n\nfunction Notification(props) {\n  const { numUnRead } = useNotificationState();\n  const { handleClose, currentURL, notification } = props;\n\n  //\n  const {\n    id,\n    url,\n    content,\n    time,\n    read,\n    avatar: avatarContent,\n    avatarColor,\n  } = useState(notification);\n\n  const avatar = (\n    <Avatar\n      alt=\"notification\"\n      sx={styles.avatar}\n      style={{\n        backgroundColor: avatarColor?.get(),\n      }}\n    >\n      {avatarContent?.get()\n        ? avatarContent.get().substring(0, 2).toLocaleUpperCase()\n        : \"N\"}\n    </Avatar>\n  );\n\n  // Temporary\n  const closeIfOnSameSite = (e) => {\n    // TODO: consider case URL = \"\"\n    if (currentURL === url.get()) {\n      // e.preventDefault();\n      handleClose(e);\n    }\n  };\n\n  //\n  const onClick = (e) => {\n    if (!read.get()) {\n      request(\n        \"patch\",\n        `/notification/${id.get()}/status`,\n        (res) => {\n          if (!read.get()) {\n            read.set(true);\n            numUnRead.set(numUnRead.get() - 1);\n            closeIfOnSameSite(e);\n          }\n        },\n        { onError: () => closeIfOnSameSite(e), 401: () => {} },\n        { status: STATUS_NOTIFICATION_READ }\n      );\n    } else {\n      closeIfOnSameSite(e);\n    }\n  };\n\n  return id?.get() ? (\n    <ListItemLink\n      disableGutters\n      sx={styles.itemLink}\n      onClick={onClick}\n      to={url.get()}\n    >\n      <ContentContainer\n        style={{ display: \"flex\", alignItems: \"flex-start\", width: \"100%\" }}\n      >\n        <ListItemAvatar sx={styles.itemAvatar}>{avatar}</ListItemAvatar>\n\n        {/* {icon ? <ListItemIcon>{icon}</ListItemIcon> : null} */}\n        <div\n          style={{\n            padding: \"6px 0px 10px\",\n            position: \"relative\",\n            display: \"flex\",\n            flexGrow: 1,\n          }}\n        >\n          <div\n            style={{\n              position: \"relative\",\n              flexGrow: 1,\n            }}\n          >\n            <Typography\n              sx={{\n                marginBottom: 0.625,\n                fontSize: \".9375rem\",\n                color: read.get() ? \"inherit\" : \"#050505\",\n                fontWeight: (theme) =>\n                  read.get()\n                    ? theme.typography.fontWeightRegular\n                    : theme.typography.fontWeightMedium,\n\n                // limited lines text\n                overflow: \"hidden\",\n                textOverflow: \"ellipsis\",\n                display: \"-webkit-box\",\n                \"-webkit-line-clamp\": 3 /* number of lines to show */,\n                \"-webkit-box-orient\": \"vertical\",\n              }}\n            >\n              {content.get()}\n            </Typography>\n            <Typography\n              color={read.get() ? \"inherit\" : \"primary\"}\n              sx={{\n                fontSize: \"0.8125rem\",\n                marginTop: 0.625,\n                fontWeight: (theme) =>\n                  read.get()\n                    ? theme.typography.fontWeightRegular\n                    : theme.typography.fontWeightMedium,\n              }}\n            >\n              {formatTime(time.get())}\n            </Typography>\n          </div>\n          <NotificationReadIcon read={read.get()} />\n        </div>\n      </ContentContainer>\n    </ListItemLink>\n  ) : (\n    <Box\n      position=\"relative\"\n      pl={2}\n      pr={2}\n      maxWidth=\"100%\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      flexShrink={0}\n    >\n      <Box display=\"flex\" pt={1} pb={1}>\n        <Box\n          mr=\"12px\"\n          display=\"flex\"\n          justifyContent=\"center\"\n          alignItems=\"flex-start\"\n        >\n          <Skeleton variant=\"circular\" width={56} height={56} />\n        </Box>\n        <Box\n          flexBasis={0}\n          alignSelf=\"center\"\n          minWidth={0}\n          flexShrink={1}\n          flexGrow={1}\n          width=\"100%\"\n        >\n          <Typography variant=\"body1\" component=\"div\">\n            <Skeleton\n              width={`${getRandomIntInclusive(50, 100)}%`}\n              style={{ borderRadius: 8 }}\n            />\n          </Typography>\n        </Box>\n      </Box>\n    </Box>\n  );\n}\n\nNotification.whyDidYouRender = {\n  logOnDifferentValues: true,\n};\n\nexport default React.memo(Notification);\n","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/layout/notification/ActionsWithNotificationButton.jsx",["530","531"],"import { Downgraded, useState } from \"@hookstate/core\";\nimport CheckRoundedIcon from \"@mui/icons-material/CheckRounded\";\nimport MoreHorizIcon from \"@mui/icons-material/MoreHoriz\";\nimport { Grow, IconButton } from \"@mui/material\";\nimport ClickAwayListener from \"@mui/material/ClickAwayListener\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport MenuList from \"@mui/material/MenuList\";\nimport Paper from \"@mui/material/Paper\";\nimport MuiPopper from \"@mui/material/Popper\";\nimport { grey } from \"@mui/material/colors\";\nimport { styled } from \"@mui/material/styles\";\nimport { request } from \"api\";\nimport React, { useEffect } from \"react\";\nimport { useNotificationState } from \"state/NotificationState\";\nimport {\n  StyledMenuItem,\n  iconStyles,\n  menuItemWrapperStyles,\n} from \"../account/AccountMenu\";\nimport { STATUS_NOTIFICATION_READ } from \"./Notification\";\n\nconst menuId = \"more setting\";\nconst menuItemIconStyles = { ...iconStyles, marginRight: 12 };\n\nexport const notificationMenuWidth = 360;\nconst styles = {\n  iconButton: {\n    padding: 0,\n    \"&:hover\": {\n      backgroundColor: grey[200],\n    },\n  },\n  paper: {\n    backgroundColor: \"#ffffff\",\n    width: notificationMenuWidth - 16,\n    marginLeft: -1,\n    minWidth: 240,\n    borderRadius: 2,\n    boxShadow:\n      \"0 12px 28px 0 rgba(0, 0, 0, 0.2), 0 2px 4px 0 rgba(0, 0, 0, 0.1), inset 0 0 0 1px rgba(255, 255, 255, 0.5)\",\n  },\n  text: (theme) => ({\n    fontWeight: theme.typography.fontWeightMedium,\n  }),\n  menuItem: {\n    padding: \"2px 8px\",\n  },\n};\n\nconst Popper = styled(MuiPopper, {\n  shouldForwardProp: (prop) => prop !== \"arrow\",\n})(({ theme, arrow }) => ({\n  zIndex: 1,\n  \"& > div\": {\n    position: \"relative\",\n  },\n  '&[data-popper-placement*=\"bottom\"]': {\n    \"& > div\": {\n      marginTop: arrow ? 2 : 0,\n    },\n    \"& .MuiPopper-arrow\": {\n      top: 0,\n      left: 0,\n      marginTop: \"-0.9em\",\n      width: \"3em\",\n      height: \"1em\",\n      \"&::before\": {\n        borderWidth: \"0 1em 1em 1em\",\n        borderColor: `transparent transparent ${theme.palette.background.paper} transparent`,\n      },\n    },\n  },\n  '&[data-popper-placement*=\"top\"]': {\n    \"& > div\": {\n      marginBottom: arrow ? 2 : 0,\n    },\n    \"& .MuiPopper-arrow\": {\n      bottom: 0,\n      left: 0,\n      marginBottom: \"-0.9em\",\n      width: \"3em\",\n      height: \"1em\",\n      \"&::before\": {\n        borderWidth: \"1em 1em 0 1em\",\n        borderColor: `${theme.palette.background.paper} transparent transparent transparent`,\n      },\n    },\n  },\n  '&[data-popper-placement*=\"right\"]': {\n    \"& > div\": {\n      marginLeft: arrow ? 2 : 0,\n    },\n    \"& .MuiPopper-arrow\": {\n      left: 0,\n      marginLeft: \"-0.9em\",\n      height: \"3em\",\n      width: \"1em\",\n      \"&::before\": {\n        borderWidth: \"1em 1em 1em 0\",\n        borderColor: `transparent ${theme.palette.background.paper} transparent transparent`,\n      },\n    },\n  },\n  '&[data-popper-placement*=\"left\"]': {\n    \"& > div\": {\n      marginRight: arrow ? 2 : 0,\n    },\n    \"& .MuiPopper-arrow\": {\n      right: 0,\n      marginRight: \"-0.9em\",\n      height: \"3em\",\n      width: \"1em\",\n      \"&::before\": {\n        borderWidth: \"1em 0 1em 1em\",\n        borderColor: `transparent transparent transparent ${theme.palette.background.paper}`,\n      },\n    },\n  },\n}));\n\nconst Arrow = styled(\"div\")({\n  position: \"absolute\",\n  fontSize: 7,\n  width: \"3em\",\n  height: \"3em\",\n  \"&::before\": {\n    content: '\"\"',\n    margin: \"auto\",\n    display: \"block\",\n    width: 0,\n    height: 0,\n    borderStyle: \"solid\",\n  },\n});\n\n/**\n * See: https://github.com/mui/material-ui/blob/master/docs/data/material/components/popper/ScrollPlayground.js\n */\nfunction ActionsWithNotificationButton() {\n  const open = useState(false);\n  const [arrowRef, setArrowRef] = React.useState(null);\n  const { notifications, numUnRead } = useNotificationState();\n\n  // Return focus to the button when we transitioned from !open -> open\n  const prevOpen = React.useRef(open.get());\n  const anchorRef = React.useRef(null);\n\n  // Action button\n  const handleToggle = () => {\n    open.set((prevOpen) => !prevOpen);\n  };\n\n  // Menu\n  const handleClose = (event) => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n\n    open.set(false);\n  };\n\n  function handleListKeyDown(event) {\n    if (event.key === \"Tab\") {\n      event.preventDefault();\n      open.set(false);\n    }\n  }\n\n  useEffect(() => {\n    if (prevOpen.current === true && open.get() === false) {\n      anchorRef.current.focus();\n    }\n\n    prevOpen.current = open.get();\n  }, [open.get()]);\n\n  // Menu items\n  const handleMarksAllAsRead = (event) => {\n    handleClose(event);\n\n    if (numUnRead.get() > 0)\n      request(\n        \"patch\",\n        \"/notification/status\",\n        (res) => {\n          const rawNotifications = notifications.attach(Downgraded).get();\n\n          rawNotifications.forEach((notification) => {\n            notification.read = true;\n          });\n\n          notifications.set(rawNotifications);\n          numUnRead.set(0);\n        },\n        {},\n        {\n          status: STATUS_NOTIFICATION_READ,\n          beforeOrAt: new Date(notifications[0].time.get()),\n        }\n      );\n  };\n\n  const menuItems = [\n    {\n      text: \"Đánh dấu tất cả là đã đọc\",\n      onClick: handleMarksAllAsRead,\n      icon: <CheckRoundedIcon style={menuItemIconStyles} fontSize=\"small\" />,\n    },\n  ];\n\n  return (\n    <>\n      <IconButton\n        component=\"span\"\n        aria-haspopup=\"true\"\n        aria-label=\"action with notification\"\n        aria-controls={open.get() ? menuId : undefined}\n        ref={anchorRef}\n        onClick={handleToggle}\n        sx={styles.iconButton}\n      >\n        <MoreHorizIcon style={{ fontSize: 32, padding: 4 }} />\n      </IconButton>\n      <Popper\n        transition\n        disablePortal\n        open={open.get()}\n        placement=\"bottom-end\"\n        anchorEl={anchorRef.current}\n        modifiers={[\n          {\n            name: \"arrow\",\n            enabled: true,\n            options: {\n              element: arrowRef,\n            },\n          },\n        ]}\n      >\n        {({ TransitionProps, placement }) => (\n          <>\n            <Arrow ref={setArrowRef} className=\"MuiPopper-arrow\" />\n            <Grow\n              {...TransitionProps}\n              style={{\n                transformOrigin: placement.startsWith(\"bottom\")\n                  ? \"center top\"\n                  : \"center bottom\",\n              }}\n            >\n              <Paper elevation={0} sx={styles.paper}>\n                <ClickAwayListener onClickAway={handleClose}>\n                  <MenuList\n                    id={menuId}\n                    autoFocusItem={open.get()}\n                    onKeyDown={handleListKeyDown}\n                  >\n                    {menuItems.map(({ text, onClick, icon }) => (\n                      <div key={text} style={menuItemWrapperStyles}>\n                        <StyledMenuItem\n                          onClick={onClick}\n                          sx={styles.menuItem}\n                          style={{ minHeight: 36 }}\n                        >\n                          {icon}\n                          <ListItemText\n                            component=\"span\"\n                            primary={text}\n                            primaryTypographyProps={{\n                              sx: styles.text,\n                            }}\n                          />\n                        </StyledMenuItem>\n                      </div>\n                    ))}\n                  </MenuList>\n                </ClickAwayListener>\n              </Paper>\n            </Grow>\n          </>\n        )}\n      </Popper>\n    </>\n  );\n}\n\nexport default ActionsWithNotificationButton;\n","/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/layout/account/RejectFeedbackDialog.jsx",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/layout/notification/NotificationReadIcon.jsx",[],"/home/dinh/Documents/HUST/thesis/openerp-micro-service/wms/wms-frontend/src/components/dialog/CustomizedDialogs.jsx",[],{"ruleId":"532","severity":1,"message":"533","line":35,"column":6,"nodeType":"534","endLine":35,"endColumn":25,"suggestions":"535"},{"ruleId":"536","severity":1,"message":"537","line":11,"column":9,"nodeType":"538","messageId":"539","endLine":11,"endColumn":16},{"ruleId":"536","severity":1,"message":"540","line":24,"column":21,"nodeType":"538","messageId":"539","endLine":24,"endColumn":27},{"ruleId":"536","severity":1,"message":"541","line":24,"column":43,"nodeType":"538","messageId":"539","endLine":24,"endColumn":48},{"ruleId":"536","severity":1,"message":"542","line":24,"column":50,"nodeType":"538","messageId":"539","endLine":24,"endColumn":59},{"ruleId":"543","severity":1,"message":"544","line":31,"column":24,"nodeType":"545","messageId":"546","endLine":31,"endColumn":26},{"ruleId":"543","severity":1,"message":"544","line":47,"column":24,"nodeType":"545","messageId":"546","endLine":47,"endColumn":26},{"ruleId":"532","severity":1,"message":"547","line":69,"column":6,"nodeType":"534","endLine":69,"endColumn":8,"suggestions":"548"},{"ruleId":"549","severity":1,"message":"550","line":22,"column":9,"nodeType":"551","endLine":22,"endColumn":123},{"ruleId":"536","severity":1,"message":"541","line":46,"column":43,"nodeType":"538","messageId":"539","endLine":46,"endColumn":48},{"ruleId":"536","severity":1,"message":"542","line":46,"column":50,"nodeType":"538","messageId":"539","endLine":46,"endColumn":59},{"ruleId":"532","severity":1,"message":"552","line":73,"column":6,"nodeType":"534","endLine":73,"endColumn":8,"suggestions":"553"},{"ruleId":"543","severity":1,"message":"544","line":86,"column":24,"nodeType":"545","messageId":"546","endLine":86,"endColumn":26},{"ruleId":"543","severity":1,"message":"544","line":264,"column":62,"nodeType":"545","messageId":"546","endLine":264,"endColumn":64},{"ruleId":"543","severity":1,"message":"544","line":267,"column":63,"nodeType":"545","messageId":"546","endLine":267,"endColumn":65},{"ruleId":"543","severity":1,"message":"544","line":270,"column":56,"nodeType":"545","messageId":"546","endLine":270,"endColumn":58},{"ruleId":"532","severity":1,"message":"554","line":31,"column":6,"nodeType":"534","endLine":31,"endColumn":8,"suggestions":"555"},{"ruleId":"543","severity":1,"message":"544","line":38,"column":24,"nodeType":"545","messageId":"546","endLine":38,"endColumn":26},{"ruleId":"543","severity":1,"message":"544","line":54,"column":24,"nodeType":"545","messageId":"546","endLine":54,"endColumn":26},{"ruleId":"536","severity":1,"message":"556","line":6,"column":38,"nodeType":"538","messageId":"539","endLine":6,"endColumn":44},{"ruleId":"536","severity":1,"message":"557","line":19,"column":10,"nodeType":"538","messageId":"539","endLine":19,"endColumn":24},{"ruleId":"536","severity":1,"message":"558","line":19,"column":26,"nodeType":"538","messageId":"539","endLine":19,"endColumn":43},{"ruleId":"543","severity":1,"message":"544","line":39,"column":42,"nodeType":"545","messageId":"546","endLine":39,"endColumn":44},{"ruleId":"532","severity":1,"message":"554","line":67,"column":6,"nodeType":"534","endLine":67,"endColumn":8,"suggestions":"559"},{"ruleId":"543","severity":1,"message":"544","line":81,"column":49,"nodeType":"545","messageId":"546","endLine":81,"endColumn":51},{"ruleId":"532","severity":1,"message":"560","line":90,"column":6,"nodeType":"534","endLine":90,"endColumn":25,"suggestions":"561"},{"ruleId":"543","severity":1,"message":"544","line":94,"column":32,"nodeType":"545","messageId":"546","endLine":94,"endColumn":34},{"ruleId":"532","severity":1,"message":"562","line":99,"column":6,"nodeType":"534","endLine":99,"endColumn":27,"suggestions":"563"},{"ruleId":"543","severity":1,"message":"544","line":107,"column":31,"nodeType":"545","messageId":"546","endLine":107,"endColumn":33},{"ruleId":"543","severity":1,"message":"544","line":107,"column":67,"nodeType":"545","messageId":"546","endLine":107,"endColumn":69},{"ruleId":"532","severity":1,"message":"564","line":114,"column":6,"nodeType":"534","endLine":114,"endColumn":21,"suggestions":"565"},{"ruleId":"543","severity":1,"message":"544","line":121,"column":24,"nodeType":"545","messageId":"546","endLine":121,"endColumn":26},{"ruleId":"543","severity":1,"message":"544","line":382,"column":64,"nodeType":"545","messageId":"546","endLine":382,"endColumn":66},{"ruleId":"543","severity":1,"message":"544","line":385,"column":35,"nodeType":"545","messageId":"546","endLine":385,"endColumn":37},{"ruleId":"532","severity":1,"message":"566","line":124,"column":6,"nodeType":"534","endLine":124,"endColumn":25,"suggestions":"567"},{"ruleId":"536","severity":1,"message":"568","line":27,"column":10,"nodeType":"538","messageId":"539","endLine":27,"endColumn":17},{"ruleId":"536","severity":1,"message":"569","line":28,"column":10,"nodeType":"538","messageId":"539","endLine":28,"endColumn":17},{"ruleId":"543","severity":1,"message":"544","line":3,"column":45,"nodeType":"545","messageId":"546","endLine":3,"endColumn":47},{"ruleId":"543","severity":1,"message":"544","line":11,"column":34,"nodeType":"545","messageId":"546","endLine":11,"endColumn":36},{"ruleId":"536","severity":1,"message":"570","line":30,"column":7,"nodeType":"538","messageId":"539","endLine":30,"endColumn":33},{"ruleId":"536","severity":1,"message":"571","line":34,"column":7,"nodeType":"538","messageId":"539","endLine":34,"endColumn":15},{"ruleId":"536","severity":1,"message":"572","line":55,"column":12,"nodeType":"538","messageId":"539","endLine":55,"endColumn":18},{"ruleId":"532","severity":1,"message":"573","line":20,"column":5,"nodeType":"534","endLine":20,"endColumn":9,"suggestions":"574"},{"ruleId":"536","severity":1,"message":"575","line":14,"column":11,"nodeType":"538","messageId":"539","endLine":14,"endColumn":25},{"ruleId":"532","severity":1,"message":"576","line":44,"column":6,"nodeType":"534","endLine":44,"endColumn":22,"suggestions":"577"},{"ruleId":"536","severity":1,"message":"578","line":60,"column":11,"nodeType":"538","messageId":"539","endLine":60,"endColumn":14},{"ruleId":"532","severity":1,"message":"579","line":110,"column":6,"nodeType":"534","endLine":110,"endColumn":18,"suggestions":"580"},{"ruleId":"532","severity":1,"message":"581","line":110,"column":7,"nodeType":"582","endLine":110,"endColumn":17},{"ruleId":"532","severity":1,"message":"583","line":252,"column":6,"nodeType":"534","endLine":252,"endColumn":8,"suggestions":"584"},{"ruleId":"532","severity":1,"message":"585","line":36,"column":6,"nodeType":"534","endLine":36,"endColumn":18,"suggestions":"586"},{"ruleId":"532","severity":1,"message":"587","line":36,"column":7,"nodeType":"582","endLine":36,"endColumn":17},{"ruleId":"536","severity":1,"message":"537","line":14,"column":9,"nodeType":"538","messageId":"539","endLine":14,"endColumn":16},{"ruleId":"536","severity":1,"message":"588","line":12,"column":10,"nodeType":"538","messageId":"539","endLine":12,"endColumn":17},{"ruleId":"543","severity":1,"message":"544","line":28,"column":34,"nodeType":"545","messageId":"546","endLine":28,"endColumn":36},{"ruleId":"532","severity":1,"message":"589","line":32,"column":6,"nodeType":"534","endLine":32,"endColumn":27,"suggestions":"590"},{"ruleId":"543","severity":1,"message":"544","line":40,"column":53,"nodeType":"545","messageId":"546","endLine":40,"endColumn":55},{"ruleId":"543","severity":1,"message":"544","line":44,"column":25,"nodeType":"545","messageId":"546","endLine":44,"endColumn":27},{"ruleId":"536","severity":1,"message":"591","line":152,"column":10,"nodeType":"538","messageId":"539","endLine":152,"endColumn":21},{"ruleId":"532","severity":1,"message":"547","line":192,"column":6,"nodeType":"534","endLine":192,"endColumn":8,"suggestions":"592"},{"ruleId":"543","severity":1,"message":"544","line":195,"column":42,"nodeType":"545","messageId":"546","endLine":195,"endColumn":44},{"ruleId":"543","severity":1,"message":"544","line":200,"column":24,"nodeType":"545","messageId":"546","endLine":200,"endColumn":26},{"ruleId":"543","severity":1,"message":"544","line":217,"column":24,"nodeType":"545","messageId":"546","endLine":217,"endColumn":26},{"ruleId":"543","severity":1,"message":"544","line":374,"column":57,"nodeType":"545","messageId":"546","endLine":374,"endColumn":59},{"ruleId":"543","severity":1,"message":"544","line":427,"column":74,"nodeType":"545","messageId":"546","endLine":427,"endColumn":76},{"ruleId":"536","severity":1,"message":"540","line":21,"column":21,"nodeType":"538","messageId":"539","endLine":21,"endColumn":27},{"ruleId":"536","severity":1,"message":"541","line":21,"column":43,"nodeType":"538","messageId":"539","endLine":21,"endColumn":48},{"ruleId":"536","severity":1,"message":"542","line":21,"column":50,"nodeType":"538","messageId":"539","endLine":21,"endColumn":59},{"ruleId":"543","severity":1,"message":"544","line":68,"column":24,"nodeType":"545","messageId":"546","endLine":68,"endColumn":26},{"ruleId":"532","severity":1,"message":"593","line":114,"column":6,"nodeType":"534","endLine":114,"endColumn":8,"suggestions":"594"},{"ruleId":"543","severity":1,"message":"544","line":212,"column":46,"nodeType":"545","messageId":"546","endLine":212,"endColumn":48},{"ruleId":"536","severity":1,"message":"595","line":13,"column":27,"nodeType":"538","messageId":"539","endLine":13,"endColumn":45},{"ruleId":"549","severity":1,"message":"550","line":51,"column":17,"nodeType":"551","endLine":51,"endColumn":131},{"ruleId":"536","severity":1,"message":"596","line":16,"column":10,"nodeType":"538","messageId":"539","endLine":16,"endColumn":26},{"ruleId":"543","severity":1,"message":"544","line":34,"column":32,"nodeType":"545","messageId":"546","endLine":34,"endColumn":34},{"ruleId":"543","severity":1,"message":"597","line":40,"column":20,"nodeType":"545","messageId":"546","endLine":40,"endColumn":22},{"ruleId":"536","severity":1,"message":"598","line":62,"column":13,"nodeType":"538","messageId":"539","endLine":62,"endColumn":29},{"ruleId":"536","severity":1,"message":"599","line":70,"column":13,"nodeType":"538","messageId":"539","endLine":70,"endColumn":30},{"ruleId":"532","severity":1,"message":"600","line":97,"column":6,"nodeType":"534","endLine":97,"endColumn":8,"suggestions":"601"},{"ruleId":"549","severity":1,"message":"550","line":164,"column":19,"nodeType":"551","endLine":164,"endColumn":72},{"ruleId":"543","severity":1,"message":"544","line":193,"column":47,"nodeType":"545","messageId":"546","endLine":193,"endColumn":49},{"ruleId":"543","severity":1,"message":"544","line":42,"column":56,"nodeType":"545","messageId":"546","endLine":42,"endColumn":58},{"ruleId":"536","severity":1,"message":"541","line":28,"column":43,"nodeType":"538","messageId":"539","endLine":28,"endColumn":48},{"ruleId":"532","severity":1,"message":"602","line":74,"column":6,"nodeType":"534","endLine":74,"endColumn":19,"suggestions":"603"},{"ruleId":"536","severity":1,"message":"537","line":15,"column":9,"nodeType":"538","messageId":"539","endLine":15,"endColumn":16},{"ruleId":"543","severity":1,"message":"544","line":35,"column":54,"nodeType":"545","messageId":"546","endLine":35,"endColumn":56},{"ruleId":"532","severity":1,"message":"604","line":69,"column":6,"nodeType":"534","endLine":69,"endColumn":8,"suggestions":"605"},{"ruleId":"536","severity":1,"message":"606","line":4,"column":10,"nodeType":"538","messageId":"539","endLine":4,"endColumn":24},{"ruleId":"536","severity":1,"message":"607","line":6,"column":8,"nodeType":"538","messageId":"539","endLine":6,"endColumn":30},{"ruleId":"543","severity":1,"message":"544","line":37,"column":36,"nodeType":"545","messageId":"546","endLine":37,"endColumn":38},{"ruleId":"532","severity":1,"message":"608","line":43,"column":6,"nodeType":"534","endLine":43,"endColumn":19,"suggestions":"609"},{"ruleId":"543","severity":1,"message":"544","line":67,"column":23,"nodeType":"545","messageId":"546","endLine":67,"endColumn":25},{"ruleId":"543","severity":1,"message":"544","line":75,"column":56,"nodeType":"545","messageId":"546","endLine":75,"endColumn":58},{"ruleId":"543","severity":1,"message":"544","line":86,"column":25,"nodeType":"545","messageId":"546","endLine":86,"endColumn":27},{"ruleId":"536","severity":1,"message":"541","line":243,"column":43,"nodeType":"538","messageId":"539","endLine":243,"endColumn":48},{"ruleId":"536","severity":1,"message":"542","line":243,"column":50,"nodeType":"538","messageId":"539","endLine":243,"endColumn":59},{"ruleId":"532","severity":1,"message":"610","line":305,"column":6,"nodeType":"534","endLine":305,"endColumn":21,"suggestions":"611"},{"ruleId":"536","severity":1,"message":"598","line":321,"column":13,"nodeType":"538","messageId":"539","endLine":321,"endColumn":29},{"ruleId":"536","severity":1,"message":"599","line":329,"column":13,"nodeType":"538","messageId":"539","endLine":329,"endColumn":30},{"ruleId":"532","severity":1,"message":"612","line":365,"column":6,"nodeType":"534","endLine":365,"endColumn":8,"suggestions":"613"},{"ruleId":"549","severity":1,"message":"550","line":465,"column":19,"nodeType":"551","endLine":465,"endColumn":72},{"ruleId":"543","severity":1,"message":"544","line":492,"column":47,"nodeType":"545","messageId":"546","endLine":492,"endColumn":49},{"ruleId":"536","severity":1,"message":"614","line":12,"column":9,"nodeType":"538","messageId":"539","endLine":12,"endColumn":16},{"ruleId":"536","severity":1,"message":"615","line":14,"column":19,"nodeType":"538","messageId":"539","endLine":14,"endColumn":29},{"ruleId":"543","severity":1,"message":"544","line":54,"column":34,"nodeType":"545","messageId":"546","endLine":54,"endColumn":36},{"ruleId":"543","severity":1,"message":"544","line":76,"column":34,"nodeType":"545","messageId":"546","endLine":76,"endColumn":36},{"ruleId":"536","severity":1,"message":"614","line":94,"column":9,"nodeType":"538","messageId":"539","endLine":94,"endColumn":16},{"ruleId":"536","severity":1,"message":"537","line":19,"column":9,"nodeType":"538","messageId":"539","endLine":19,"endColumn":16},{"ruleId":"543","severity":1,"message":"544","line":71,"column":32,"nodeType":"545","messageId":"546","endLine":71,"endColumn":34},{"ruleId":"536","severity":1,"message":"616","line":4,"column":10,"nodeType":"538","messageId":"539","endLine":4,"endColumn":27},{"ruleId":"536","severity":1,"message":"617","line":17,"column":10,"nodeType":"538","messageId":"539","endLine":17,"endColumn":23},{"ruleId":"536","severity":1,"message":"618","line":20,"column":10,"nodeType":"538","messageId":"539","endLine":20,"endColumn":34},{"ruleId":"532","severity":1,"message":"619","line":69,"column":6,"nodeType":"534","endLine":69,"endColumn":8,"suggestions":"620"},{"ruleId":"543","severity":1,"message":"544","line":76,"column":34,"nodeType":"545","messageId":"546","endLine":76,"endColumn":36},{"ruleId":"532","severity":1,"message":"621","line":79,"column":6,"nodeType":"534","endLine":79,"endColumn":27,"suggestions":"622"},{"ruleId":"543","severity":1,"message":"544","line":92,"column":9,"nodeType":"545","messageId":"546","endLine":92,"endColumn":11},{"ruleId":"623","severity":1,"message":"624","line":118,"column":14,"nodeType":"538","messageId":"625","endLine":118,"endColumn":15},{"ruleId":"543","severity":1,"message":"544","line":120,"column":9,"nodeType":"545","messageId":"546","endLine":120,"endColumn":11},{"ruleId":"543","severity":1,"message":"544","line":139,"column":24,"nodeType":"545","messageId":"546","endLine":139,"endColumn":26},{"ruleId":"532","severity":1,"message":"626","line":24,"column":6,"nodeType":"534","endLine":24,"endColumn":8,"suggestions":"627"},{"ruleId":"536","severity":1,"message":"537","line":12,"column":9,"nodeType":"538","messageId":"539","endLine":12,"endColumn":16},{"ruleId":"543","severity":1,"message":"544","line":75,"column":32,"nodeType":"545","messageId":"546","endLine":75,"endColumn":34},{"ruleId":"543","severity":1,"message":"544","line":39,"column":62,"nodeType":"545","messageId":"546","endLine":39,"endColumn":64},{"ruleId":"543","severity":1,"message":"544","line":47,"column":34,"nodeType":"545","messageId":"546","endLine":47,"endColumn":36},{"ruleId":"543","severity":1,"message":"544","line":71,"column":32,"nodeType":"545","messageId":"546","endLine":71,"endColumn":34},{"ruleId":"532","severity":1,"message":"628","line":66,"column":6,"nodeType":"534","endLine":66,"endColumn":8,"suggestions":"629"},{"ruleId":"532","severity":1,"message":"585","line":80,"column":6,"nodeType":"534","endLine":80,"endColumn":18,"suggestions":"630"},{"ruleId":"532","severity":1,"message":"587","line":80,"column":7,"nodeType":"582","endLine":80,"endColumn":17},{"ruleId":"536","severity":1,"message":"631","line":81,"column":7,"nodeType":"538","messageId":"539","endLine":81,"endColumn":34},{"ruleId":"532","severity":1,"message":"585","line":175,"column":6,"nodeType":"534","endLine":175,"endColumn":18,"suggestions":"632"},{"ruleId":"532","severity":1,"message":"587","line":175,"column":7,"nodeType":"582","endLine":175,"endColumn":17},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'notificationState.open'. Either include it or remove the dependency array.","ArrayExpression",["633"],"no-unused-vars","'history' is assigned a value but never used.","Identifier","unusedVar","'errors' is assigned a value but never used.","'watch' is assigned a value but never used.","'getValues' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'receiptId'. Either include it or remove the dependency array.",["634"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'selectPosition'. Either include it or remove the dependency array.",["635"],"React Hook useEffect has a missing dependency: 'orderId'. Either include it or remove the dependency array.",["636"],"'useRef' is defined but never used.","'processedItems' is assigned a value but never used.","'setProcessedItems' is assigned a value but never used.",["637"],"React Hook useEffect has a missing dependency: 'allWarehouses'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setWarehouseList' needs the current value of 'allWarehouses'.",["638"],"React Hook useEffect has a missing dependency: 'warehouseList'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setSelectedWarehouse' needs the current value of 'warehouseList'.",["639"],"React Hook useEffect has missing dependencies: 'allWarehouses', 'getProductOrderQuantity', and 'selectedProductId'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setMaxQuantity' needs the current value of 'selectedProductId'.",["640"],"React Hook useEffect has a missing dependency: 'checkSelected'. Either include it or remove the dependency array.",["641"],"'student' is defined but never used.","'teacher' is defined but never used.","'convertDateToRequestFormat' is assigned a value but never used.","'parseJwt' is assigned a value but never used.","'result' is assigned a value but never used.","React Hook useMemo has a missing dependency: 'pathname'. Either include it or remove the dependency array.",["642"],"'selectPosition' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'map'. Either include it or remove the dependency array.",["643"],"'map' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'open'. Either include it or remove the dependency array.",["644"],"React Hook React.useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","React Hook React.useEffect has missing dependencies: 'fetchNotification', 'notifications', and 'numUnRead'. Either include them or remove the dependency array.",["645"],"React Hook useEffect has a missing dependency: 'open'. Either include it or remove the dependency array.",["646"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","'Grid3x3' is defined but never used.","React Hook useEffect has a missing dependency: 'warehousesDetail'. Either include it or remove the dependency array. If 'setSelectedWarehouse' needs the current value of 'warehousesDetail', you can also switch to useReducer instead of useState and read 'warehousesDetail' in the reducer.",["647"],"'productList' is assigned a value but never used.",["648"],"React Hook useEffect has missing dependencies: 'isCreateForm' and 'receiptId'. Either include them or remove the dependency array.",["649"],"'setItemInCartCount' is assigned a value but never used.","'warehouseDetails' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'categoryResponse' is assigned a value but never used.","'warehouseResponse' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'productId'. Either include it or remove the dependency array.",["650"],"React Hook useEffect has a missing dependency: 'listShelf'. Either include it or remove the dependency array. You can also do a functional update 'setListShelf(l => ...)' if you only need 'listShelf' in the 'setListShelf' call.",["651"],"React Hook useEffect has a missing dependency: 'productTableData'. Either include it or remove the dependency array.",["652"],"'InputAdornment' is defined but never used.","'FormatListBulletedIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'warehouseDetails'. Either include it or remove the dependency array. If 'setSelectedWarehouse' needs the current value of 'warehouseDetails', you can also switch to useReducer instead of useState and read 'warehouseDetails' in the reducer.",["653"],"React Hook useEffect has a missing dependency: 'imageURL'. Either include it or remove the dependency array.",["654"],"React Hook useEffect has missing dependencies: 'isCreateForm' and 'productId'. Either include them or remove the dependency array.",["655"],"'classes' is assigned a value but never used.","'setColumns' is assigned a value but never used.","'WarehouseDropDown' is defined but never used.","'warehouseList' is assigned a value but never used.","'selectedDeliveryPersonId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'tripId'. Either include it or remove the dependency array.",["656"],"React Hook useEffect has a missing dependency: 'createdItemsTableData'. Either include it or remove the dependency array.",["657"],"no-redeclare","'i' is already defined.","redeclared","React Hook useEffect has a missing dependency: 'shipmentId'. Either include it or remove the dependency array.",["658"],"React Hook React.useCallback has missing dependencies: 'anchorRef' and 'open'. Either include them or remove the dependency array.",["659"],["660"],"'STATUS_NOTIFICATION_CREATED' is assigned a value but never used.",["661"],{"desc":"662","fix":"663"},{"desc":"664","fix":"665"},{"desc":"666","fix":"667"},{"desc":"668","fix":"669"},{"desc":"668","fix":"670"},{"desc":"671","fix":"672"},{"desc":"673","fix":"674"},{"desc":"675","fix":"676"},{"desc":"677","fix":"678"},{"desc":"679","fix":"680"},{"desc":"681","fix":"682"},{"desc":"683","fix":"684"},{"desc":"685","fix":"686"},{"desc":"683","fix":"687"},{"desc":"688","fix":"689"},{"desc":"664","fix":"690"},{"desc":"691","fix":"692"},{"desc":"693","fix":"694"},{"desc":"695","fix":"696"},{"desc":"697","fix":"698"},{"desc":"699","fix":"700"},{"desc":"701","fix":"702"},{"desc":"703","fix":"704"},{"desc":"705","fix":"706"},{"desc":"707","fix":"708"},{"desc":"709","fix":"710"},{"desc":"711","fix":"712"},{"desc":"683","fix":"713"},{"desc":"683","fix":"714"},"Update the dependencies array to be: [location.pathname, notificationState.open]",{"range":"715","text":"716"},"Update the dependencies array to be: [receiptId]",{"range":"717","text":"718"},"Update the dependencies array to be: [selectPosition]",{"range":"719","text":"720"},"Update the dependencies array to be: [orderId]",{"range":"721","text":"722"},{"range":"723","text":"722"},"Update the dependencies array to be: [allWarehouses, selectedProductId]",{"range":"724","text":"725"},"Update the dependencies array to be: [selectedWarehouseId, warehouseList]",{"range":"726","text":"727"},"Update the dependencies array to be: [allWarehouses, getProductOrderQuantity, selectedBayId, selectedProductId]",{"range":"728","text":"729"},"Update the dependencies array to be: [checkSelected, location.pathname]",{"range":"730","text":"731"},"Update the dependencies array to be: [pathname, to]",{"range":"732","text":"733"},"Update the dependencies array to be: [map, selectPosition]",{"range":"734","text":"735"},"Update the dependencies array to be: [open]",{"range":"736","text":"737"},"Update the dependencies array to be: [fetchNotification, notifications, numUnRead]",{"range":"738","text":"739"},{"range":"740","text":"737"},"Update the dependencies array to be: [selectedWarehouseId, warehousesDetail]",{"range":"741","text":"742"},{"range":"743","text":"718"},"Update the dependencies array to be: [isCreateForm, receiptId]",{"range":"744","text":"745"},"Update the dependencies array to be: [productId]",{"range":"746","text":"747"},"Update the dependencies array to be: [listShelf, warehouseId]",{"range":"748","text":"749"},"Update the dependencies array to be: [productTableData]",{"range":"750","text":"751"},"Update the dependencies array to be: [warehouseDetails, warehouseId]",{"range":"752","text":"753"},"Update the dependencies array to be: [imageURL, uploadedImage]",{"range":"754","text":"755"},"Update the dependencies array to be: [isCreateForm, productId]",{"range":"756","text":"757"},"Update the dependencies array to be: [tripId]",{"range":"758","text":"759"},"Update the dependencies array to be: [createdItemsTableData, selectedWarehouseId]",{"range":"760","text":"761"},"Update the dependencies array to be: [shipmentId]",{"range":"762","text":"763"},"Update the dependencies array to be: [anchorRef, open]",{"range":"764","text":"765"},{"range":"766","text":"737"},{"range":"767","text":"737"},[1073,1092],"[location.pathname, notificationState.open]",[2041,2043],"[receiptId]",[2430,2432],"[selectPosition]",[1016,1018],"[orderId]",[2446,2448],[3139,3158],"[allWarehouses, selectedProductId]",[3375,3396],"[selectedWarehouseId, warehouseList]",[3960,3975],"[allWarehouses, getProductOrderQuantity, selectedBayId, selectedProductId]",[3659,3678],"[checkSelected, location.pathname]",[552,556],"[pathname, to]",[1442,1458],"[map, selectPosition]",[2962,2974],"[open]",[7185,7187],"[fetchNotification, notifications, numUnRead]",[899,911],[1507,1528],"[selectedWarehouseId, warehousesDetail]",[6958,6960],[3337,3339],"[isCreateForm, receiptId]",[3034,3036],"[productId]",[3120,3133],"[listShelf, warehouseId]",[2055,2057],"[productTableData]",[1595,1608],"[warehouseDetails, warehouseId]",[9837,9852],"[imageURL, uploadedImage]",[11660,11662],"[isCreateForm, productId]",[2405,2407],"[tripId]",[2741,2762],"[createdItemsTableData, selectedWarehouseId]",[814,816],"[shipmentId]",[1988,1990],"[anchorRef, open]",[2387,2399],[4545,4557]]